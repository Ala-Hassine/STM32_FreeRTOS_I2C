
STM32_FreeRTOS_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e8c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800401c  0800401c  0000501c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004080  08004080  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004080  08004080  00005080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004088  08004088  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004088  08004088  00005088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800408c  0800408c  0000508c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004090  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          0000030c  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000368  20000368  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000daa4  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000203a  00000000  00000000  00013b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de8  00000000  00000000  00015b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000adc  00000000  00000000  00016958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000228cd  00000000  00000000  00017434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011002  00000000  00000000  00039d01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7d37  00000000  00000000  0004ad03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00122a3a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ff0  00000000  00000000  00122a80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  00126a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004004 	.word	0x08004004

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004004 	.word	0x08004004

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <LCD_SEND_CMD>:
  *         - The ENABLE_BIT_MASK, RS_EN_OFF_MASK, and RS_BIT_MASK are masks for control bits.
  *         - The TIMEOUT is the maximum time to wait for the I2C transmission to complete.
  */

void LCD_SEND_CMD(char cmd)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af02      	add	r7, sp, #8
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]
  uint8_t lcd_Buffer[LCD_BUFFER_SIZE];
  char upper_data, lower_data;
  upper_data = (cmd & UPPER_BITS_MASK);
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	f023 030f 	bic.w	r3, r3, #15
 8000570:	73fb      	strb	r3, [r7, #15]
  lower_data = ((cmd << LCD_BUFFER_SIZE) & UPPER_BITS_MASK);
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	011b      	lsls	r3, r3, #4
 8000576:	73bb      	strb	r3, [r7, #14]

  // Constructing the LCD buffer with control (enable) and selection (RS) signals
  lcd_Buffer[0]  = upper_data|EN_BIT_MASK;      //en=1, rs=0
 8000578:	7bfb      	ldrb	r3, [r7, #15]
 800057a:	f043 030c 	orr.w	r3, r3, #12
 800057e:	b2db      	uxtb	r3, r3
 8000580:	723b      	strb	r3, [r7, #8]
  lcd_Buffer[1]  = upper_data|RS_EN_OFF_MASK;   //en=0, rs=0
 8000582:	7bfb      	ldrb	r3, [r7, #15]
 8000584:	f043 0308 	orr.w	r3, r3, #8
 8000588:	b2db      	uxtb	r3, r3
 800058a:	727b      	strb	r3, [r7, #9]
  lcd_Buffer[2]  = lower_data|EN_BIT_MASK;      //en=1, rs=0
 800058c:	7bbb      	ldrb	r3, [r7, #14]
 800058e:	f043 030c 	orr.w	r3, r3, #12
 8000592:	b2db      	uxtb	r3, r3
 8000594:	72bb      	strb	r3, [r7, #10]
  lcd_Buffer[3]  = lower_data|RS_EN_OFF_MASK;   //en=0, rs=0
 8000596:	7bbb      	ldrb	r3, [r7, #14]
 8000598:	f043 0308 	orr.w	r3, r3, #8
 800059c:	b2db      	uxtb	r3, r3
 800059e:	72fb      	strb	r3, [r7, #11]

  // Transmitting the buffer via the I2C bus to the LCD screen with the specified address
  HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD, (uint8_t *) lcd_Buffer, LCD_BUFFER_SIZE, TIMEOUT);
 80005a0:	f107 0208 	add.w	r2, r7, #8
 80005a4:	2364      	movs	r3, #100	@ 0x64
 80005a6:	9300      	str	r3, [sp, #0]
 80005a8:	2304      	movs	r3, #4
 80005aa:	214e      	movs	r1, #78	@ 0x4e
 80005ac:	4803      	ldr	r0, [pc, #12]	@ (80005bc <LCD_SEND_CMD+0x5c>)
 80005ae:	f001 fd57 	bl	8002060 <HAL_I2C_Master_Transmit>
}
 80005b2:	bf00      	nop
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000134 	.word	0x20000134

080005c0 <LCD_SEND_DATA>:
  *         - The RS_EN_ON_MASK and RS_BIT_MASK are masks for control bits.
  *         - The TIMEOUT is the maximum time to wait for the I2C transmission to complete.
  */

void LCD_SEND_DATA(char data)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af02      	add	r7, sp, #8
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
  uint8_t lcd_Buffer[LCD_BUFFER_SIZE];
  char upper_data, lower_data;
  upper_data = (data & UPPER_BITS_MASK);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	f023 030f 	bic.w	r3, r3, #15
 80005d0:	73fb      	strb	r3, [r7, #15]
  lower_data = ((data << LCD_BUFFER_SIZE) & UPPER_BITS_MASK);
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	011b      	lsls	r3, r3, #4
 80005d6:	73bb      	strb	r3, [r7, #14]
  
  // Constructing the LCD buffer with control (enable) and selection (RS) signals
  lcd_Buffer[0]  = upper_data|RS_EN_ON_MASK;  //en=1, rs=1
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	f043 030d 	orr.w	r3, r3, #13
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	723b      	strb	r3, [r7, #8]
  lcd_Buffer[1]  = upper_data|RS_BIT_MASK;    //en=0, rs=1
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	f043 0309 	orr.w	r3, r3, #9
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	727b      	strb	r3, [r7, #9]
  lcd_Buffer[2]  = lower_data|RS_EN_ON_MASK;  //en=1, rs=1
 80005ec:	7bbb      	ldrb	r3, [r7, #14]
 80005ee:	f043 030d 	orr.w	r3, r3, #13
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	72bb      	strb	r3, [r7, #10]
  lcd_Buffer[3]  = lower_data|RS_BIT_MASK;    //en=0, rs=1
 80005f6:	7bbb      	ldrb	r3, [r7, #14]
 80005f8:	f043 0309 	orr.w	r3, r3, #9
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD, (uint8_t *) lcd_Buffer, LCD_BUFFER_SIZE, TIMEOUT);
 8000600:	f107 0208 	add.w	r2, r7, #8
 8000604:	2364      	movs	r3, #100	@ 0x64
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	2304      	movs	r3, #4
 800060a:	214e      	movs	r1, #78	@ 0x4e
 800060c:	4803      	ldr	r0, [pc, #12]	@ (800061c <LCD_SEND_DATA+0x5c>)
 800060e:	f001 fd27 	bl	8002060 <HAL_I2C_Master_Transmit>
}
 8000612:	bf00      	nop
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000134 	.word	0x20000134

08000620 <LCD_SET_CURSOR>:
  *         - The LCD_CURSOR_ROW_FIRST and LCD_CURSOR_ROW_SECOND are commands to set the cursor to the
  *           beginning of the first and second rows, respectively.
  */

void LCD_SET_CURSOR(int row, int col)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
  switch(row)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d003      	beq.n	8000638 <LCD_SET_CURSOR+0x18>
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2b01      	cmp	r3, #1
 8000634:	d005      	beq.n	8000642 <LCD_SET_CURSOR+0x22>
 8000636:	e009      	b.n	800064c <LCD_SET_CURSOR+0x2c>
  {
    case 0: col |= LCD_CURSOR_ROW_FIRST; break;
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	e004      	b.n	800064c <LCD_SET_CURSOR+0x2c>
    case 1: col |= LCD_CURSOR_ROW_SECOND; break;
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	bf00      	nop
  }
  LCD_SEND_CMD(col);
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff ff85 	bl	8000560 <LCD_SEND_CMD>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <LCD_INIT>:
  *           various settings such as function set, display on/off control, clearing the display,
  *           entry mode set, and enabling the display.
  */

void LCD_INIT(void)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	af00      	add	r7, sp, #0
  // Initialisation en mode 4 bits
  HAL_Delay(DELAY_50MS);
 8000662:	2028      	movs	r0, #40	@ 0x28
 8000664:	f000 fd16 	bl	8001094 <HAL_Delay>
  LCD_SEND_CMD(LCD_INIT_CMD_8BIT);
 8000668:	2030      	movs	r0, #48	@ 0x30
 800066a:	f7ff ff79 	bl	8000560 <LCD_SEND_CMD>
  HAL_Delay(DELAY_5MS);
 800066e:	2005      	movs	r0, #5
 8000670:	f000 fd10 	bl	8001094 <HAL_Delay>
  LCD_SEND_CMD(LCD_INIT_CMD_8BIT);
 8000674:	2030      	movs	r0, #48	@ 0x30
 8000676:	f7ff ff73 	bl	8000560 <LCD_SEND_CMD>
  HAL_Delay(DELAY_1MS);
 800067a:	2001      	movs	r0, #1
 800067c:	f000 fd0a 	bl	8001094 <HAL_Delay>
  LCD_SEND_CMD(LCD_INIT_CMD_8BIT);
 8000680:	2030      	movs	r0, #48	@ 0x30
 8000682:	f7ff ff6d 	bl	8000560 <LCD_SEND_CMD>
  HAL_Delay(DELAY_10MS);
 8000686:	200a      	movs	r0, #10
 8000688:	f000 fd04 	bl	8001094 <HAL_Delay>
  LCD_SEND_CMD(LCD_INIT_CMD_4BIT);
 800068c:	2020      	movs	r0, #32
 800068e:	f7ff ff67 	bl	8000560 <LCD_SEND_CMD>
  HAL_Delay(DELAY_10MS);
 8000692:	200a      	movs	r0, #10
 8000694:	f000 fcfe 	bl	8001094 <HAL_Delay>

  // dislay initialisation
  LCD_SEND_CMD (LCD_INIT_CMD_FUNCTION_SET); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000698:	2028      	movs	r0, #40	@ 0x28
 800069a:	f7ff ff61 	bl	8000560 <LCD_SEND_CMD>
  HAL_Delay(DELAY_1MS);
 800069e:	2001      	movs	r0, #1
 80006a0:	f000 fcf8 	bl	8001094 <HAL_Delay>
  LCD_SEND_CMD (LCD_INIT_CMD_DISPLAY_OFF); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80006a4:	2008      	movs	r0, #8
 80006a6:	f7ff ff5b 	bl	8000560 <LCD_SEND_CMD>
  HAL_Delay(DELAY_1MS);
 80006aa:	2001      	movs	r0, #1
 80006ac:	f000 fcf2 	bl	8001094 <HAL_Delay>
  LCD_SEND_CMD (LCD_INIT_CMD_CLEAR_DISPLAY);  // clear display
 80006b0:	2001      	movs	r0, #1
 80006b2:	f7ff ff55 	bl	8000560 <LCD_SEND_CMD>
  HAL_Delay(DELAY_1MS);
 80006b6:	2001      	movs	r0, #1
 80006b8:	f000 fcec 	bl	8001094 <HAL_Delay>
  HAL_Delay(DELAY_1MS);
 80006bc:	2001      	movs	r0, #1
 80006be:	f000 fce9 	bl	8001094 <HAL_Delay>
  LCD_SEND_CMD (LCD_INIT_CMD_ENTRY_MODE_SET); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80006c2:	2006      	movs	r0, #6
 80006c4:	f7ff ff4c 	bl	8000560 <LCD_SEND_CMD>
  HAL_Delay(DELAY_1MS);
 80006c8:	2001      	movs	r0, #1
 80006ca:	f000 fce3 	bl	8001094 <HAL_Delay>
  LCD_SEND_CMD (LCD_INIT_CMD_DISPLAY_ON); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80006ce:	200c      	movs	r0, #12
 80006d0:	f7ff ff46 	bl	8000560 <LCD_SEND_CMD>
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <LCD_SEND_STRING>:
  * @note   For the LCD_SEND_STRING function:
  *         - The *str is a pointer to the input string.
  */

void LCD_SEND_STRING(char *str)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  while (*str) LCD_SEND_DATA(*str++);
 80006e0:	e006      	b.n	80006f0 <LCD_SEND_STRING+0x18>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	1c5a      	adds	r2, r3, #1
 80006e6:	607a      	str	r2, [r7, #4]
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff68 	bl	80005c0 <LCD_SEND_DATA>
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d1f4      	bne.n	80006e2 <LCD_SEND_STRING+0xa>
}
 80006f8:	bf00      	nop
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <read_val1>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void read_val1()
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
   HAL_ADC_Start(&hadc1);
 8000708:	4809      	ldr	r0, [pc, #36]	@ (8000730 <read_val1+0x2c>)
 800070a:	f000 fd2b 	bl	8001164 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc1,1000);
 800070e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000712:	4807      	ldr	r0, [pc, #28]	@ (8000730 <read_val1+0x2c>)
 8000714:	f000 fe2b 	bl	800136e <HAL_ADC_PollForConversion>
   readValue1 = HAL_ADC_GetValue(&hadc1);
 8000718:	4805      	ldr	r0, [pc, #20]	@ (8000730 <read_val1+0x2c>)
 800071a:	f000 feb3 	bl	8001484 <HAL_ADC_GetValue>
 800071e:	4603      	mov	r3, r0
 8000720:	b29a      	uxth	r2, r3
 8000722:	4b04      	ldr	r3, [pc, #16]	@ (8000734 <read_val1+0x30>)
 8000724:	801a      	strh	r2, [r3, #0]
   HAL_ADC_Stop(&hadc1);
 8000726:	4802      	ldr	r0, [pc, #8]	@ (8000730 <read_val1+0x2c>)
 8000728:	f000 fdee 	bl	8001308 <HAL_ADC_Stop>
}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	200000a4 	.word	0x200000a4
 8000734:	20000078 	.word	0x20000078

08000738 <read_val2>:
void read_val2()
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
   HAL_ADC_Start(&hadc2);
 800073c:	4809      	ldr	r0, [pc, #36]	@ (8000764 <read_val2+0x2c>)
 800073e:	f000 fd11 	bl	8001164 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc2,1000);
 8000742:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000746:	4807      	ldr	r0, [pc, #28]	@ (8000764 <read_val2+0x2c>)
 8000748:	f000 fe11 	bl	800136e <HAL_ADC_PollForConversion>
   readValue2 = HAL_ADC_GetValue(&hadc2);
 800074c:	4805      	ldr	r0, [pc, #20]	@ (8000764 <read_val2+0x2c>)
 800074e:	f000 fe99 	bl	8001484 <HAL_ADC_GetValue>
 8000752:	4603      	mov	r3, r0
 8000754:	b29a      	uxth	r2, r3
 8000756:	4b04      	ldr	r3, [pc, #16]	@ (8000768 <read_val2+0x30>)
 8000758:	801a      	strh	r2, [r3, #0]
   HAL_ADC_Stop(&hadc2);
 800075a:	4802      	ldr	r0, [pc, #8]	@ (8000764 <read_val2+0x2c>)
 800075c:	f000 fdd4 	bl	8001308 <HAL_ADC_Stop>
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	200000ec 	.word	0x200000ec
 8000768:	2000007a 	.word	0x2000007a

0800076c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000772:	f000 fc4d 	bl	8001010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000776:	f000 f85b 	bl	8000830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077a:	f000 f9cf 	bl	8000b1c <MX_GPIO_Init>
  MX_ADC1_Init();
 800077e:	f000 f8c1 	bl	8000904 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000782:	f000 f913 	bl	80009ac <MX_ADC2_Init>
  MX_I2C2_Init();
 8000786:	f000 f965 	bl	8000a54 <MX_I2C2_Init>
  MX_TIM6_Init();
 800078a:	f000 f991 	bl	8000ab0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 800078e:	f7ff ff66 	bl	800065e <LCD_INIT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	read_val1();
 8000792:	f7ff ffb7 	bl	8000704 <read_val1>
	read_val2();
 8000796:	f7ff ffcf 	bl	8000738 <read_val2>
	// Display PA1 value on first row
	LCD_SET_CURSOR(0, 0);
 800079a:	2100      	movs	r1, #0
 800079c:	2000      	movs	r0, #0
 800079e:	f7ff ff3f 	bl	8000620 <LCD_SET_CURSOR>
	uint16_t percent1 = (readValue1 * 100) / 1023;
 80007a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000814 <main+0xa8>)
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	461a      	mov	r2, r3
 80007a8:	2364      	movs	r3, #100	@ 0x64
 80007aa:	fb02 f303 	mul.w	r3, r2, r3
 80007ae:	4a1a      	ldr	r2, [pc, #104]	@ (8000818 <main+0xac>)
 80007b0:	fb82 1203 	smull	r1, r2, r2, r3
 80007b4:	441a      	add	r2, r3
 80007b6:	1252      	asrs	r2, r2, #9
 80007b8:	17db      	asrs	r3, r3, #31
 80007ba:	1ad3      	subs	r3, r2, r3
 80007bc:	80fb      	strh	r3, [r7, #6]
	snprintf(lcd_buffer1, sizeof(lcd_buffer1), "PA1 : %3u%%", percent1);
 80007be:	88fb      	ldrh	r3, [r7, #6]
 80007c0:	4a16      	ldr	r2, [pc, #88]	@ (800081c <main+0xb0>)
 80007c2:	2114      	movs	r1, #20
 80007c4:	4816      	ldr	r0, [pc, #88]	@ (8000820 <main+0xb4>)
 80007c6:	f002 ff69 	bl	800369c <sniprintf>
	LCD_SEND_STRING(lcd_buffer1);
 80007ca:	4815      	ldr	r0, [pc, #84]	@ (8000820 <main+0xb4>)
 80007cc:	f7ff ff84 	bl	80006d8 <LCD_SEND_STRING>
	// Display PA2 value on second row
	LCD_SET_CURSOR(1, 0);
 80007d0:	2100      	movs	r1, #0
 80007d2:	2001      	movs	r0, #1
 80007d4:	f7ff ff24 	bl	8000620 <LCD_SET_CURSOR>
	uint16_t percent2 = (readValue2 * 100) / 1023;
 80007d8:	4b12      	ldr	r3, [pc, #72]	@ (8000824 <main+0xb8>)
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	461a      	mov	r2, r3
 80007de:	2364      	movs	r3, #100	@ 0x64
 80007e0:	fb02 f303 	mul.w	r3, r2, r3
 80007e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000818 <main+0xac>)
 80007e6:	fb82 1203 	smull	r1, r2, r2, r3
 80007ea:	441a      	add	r2, r3
 80007ec:	1252      	asrs	r2, r2, #9
 80007ee:	17db      	asrs	r3, r3, #31
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	80bb      	strh	r3, [r7, #4]
	snprintf(lcd_buffer2, sizeof(lcd_buffer2), "PA2 : %3u%%", percent2);
 80007f4:	88bb      	ldrh	r3, [r7, #4]
 80007f6:	4a0c      	ldr	r2, [pc, #48]	@ (8000828 <main+0xbc>)
 80007f8:	2114      	movs	r1, #20
 80007fa:	480c      	ldr	r0, [pc, #48]	@ (800082c <main+0xc0>)
 80007fc:	f002 ff4e 	bl	800369c <sniprintf>
	LCD_SEND_STRING(lcd_buffer2);
 8000800:	480a      	ldr	r0, [pc, #40]	@ (800082c <main+0xc0>)
 8000802:	f7ff ff69 	bl	80006d8 <LCD_SEND_STRING>
	HAL_Delay(500);
 8000806:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800080a:	f000 fc43 	bl	8001094 <HAL_Delay>
  {
 800080e:	bf00      	nop
 8000810:	e7bf      	b.n	8000792 <main+0x26>
 8000812:	bf00      	nop
 8000814:	20000078 	.word	0x20000078
 8000818:	80200803 	.word	0x80200803
 800081c:	0800401c 	.word	0x0800401c
 8000820:	2000007c 	.word	0x2000007c
 8000824:	2000007a 	.word	0x2000007a
 8000828:	08004028 	.word	0x08004028
 800082c:	20000090 	.word	0x20000090

08000830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b094      	sub	sp, #80	@ 0x50
 8000834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000836:	f107 0320 	add.w	r3, r7, #32
 800083a:	2230      	movs	r2, #48	@ 0x30
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f002 ff60 	bl	8003704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	4b28      	ldr	r3, [pc, #160]	@ (80008fc <SystemClock_Config+0xcc>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085c:	4a27      	ldr	r2, [pc, #156]	@ (80008fc <SystemClock_Config+0xcc>)
 800085e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000862:	6413      	str	r3, [r2, #64]	@ 0x40
 8000864:	4b25      	ldr	r3, [pc, #148]	@ (80008fc <SystemClock_Config+0xcc>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000868:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000870:	2300      	movs	r3, #0
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	4b22      	ldr	r3, [pc, #136]	@ (8000900 <SystemClock_Config+0xd0>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a21      	ldr	r2, [pc, #132]	@ (8000900 <SystemClock_Config+0xd0>)
 800087a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800087e:	6013      	str	r3, [r2, #0]
 8000880:	4b1f      	ldr	r3, [pc, #124]	@ (8000900 <SystemClock_Config+0xd0>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800088c:	2301      	movs	r3, #1
 800088e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000890:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000894:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000896:	2302      	movs	r3, #2
 8000898:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800089a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800089e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008a0:	2304      	movs	r3, #4
 80008a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80008a4:	2348      	movs	r3, #72	@ 0x48
 80008a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008a8:	2302      	movs	r3, #2
 80008aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008ac:	2307      	movs	r3, #7
 80008ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b0:	f107 0320 	add.w	r3, r7, #32
 80008b4:	4618      	mov	r0, r3
 80008b6:	f001 ff2d 	bl	8002714 <HAL_RCC_OscConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008c0:	f000 f971 	bl	8000ba6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c4:	230f      	movs	r3, #15
 80008c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c8:	2302      	movs	r3, #2
 80008ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	2102      	movs	r1, #2
 80008e2:	4618      	mov	r0, r3
 80008e4:	f002 f98e 	bl	8002c04 <HAL_RCC_ClockConfig>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008ee:	f000 f95a 	bl	8000ba6 <Error_Handler>
  }
}
 80008f2:	bf00      	nop
 80008f4:	3750      	adds	r7, #80	@ 0x50
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800
 8000900:	40007000 	.word	0x40007000

08000904 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800090a:	463b      	mov	r3, r7
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000916:	4b22      	ldr	r3, [pc, #136]	@ (80009a0 <MX_ADC1_Init+0x9c>)
 8000918:	4a22      	ldr	r2, [pc, #136]	@ (80009a4 <MX_ADC1_Init+0xa0>)
 800091a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800091c:	4b20      	ldr	r3, [pc, #128]	@ (80009a0 <MX_ADC1_Init+0x9c>)
 800091e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000922:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000924:	4b1e      	ldr	r3, [pc, #120]	@ (80009a0 <MX_ADC1_Init+0x9c>)
 8000926:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800092a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800092c:	4b1c      	ldr	r3, [pc, #112]	@ (80009a0 <MX_ADC1_Init+0x9c>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000932:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <MX_ADC1_Init+0x9c>)
 8000934:	2201      	movs	r2, #1
 8000936:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000938:	4b19      	ldr	r3, [pc, #100]	@ (80009a0 <MX_ADC1_Init+0x9c>)
 800093a:	2200      	movs	r2, #0
 800093c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000940:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <MX_ADC1_Init+0x9c>)
 8000942:	2200      	movs	r2, #0
 8000944:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000946:	4b16      	ldr	r3, [pc, #88]	@ (80009a0 <MX_ADC1_Init+0x9c>)
 8000948:	4a17      	ldr	r2, [pc, #92]	@ (80009a8 <MX_ADC1_Init+0xa4>)
 800094a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800094c:	4b14      	ldr	r3, [pc, #80]	@ (80009a0 <MX_ADC1_Init+0x9c>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000952:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <MX_ADC1_Init+0x9c>)
 8000954:	2201      	movs	r2, #1
 8000956:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000958:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <MX_ADC1_Init+0x9c>)
 800095a:	2200      	movs	r2, #0
 800095c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000960:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <MX_ADC1_Init+0x9c>)
 8000962:	2201      	movs	r2, #1
 8000964:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000966:	480e      	ldr	r0, [pc, #56]	@ (80009a0 <MX_ADC1_Init+0x9c>)
 8000968:	f000 fbb8 	bl	80010dc <HAL_ADC_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000972:	f000 f918 	bl	8000ba6 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000976:	2301      	movs	r3, #1
 8000978:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800097a:	2301      	movs	r3, #1
 800097c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800097e:	2300      	movs	r3, #0
 8000980:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000982:	463b      	mov	r3, r7
 8000984:	4619      	mov	r1, r3
 8000986:	4806      	ldr	r0, [pc, #24]	@ (80009a0 <MX_ADC1_Init+0x9c>)
 8000988:	f000 fd8a 	bl	80014a0 <HAL_ADC_ConfigChannel>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000992:	f000 f908 	bl	8000ba6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200000a4 	.word	0x200000a4
 80009a4:	40012000 	.word	0x40012000
 80009a8:	0f000001 	.word	0x0f000001

080009ac <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009b2:	463b      	mov	r3, r7
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80009be:	4b22      	ldr	r3, [pc, #136]	@ (8000a48 <MX_ADC2_Init+0x9c>)
 80009c0:	4a22      	ldr	r2, [pc, #136]	@ (8000a4c <MX_ADC2_Init+0xa0>)
 80009c2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009c4:	4b20      	ldr	r3, [pc, #128]	@ (8000a48 <MX_ADC2_Init+0x9c>)
 80009c6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80009ca:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 80009cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000a48 <MX_ADC2_Init+0x9c>)
 80009ce:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80009d2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80009d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a48 <MX_ADC2_Init+0x9c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80009da:	4b1b      	ldr	r3, [pc, #108]	@ (8000a48 <MX_ADC2_Init+0x9c>)
 80009dc:	2201      	movs	r2, #1
 80009de:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80009e0:	4b19      	ldr	r3, [pc, #100]	@ (8000a48 <MX_ADC2_Init+0x9c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009e8:	4b17      	ldr	r3, [pc, #92]	@ (8000a48 <MX_ADC2_Init+0x9c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009ee:	4b16      	ldr	r3, [pc, #88]	@ (8000a48 <MX_ADC2_Init+0x9c>)
 80009f0:	4a17      	ldr	r2, [pc, #92]	@ (8000a50 <MX_ADC2_Init+0xa4>)
 80009f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009f4:	4b14      	ldr	r3, [pc, #80]	@ (8000a48 <MX_ADC2_Init+0x9c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80009fa:	4b13      	ldr	r3, [pc, #76]	@ (8000a48 <MX_ADC2_Init+0x9c>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000a00:	4b11      	ldr	r3, [pc, #68]	@ (8000a48 <MX_ADC2_Init+0x9c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	@ (8000a48 <MX_ADC2_Init+0x9c>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a0e:	480e      	ldr	r0, [pc, #56]	@ (8000a48 <MX_ADC2_Init+0x9c>)
 8000a10:	f000 fb64 	bl	80010dc <HAL_ADC_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8000a1a:	f000 f8c4 	bl	8000ba6 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a22:	2301      	movs	r3, #1
 8000a24:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a26:	2300      	movs	r3, #0
 8000a28:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4806      	ldr	r0, [pc, #24]	@ (8000a48 <MX_ADC2_Init+0x9c>)
 8000a30:	f000 fd36 	bl	80014a0 <HAL_ADC_ConfigChannel>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 8000a3a:	f000 f8b4 	bl	8000ba6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200000ec 	.word	0x200000ec
 8000a4c:	40012100 	.word	0x40012100
 8000a50:	0f000001 	.word	0x0f000001

08000a54 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a58:	4b12      	ldr	r3, [pc, #72]	@ (8000aa4 <MX_I2C2_Init+0x50>)
 8000a5a:	4a13      	ldr	r2, [pc, #76]	@ (8000aa8 <MX_I2C2_Init+0x54>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	@ (8000aa4 <MX_I2C2_Init+0x50>)
 8000a60:	4a12      	ldr	r2, [pc, #72]	@ (8000aac <MX_I2C2_Init+0x58>)
 8000a62:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa4 <MX_I2C2_Init+0x50>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa4 <MX_I2C2_Init+0x50>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <MX_I2C2_Init+0x50>)
 8000a72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a76:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a78:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa4 <MX_I2C2_Init+0x50>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a7e:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <MX_I2C2_Init+0x50>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a84:	4b07      	ldr	r3, [pc, #28]	@ (8000aa4 <MX_I2C2_Init+0x50>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a8a:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <MX_I2C2_Init+0x50>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a90:	4804      	ldr	r0, [pc, #16]	@ (8000aa4 <MX_I2C2_Init+0x50>)
 8000a92:	f001 f9a1 	bl	8001dd8 <HAL_I2C_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a9c:	f000 f883 	bl	8000ba6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000134 	.word	0x20000134
 8000aa8:	40005800 	.word	0x40005800
 8000aac:	000186a0 	.word	0x000186a0

08000ab0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000abe:	4b15      	ldr	r3, [pc, #84]	@ (8000b14 <MX_TIM6_Init+0x64>)
 8000ac0:	4a15      	ldr	r2, [pc, #84]	@ (8000b18 <MX_TIM6_Init+0x68>)
 8000ac2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72-1;
 8000ac4:	4b13      	ldr	r3, [pc, #76]	@ (8000b14 <MX_TIM6_Init+0x64>)
 8000ac6:	2247      	movs	r2, #71	@ 0x47
 8000ac8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aca:	4b12      	ldr	r3, [pc, #72]	@ (8000b14 <MX_TIM6_Init+0x64>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xFFFF-1;
 8000ad0:	4b10      	ldr	r3, [pc, #64]	@ (8000b14 <MX_TIM6_Init+0x64>)
 8000ad2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000ad6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b14 <MX_TIM6_Init+0x64>)
 8000ada:	2280      	movs	r2, #128	@ 0x80
 8000adc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ade:	480d      	ldr	r0, [pc, #52]	@ (8000b14 <MX_TIM6_Init+0x64>)
 8000ae0:	f002 face 	bl	8003080 <HAL_TIM_Base_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000aea:	f000 f85c 	bl	8000ba6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aee:	2300      	movs	r3, #0
 8000af0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000af6:	463b      	mov	r3, r7
 8000af8:	4619      	mov	r1, r3
 8000afa:	4806      	ldr	r0, [pc, #24]	@ (8000b14 <MX_TIM6_Init+0x64>)
 8000afc:	f002 fd3e 	bl	800357c <HAL_TIMEx_MasterConfigSynchronization>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000b06:	f000 f84e 	bl	8000ba6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000188 	.word	0x20000188
 8000b18:	40001000 	.word	0x40001000

08000b1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4b17      	ldr	r3, [pc, #92]	@ (8000b84 <MX_GPIO_Init+0x68>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	4a16      	ldr	r2, [pc, #88]	@ (8000b84 <MX_GPIO_Init+0x68>)
 8000b2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b32:	4b14      	ldr	r3, [pc, #80]	@ (8000b84 <MX_GPIO_Init+0x68>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	4b10      	ldr	r3, [pc, #64]	@ (8000b84 <MX_GPIO_Init+0x68>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	4a0f      	ldr	r2, [pc, #60]	@ (8000b84 <MX_GPIO_Init+0x68>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b84 <MX_GPIO_Init+0x68>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b09      	ldr	r3, [pc, #36]	@ (8000b84 <MX_GPIO_Init+0x68>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	4a08      	ldr	r2, [pc, #32]	@ (8000b84 <MX_GPIO_Init+0x68>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6a:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <MX_GPIO_Init+0x68>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b76:	bf00      	nop
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800

08000b88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b98:	d101      	bne.n	8000b9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b9a:	f000 fa5b 	bl	8001054 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000baa:	b672      	cpsid	i
}
 8000bac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bae:	bf00      	nop
 8000bb0:	e7fd      	b.n	8000bae <Error_Handler+0x8>
	...

08000bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	4b10      	ldr	r3, [pc, #64]	@ (8000c00 <HAL_MspInit+0x4c>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc2:	4a0f      	ldr	r2, [pc, #60]	@ (8000c00 <HAL_MspInit+0x4c>)
 8000bc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bca:	4b0d      	ldr	r3, [pc, #52]	@ (8000c00 <HAL_MspInit+0x4c>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	4b09      	ldr	r3, [pc, #36]	@ (8000c00 <HAL_MspInit+0x4c>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bde:	4a08      	ldr	r2, [pc, #32]	@ (8000c00 <HAL_MspInit+0x4c>)
 8000be0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000be4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be6:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <HAL_MspInit+0x4c>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bf2:	2007      	movs	r0, #7
 8000bf4:	f000 ff1f 	bl	8001a36 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40023800 	.word	0x40023800

08000c04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08c      	sub	sp, #48	@ 0x30
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a2e      	ldr	r2, [pc, #184]	@ (8000cdc <HAL_ADC_MspInit+0xd8>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d128      	bne.n	8000c78 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	61bb      	str	r3, [r7, #24]
 8000c2a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ce0 <HAL_ADC_MspInit+0xdc>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2e:	4a2c      	ldr	r2, [pc, #176]	@ (8000ce0 <HAL_ADC_MspInit+0xdc>)
 8000c30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c36:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce0 <HAL_ADC_MspInit+0xdc>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c3e:	61bb      	str	r3, [r7, #24]
 8000c40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
 8000c46:	4b26      	ldr	r3, [pc, #152]	@ (8000ce0 <HAL_ADC_MspInit+0xdc>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	4a25      	ldr	r2, [pc, #148]	@ (8000ce0 <HAL_ADC_MspInit+0xdc>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c52:	4b23      	ldr	r3, [pc, #140]	@ (8000ce0 <HAL_ADC_MspInit+0xdc>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c62:	2303      	movs	r3, #3
 8000c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	4619      	mov	r1, r3
 8000c70:	481c      	ldr	r0, [pc, #112]	@ (8000ce4 <HAL_ADC_MspInit+0xe0>)
 8000c72:	f000 ff15 	bl	8001aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000c76:	e02c      	b.n	8000cd2 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ce8 <HAL_ADC_MspInit+0xe4>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d127      	bne.n	8000cd2 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	4b16      	ldr	r3, [pc, #88]	@ (8000ce0 <HAL_ADC_MspInit+0xdc>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c8a:	4a15      	ldr	r2, [pc, #84]	@ (8000ce0 <HAL_ADC_MspInit+0xdc>)
 8000c8c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c92:	4b13      	ldr	r3, [pc, #76]	@ (8000ce0 <HAL_ADC_MspInit+0xdc>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce0 <HAL_ADC_MspInit+0xdc>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca6:	4a0e      	ldr	r2, [pc, #56]	@ (8000ce0 <HAL_ADC_MspInit+0xdc>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <HAL_ADC_MspInit+0xdc>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cba:	2304      	movs	r3, #4
 8000cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	@ (8000ce4 <HAL_ADC_MspInit+0xe0>)
 8000cce:	f000 fee7 	bl	8001aa0 <HAL_GPIO_Init>
}
 8000cd2:	bf00      	nop
 8000cd4:	3730      	adds	r7, #48	@ 0x30
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40012000 	.word	0x40012000
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020000 	.word	0x40020000
 8000ce8:	40012100 	.word	0x40012100

08000cec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	@ 0x28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a19      	ldr	r2, [pc, #100]	@ (8000d70 <HAL_I2C_MspInit+0x84>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d12c      	bne.n	8000d68 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
 8000d12:	4b18      	ldr	r3, [pc, #96]	@ (8000d74 <HAL_I2C_MspInit+0x88>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	4a17      	ldr	r2, [pc, #92]	@ (8000d74 <HAL_I2C_MspInit+0x88>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1e:	4b15      	ldr	r3, [pc, #84]	@ (8000d74 <HAL_I2C_MspInit+0x88>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d2a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d30:	2312      	movs	r3, #18
 8000d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4619      	mov	r1, r3
 8000d46:	480c      	ldr	r0, [pc, #48]	@ (8000d78 <HAL_I2C_MspInit+0x8c>)
 8000d48:	f000 feaa 	bl	8001aa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	4b08      	ldr	r3, [pc, #32]	@ (8000d74 <HAL_I2C_MspInit+0x88>)
 8000d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d54:	4a07      	ldr	r2, [pc, #28]	@ (8000d74 <HAL_I2C_MspInit+0x88>)
 8000d56:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d5c:	4b05      	ldr	r3, [pc, #20]	@ (8000d74 <HAL_I2C_MspInit+0x88>)
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000d68:	bf00      	nop
 8000d6a:	3728      	adds	r7, #40	@ 0x28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40005800 	.word	0x40005800
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40020400 	.word	0x40020400

08000d7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0b      	ldr	r2, [pc, #44]	@ (8000db8 <HAL_TIM_Base_MspInit+0x3c>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d10d      	bne.n	8000daa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	4b0a      	ldr	r3, [pc, #40]	@ (8000dbc <HAL_TIM_Base_MspInit+0x40>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d96:	4a09      	ldr	r2, [pc, #36]	@ (8000dbc <HAL_TIM_Base_MspInit+0x40>)
 8000d98:	f043 0310 	orr.w	r3, r3, #16
 8000d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d9e:	4b07      	ldr	r3, [pc, #28]	@ (8000dbc <HAL_TIM_Base_MspInit+0x40>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da2:	f003 0310 	and.w	r3, r3, #16
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000daa:	bf00      	nop
 8000dac:	3714      	adds	r7, #20
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	40001000 	.word	0x40001000
 8000dbc:	40023800 	.word	0x40023800

08000dc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08e      	sub	sp, #56	@ 0x38
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	4b34      	ldr	r3, [pc, #208]	@ (8000ea8 <HAL_InitTick+0xe8>)
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd8:	4a33      	ldr	r2, [pc, #204]	@ (8000ea8 <HAL_InitTick+0xe8>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de0:	4b31      	ldr	r3, [pc, #196]	@ (8000ea8 <HAL_InitTick+0xe8>)
 8000de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dec:	f107 0210 	add.w	r2, r7, #16
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4611      	mov	r1, r2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f002 f910 	bl	800301c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000dfc:	6a3b      	ldr	r3, [r7, #32]
 8000dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d103      	bne.n	8000e0e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e06:	f002 f8f5 	bl	8002ff4 <HAL_RCC_GetPCLK1Freq>
 8000e0a:	6378      	str	r0, [r7, #52]	@ 0x34
 8000e0c:	e004      	b.n	8000e18 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e0e:	f002 f8f1 	bl	8002ff4 <HAL_RCC_GetPCLK1Freq>
 8000e12:	4603      	mov	r3, r0
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e1a:	4a24      	ldr	r2, [pc, #144]	@ (8000eac <HAL_InitTick+0xec>)
 8000e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e20:	0c9b      	lsrs	r3, r3, #18
 8000e22:	3b01      	subs	r3, #1
 8000e24:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000e26:	4b22      	ldr	r3, [pc, #136]	@ (8000eb0 <HAL_InitTick+0xf0>)
 8000e28:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e2c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000e2e:	4b20      	ldr	r3, [pc, #128]	@ (8000eb0 <HAL_InitTick+0xf0>)
 8000e30:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e34:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000e36:	4a1e      	ldr	r2, [pc, #120]	@ (8000eb0 <HAL_InitTick+0xf0>)
 8000e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e3a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000e3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb0 <HAL_InitTick+0xf0>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e42:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb0 <HAL_InitTick+0xf0>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e48:	4b19      	ldr	r3, [pc, #100]	@ (8000eb0 <HAL_InitTick+0xf0>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000e4e:	4818      	ldr	r0, [pc, #96]	@ (8000eb0 <HAL_InitTick+0xf0>)
 8000e50:	f002 f916 	bl	8003080 <HAL_TIM_Base_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000e5a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d11b      	bne.n	8000e9a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000e62:	4813      	ldr	r0, [pc, #76]	@ (8000eb0 <HAL_InitTick+0xf0>)
 8000e64:	f002 f95c 	bl	8003120 <HAL_TIM_Base_Start_IT>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000e6e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d111      	bne.n	8000e9a <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e76:	201c      	movs	r0, #28
 8000e78:	f000 fe04 	bl	8001a84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b0f      	cmp	r3, #15
 8000e80:	d808      	bhi.n	8000e94 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000e82:	2200      	movs	r2, #0
 8000e84:	6879      	ldr	r1, [r7, #4]
 8000e86:	201c      	movs	r0, #28
 8000e88:	f000 fde0 	bl	8001a4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e8c:	4a09      	ldr	r2, [pc, #36]	@ (8000eb4 <HAL_InitTick+0xf4>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6013      	str	r3, [r2, #0]
 8000e92:	e002      	b.n	8000e9a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e9a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3738      	adds	r7, #56	@ 0x38
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	431bde83 	.word	0x431bde83
 8000eb0:	200001d0 	.word	0x200001d0
 8000eb4:	20000004 	.word	0x20000004

08000eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <NMI_Handler+0x4>

08000ec0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <HardFault_Handler+0x4>

08000ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <MemManage_Handler+0x4>

08000ed0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <BusFault_Handler+0x4>

08000ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <UsageFault_Handler+0x4>

08000ee0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f1c:	4802      	ldr	r0, [pc, #8]	@ (8000f28 <TIM2_IRQHandler+0x10>)
 8000f1e:	f002 f96f 	bl	8003200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	200001d0 	.word	0x200001d0

08000f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f34:	4a14      	ldr	r2, [pc, #80]	@ (8000f88 <_sbrk+0x5c>)
 8000f36:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <_sbrk+0x60>)
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f40:	4b13      	ldr	r3, [pc, #76]	@ (8000f90 <_sbrk+0x64>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d102      	bne.n	8000f4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f48:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <_sbrk+0x64>)
 8000f4a:	4a12      	ldr	r2, [pc, #72]	@ (8000f94 <_sbrk+0x68>)
 8000f4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f4e:	4b10      	ldr	r3, [pc, #64]	@ (8000f90 <_sbrk+0x64>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d207      	bcs.n	8000f6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f5c:	f002 fbda 	bl	8003714 <__errno>
 8000f60:	4603      	mov	r3, r0
 8000f62:	220c      	movs	r2, #12
 8000f64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6a:	e009      	b.n	8000f80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f6c:	4b08      	ldr	r3, [pc, #32]	@ (8000f90 <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f72:	4b07      	ldr	r3, [pc, #28]	@ (8000f90 <_sbrk+0x64>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	4a05      	ldr	r2, [pc, #20]	@ (8000f90 <_sbrk+0x64>)
 8000f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20020000 	.word	0x20020000
 8000f8c:	00000400 	.word	0x00000400
 8000f90:	20000218 	.word	0x20000218
 8000f94:	20000368 	.word	0x20000368

08000f98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f9c:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <SystemInit+0x20>)
 8000f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fa2:	4a05      	ldr	r2, [pc, #20]	@ (8000fb8 <SystemInit+0x20>)
 8000fa4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fa8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ff4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fc0:	f7ff ffea 	bl	8000f98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fc4:	480c      	ldr	r0, [pc, #48]	@ (8000ff8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fc6:	490d      	ldr	r1, [pc, #52]	@ (8000ffc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001000 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fcc:	e002      	b.n	8000fd4 <LoopCopyDataInit>

08000fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd2:	3304      	adds	r3, #4

08000fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd8:	d3f9      	bcc.n	8000fce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fda:	4a0a      	ldr	r2, [pc, #40]	@ (8001004 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fdc:	4c0a      	ldr	r4, [pc, #40]	@ (8001008 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe0:	e001      	b.n	8000fe6 <LoopFillZerobss>

08000fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe4:	3204      	adds	r2, #4

08000fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe8:	d3fb      	bcc.n	8000fe2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fea:	f002 fb99 	bl	8003720 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fee:	f7ff fbbd 	bl	800076c <main>
  bx  lr    
 8000ff2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ff4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ffc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001000:	08004090 	.word	0x08004090
  ldr r2, =_sbss
 8001004:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001008:	20000368 	.word	0x20000368

0800100c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC_IRQHandler>
	...

08001010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001014:	4b0e      	ldr	r3, [pc, #56]	@ (8001050 <HAL_Init+0x40>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0d      	ldr	r2, [pc, #52]	@ (8001050 <HAL_Init+0x40>)
 800101a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800101e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001020:	4b0b      	ldr	r3, [pc, #44]	@ (8001050 <HAL_Init+0x40>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a0a      	ldr	r2, [pc, #40]	@ (8001050 <HAL_Init+0x40>)
 8001026:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800102a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800102c:	4b08      	ldr	r3, [pc, #32]	@ (8001050 <HAL_Init+0x40>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a07      	ldr	r2, [pc, #28]	@ (8001050 <HAL_Init+0x40>)
 8001032:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001036:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001038:	2003      	movs	r0, #3
 800103a:	f000 fcfc 	bl	8001a36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800103e:	2000      	movs	r0, #0
 8001040:	f7ff febe 	bl	8000dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001044:	f7ff fdb6 	bl	8000bb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023c00 	.word	0x40023c00

08001054 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001058:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <HAL_IncTick+0x20>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <HAL_IncTick+0x24>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4413      	add	r3, r2
 8001064:	4a04      	ldr	r2, [pc, #16]	@ (8001078 <HAL_IncTick+0x24>)
 8001066:	6013      	str	r3, [r2, #0]
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000008 	.word	0x20000008
 8001078:	2000021c 	.word	0x2000021c

0800107c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return uwTick;
 8001080:	4b03      	ldr	r3, [pc, #12]	@ (8001090 <HAL_GetTick+0x14>)
 8001082:	681b      	ldr	r3, [r3, #0]
}
 8001084:	4618      	mov	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	2000021c 	.word	0x2000021c

08001094 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800109c:	f7ff ffee 	bl	800107c <HAL_GetTick>
 80010a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ac:	d005      	beq.n	80010ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ae:	4b0a      	ldr	r3, [pc, #40]	@ (80010d8 <HAL_Delay+0x44>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4413      	add	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ba:	bf00      	nop
 80010bc:	f7ff ffde 	bl	800107c <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d8f7      	bhi.n	80010bc <HAL_Delay+0x28>
  {
  }
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000008 	.word	0x20000008

080010dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010e4:	2300      	movs	r3, #0
 80010e6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e033      	b.n	800115a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d109      	bne.n	800110e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff fd82 	bl	8000c04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001112:	f003 0310 	and.w	r3, r3, #16
 8001116:	2b00      	cmp	r3, #0
 8001118:	d118      	bne.n	800114c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001122:	f023 0302 	bic.w	r3, r3, #2
 8001126:	f043 0202 	orr.w	r2, r3, #2
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f000 fad8 	bl	80016e4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113e:	f023 0303 	bic.w	r3, r3, #3
 8001142:	f043 0201 	orr.w	r2, r3, #1
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	641a      	str	r2, [r3, #64]	@ 0x40
 800114a:	e001      	b.n	8001150 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001158:	7bfb      	ldrb	r3, [r7, #15]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800116c:	2300      	movs	r3, #0
 800116e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001176:	2b01      	cmp	r3, #1
 8001178:	d101      	bne.n	800117e <HAL_ADC_Start+0x1a>
 800117a:	2302      	movs	r3, #2
 800117c:	e0b2      	b.n	80012e4 <HAL_ADC_Start+0x180>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2201      	movs	r2, #1
 8001182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	2b01      	cmp	r3, #1
 8001192:	d018      	beq.n	80011c6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	689a      	ldr	r2, [r3, #8]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f042 0201 	orr.w	r2, r2, #1
 80011a2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011a4:	4b52      	ldr	r3, [pc, #328]	@ (80012f0 <HAL_ADC_Start+0x18c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a52      	ldr	r2, [pc, #328]	@ (80012f4 <HAL_ADC_Start+0x190>)
 80011aa:	fba2 2303 	umull	r2, r3, r2, r3
 80011ae:	0c9a      	lsrs	r2, r3, #18
 80011b0:	4613      	mov	r3, r2
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	4413      	add	r3, r2
 80011b6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80011b8:	e002      	b.n	80011c0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	3b01      	subs	r3, #1
 80011be:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1f9      	bne.n	80011ba <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d17a      	bne.n	80012ca <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80011dc:	f023 0301 	bic.w	r3, r3, #1
 80011e0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d007      	beq.n	8001206 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80011fe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800120e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001212:	d106      	bne.n	8001222 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001218:	f023 0206 	bic.w	r2, r3, #6
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001220:	e002      	b.n	8001228 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001230:	4b31      	ldr	r3, [pc, #196]	@ (80012f8 <HAL_ADC_Start+0x194>)
 8001232:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800123c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 031f 	and.w	r3, r3, #31
 8001246:	2b00      	cmp	r3, #0
 8001248:	d12a      	bne.n	80012a0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a2b      	ldr	r2, [pc, #172]	@ (80012fc <HAL_ADC_Start+0x198>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d015      	beq.n	8001280 <HAL_ADC_Start+0x11c>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a29      	ldr	r2, [pc, #164]	@ (8001300 <HAL_ADC_Start+0x19c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d105      	bne.n	800126a <HAL_ADC_Start+0x106>
 800125e:	4b26      	ldr	r3, [pc, #152]	@ (80012f8 <HAL_ADC_Start+0x194>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 031f 	and.w	r3, r3, #31
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00a      	beq.n	8001280 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a25      	ldr	r2, [pc, #148]	@ (8001304 <HAL_ADC_Start+0x1a0>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d136      	bne.n	80012e2 <HAL_ADC_Start+0x17e>
 8001274:	4b20      	ldr	r3, [pc, #128]	@ (80012f8 <HAL_ADC_Start+0x194>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0310 	and.w	r3, r3, #16
 800127c:	2b00      	cmp	r3, #0
 800127e:	d130      	bne.n	80012e2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d129      	bne.n	80012e2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	e020      	b.n	80012e2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a15      	ldr	r2, [pc, #84]	@ (80012fc <HAL_ADC_Start+0x198>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d11b      	bne.n	80012e2 <HAL_ADC_Start+0x17e>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d114      	bne.n	80012e2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	689a      	ldr	r2, [r3, #8]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	e00b      	b.n	80012e2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ce:	f043 0210 	orr.w	r2, r3, #16
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012da:	f043 0201 	orr.w	r2, r3, #1
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	20000000 	.word	0x20000000
 80012f4:	431bde83 	.word	0x431bde83
 80012f8:	40012300 	.word	0x40012300
 80012fc:	40012000 	.word	0x40012000
 8001300:	40012100 	.word	0x40012100
 8001304:	40012200 	.word	0x40012200

08001308 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001316:	2b01      	cmp	r3, #1
 8001318:	d101      	bne.n	800131e <HAL_ADC_Stop+0x16>
 800131a:	2302      	movs	r3, #2
 800131c:	e021      	b.n	8001362 <HAL_ADC_Stop+0x5a>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	689a      	ldr	r2, [r3, #8]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 0201 	bic.w	r2, r2, #1
 8001334:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b00      	cmp	r3, #0
 8001342:	d109      	bne.n	8001358 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001348:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800134c:	f023 0301 	bic.w	r3, r3, #1
 8001350:	f043 0201 	orr.w	r2, r3, #1
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b084      	sub	sp, #16
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001386:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800138a:	d113      	bne.n	80013b4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001396:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800139a:	d10b      	bne.n	80013b4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a0:	f043 0220 	orr.w	r2, r3, #32
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e063      	b.n	800147c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80013b4:	f7ff fe62 	bl	800107c <HAL_GetTick>
 80013b8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013ba:	e021      	b.n	8001400 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c2:	d01d      	beq.n	8001400 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d007      	beq.n	80013da <HAL_ADC_PollForConversion+0x6c>
 80013ca:	f7ff fe57 	bl	800107c <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d212      	bcs.n	8001400 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d00b      	beq.n	8001400 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ec:	f043 0204 	orr.w	r2, r3, #4
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e03d      	b.n	800147c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b02      	cmp	r3, #2
 800140c:	d1d6      	bne.n	80013bc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f06f 0212 	mvn.w	r2, #18
 8001416:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d123      	bne.n	800147a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001436:	2b00      	cmp	r3, #0
 8001438:	d11f      	bne.n	800147a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001440:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001444:	2b00      	cmp	r3, #0
 8001446:	d006      	beq.n	8001456 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001452:	2b00      	cmp	r3, #0
 8001454:	d111      	bne.n	800147a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001466:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d105      	bne.n	800147a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001472:	f043 0201 	orr.w	r2, r3, #1
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001492:	4618      	mov	r0, r3
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d101      	bne.n	80014bc <HAL_ADC_ConfigChannel+0x1c>
 80014b8:	2302      	movs	r3, #2
 80014ba:	e105      	b.n	80016c8 <HAL_ADC_ConfigChannel+0x228>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b09      	cmp	r3, #9
 80014ca:	d925      	bls.n	8001518 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68d9      	ldr	r1, [r3, #12]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	461a      	mov	r2, r3
 80014da:	4613      	mov	r3, r2
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4413      	add	r3, r2
 80014e0:	3b1e      	subs	r3, #30
 80014e2:	2207      	movs	r2, #7
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43da      	mvns	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	400a      	ands	r2, r1
 80014f0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	68d9      	ldr	r1, [r3, #12]
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	b29b      	uxth	r3, r3
 8001502:	4618      	mov	r0, r3
 8001504:	4603      	mov	r3, r0
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	4403      	add	r3, r0
 800150a:	3b1e      	subs	r3, #30
 800150c:	409a      	lsls	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	430a      	orrs	r2, r1
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	e022      	b.n	800155e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6919      	ldr	r1, [r3, #16]
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	b29b      	uxth	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	4613      	mov	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	2207      	movs	r2, #7
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43da      	mvns	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	400a      	ands	r2, r1
 800153a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6919      	ldr	r1, [r3, #16]
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	689a      	ldr	r2, [r3, #8]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	b29b      	uxth	r3, r3
 800154c:	4618      	mov	r0, r3
 800154e:	4603      	mov	r3, r0
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	4403      	add	r3, r0
 8001554:	409a      	lsls	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b06      	cmp	r3, #6
 8001564:	d824      	bhi.n	80015b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	3b05      	subs	r3, #5
 8001578:	221f      	movs	r2, #31
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43da      	mvns	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	400a      	ands	r2, r1
 8001586:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	b29b      	uxth	r3, r3
 8001594:	4618      	mov	r0, r3
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	4613      	mov	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	3b05      	subs	r3, #5
 80015a2:	fa00 f203 	lsl.w	r2, r0, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80015ae:	e04c      	b.n	800164a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b0c      	cmp	r3, #12
 80015b6:	d824      	bhi.n	8001602 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	3b23      	subs	r3, #35	@ 0x23
 80015ca:	221f      	movs	r2, #31
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43da      	mvns	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	400a      	ands	r2, r1
 80015d8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	4618      	mov	r0, r3
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	3b23      	subs	r3, #35	@ 0x23
 80015f4:	fa00 f203 	lsl.w	r2, r0, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8001600:	e023      	b.n	800164a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	3b41      	subs	r3, #65	@ 0x41
 8001614:	221f      	movs	r2, #31
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43da      	mvns	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	400a      	ands	r2, r1
 8001622:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	b29b      	uxth	r3, r3
 8001630:	4618      	mov	r0, r3
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	3b41      	subs	r3, #65	@ 0x41
 800163e:	fa00 f203 	lsl.w	r2, r0, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	430a      	orrs	r2, r1
 8001648:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800164a:	4b22      	ldr	r3, [pc, #136]	@ (80016d4 <HAL_ADC_ConfigChannel+0x234>)
 800164c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a21      	ldr	r2, [pc, #132]	@ (80016d8 <HAL_ADC_ConfigChannel+0x238>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d109      	bne.n	800166c <HAL_ADC_ConfigChannel+0x1cc>
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b12      	cmp	r3, #18
 800165e:	d105      	bne.n	800166c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a19      	ldr	r2, [pc, #100]	@ (80016d8 <HAL_ADC_ConfigChannel+0x238>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d123      	bne.n	80016be <HAL_ADC_ConfigChannel+0x21e>
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2b10      	cmp	r3, #16
 800167c:	d003      	beq.n	8001686 <HAL_ADC_ConfigChannel+0x1e6>
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2b11      	cmp	r3, #17
 8001684:	d11b      	bne.n	80016be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2b10      	cmp	r3, #16
 8001698:	d111      	bne.n	80016be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800169a:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <HAL_ADC_ConfigChannel+0x23c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a10      	ldr	r2, [pc, #64]	@ (80016e0 <HAL_ADC_ConfigChannel+0x240>)
 80016a0:	fba2 2303 	umull	r2, r3, r2, r3
 80016a4:	0c9a      	lsrs	r2, r3, #18
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80016b0:	e002      	b.n	80016b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	3b01      	subs	r3, #1
 80016b6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f9      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	40012300 	.word	0x40012300
 80016d8:	40012000 	.word	0x40012000
 80016dc:	20000000 	.word	0x20000000
 80016e0:	431bde83 	.word	0x431bde83

080016e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016ec:	4b79      	ldr	r3, [pc, #484]	@ (80018d4 <ADC_Init+0x1f0>)
 80016ee:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	431a      	orrs	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001718:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6859      	ldr	r1, [r3, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	021a      	lsls	r2, r3, #8
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800173c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6859      	ldr	r1, [r3, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800175e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6899      	ldr	r1, [r3, #8]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68da      	ldr	r2, [r3, #12]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001776:	4a58      	ldr	r2, [pc, #352]	@ (80018d8 <ADC_Init+0x1f4>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d022      	beq.n	80017c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800178a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6899      	ldr	r1, [r3, #8]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	430a      	orrs	r2, r1
 800179c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6899      	ldr	r1, [r3, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	e00f      	b.n	80017e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80017d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017e0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 0202 	bic.w	r2, r2, #2
 80017f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6899      	ldr	r1, [r3, #8]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	7e1b      	ldrb	r3, [r3, #24]
 80017fc:	005a      	lsls	r2, r3, #1
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	430a      	orrs	r2, r1
 8001804:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 3020 	ldrb.w	r3, [r3, #32]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d01b      	beq.n	8001848 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800181e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800182e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6859      	ldr	r1, [r3, #4]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800183a:	3b01      	subs	r3, #1
 800183c:	035a      	lsls	r2, r3, #13
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	430a      	orrs	r2, r1
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	e007      	b.n	8001858 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001856:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001866:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	3b01      	subs	r3, #1
 8001874:	051a      	lsls	r2, r3, #20
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800188c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6899      	ldr	r1, [r3, #8]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800189a:	025a      	lsls	r2, r3, #9
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6899      	ldr	r1, [r3, #8]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	029a      	lsls	r2, r3, #10
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	609a      	str	r2, [r3, #8]
}
 80018c8:	bf00      	nop
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	40012300 	.word	0x40012300
 80018d8:	0f000001 	.word	0x0f000001

080018dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001920 <__NVIC_SetPriorityGrouping+0x44>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018f8:	4013      	ands	r3, r2
 80018fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001904:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001908:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800190c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800190e:	4a04      	ldr	r2, [pc, #16]	@ (8001920 <__NVIC_SetPriorityGrouping+0x44>)
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	60d3      	str	r3, [r2, #12]
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001928:	4b04      	ldr	r3, [pc, #16]	@ (800193c <__NVIC_GetPriorityGrouping+0x18>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	0a1b      	lsrs	r3, r3, #8
 800192e:	f003 0307 	and.w	r3, r3, #7
}
 8001932:	4618      	mov	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	2b00      	cmp	r3, #0
 8001950:	db0b      	blt.n	800196a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	f003 021f 	and.w	r2, r3, #31
 8001958:	4907      	ldr	r1, [pc, #28]	@ (8001978 <__NVIC_EnableIRQ+0x38>)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	095b      	lsrs	r3, r3, #5
 8001960:	2001      	movs	r0, #1
 8001962:	fa00 f202 	lsl.w	r2, r0, r2
 8001966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000e100 	.word	0xe000e100

0800197c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	6039      	str	r1, [r7, #0]
 8001986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	2b00      	cmp	r3, #0
 800198e:	db0a      	blt.n	80019a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	b2da      	uxtb	r2, r3
 8001994:	490c      	ldr	r1, [pc, #48]	@ (80019c8 <__NVIC_SetPriority+0x4c>)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	0112      	lsls	r2, r2, #4
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	440b      	add	r3, r1
 80019a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a4:	e00a      	b.n	80019bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	4908      	ldr	r1, [pc, #32]	@ (80019cc <__NVIC_SetPriority+0x50>)
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	3b04      	subs	r3, #4
 80019b4:	0112      	lsls	r2, r2, #4
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	440b      	add	r3, r1
 80019ba:	761a      	strb	r2, [r3, #24]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000e100 	.word	0xe000e100
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b089      	sub	sp, #36	@ 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f1c3 0307 	rsb	r3, r3, #7
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	bf28      	it	cs
 80019ee:	2304      	movcs	r3, #4
 80019f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3304      	adds	r3, #4
 80019f6:	2b06      	cmp	r3, #6
 80019f8:	d902      	bls.n	8001a00 <NVIC_EncodePriority+0x30>
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3b03      	subs	r3, #3
 80019fe:	e000      	b.n	8001a02 <NVIC_EncodePriority+0x32>
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	f04f 32ff 	mov.w	r2, #4294967295
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	401a      	ands	r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a18:	f04f 31ff 	mov.w	r1, #4294967295
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a22:	43d9      	mvns	r1, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	4313      	orrs	r3, r2
         );
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3724      	adds	r7, #36	@ 0x24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff ff4c 	bl	80018dc <__NVIC_SetPriorityGrouping>
}
 8001a44:	bf00      	nop
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
 8001a58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a5e:	f7ff ff61 	bl	8001924 <__NVIC_GetPriorityGrouping>
 8001a62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	68b9      	ldr	r1, [r7, #8]
 8001a68:	6978      	ldr	r0, [r7, #20]
 8001a6a:	f7ff ffb1 	bl	80019d0 <NVIC_EncodePriority>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a74:	4611      	mov	r1, r2
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff ff80 	bl	800197c <__NVIC_SetPriority>
}
 8001a7c:	bf00      	nop
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff ff54 	bl	8001940 <__NVIC_EnableIRQ>
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b089      	sub	sp, #36	@ 0x24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
 8001aba:	e16b      	b.n	8001d94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001abc:	2201      	movs	r2, #1
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	4013      	ands	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	f040 815a 	bne.w	8001d8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d005      	beq.n	8001af2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d130      	bne.n	8001b54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	2203      	movs	r2, #3
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	68da      	ldr	r2, [r3, #12]
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b28:	2201      	movs	r2, #1
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	091b      	lsrs	r3, r3, #4
 8001b3e:	f003 0201 	and.w	r2, r3, #1
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0303 	and.w	r3, r3, #3
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d017      	beq.n	8001b90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d123      	bne.n	8001be4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	08da      	lsrs	r2, r3, #3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3208      	adds	r2, #8
 8001ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	220f      	movs	r2, #15
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	691a      	ldr	r2, [r3, #16]
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	08da      	lsrs	r2, r3, #3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3208      	adds	r2, #8
 8001bde:	69b9      	ldr	r1, [r7, #24]
 8001be0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	2203      	movs	r2, #3
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 0203 	and.w	r2, r3, #3
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 80b4 	beq.w	8001d8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	4b60      	ldr	r3, [pc, #384]	@ (8001dac <HAL_GPIO_Init+0x30c>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2e:	4a5f      	ldr	r2, [pc, #380]	@ (8001dac <HAL_GPIO_Init+0x30c>)
 8001c30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c36:	4b5d      	ldr	r3, [pc, #372]	@ (8001dac <HAL_GPIO_Init+0x30c>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c42:	4a5b      	ldr	r2, [pc, #364]	@ (8001db0 <HAL_GPIO_Init+0x310>)
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	089b      	lsrs	r3, r3, #2
 8001c48:	3302      	adds	r3, #2
 8001c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	220f      	movs	r2, #15
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4013      	ands	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a52      	ldr	r2, [pc, #328]	@ (8001db4 <HAL_GPIO_Init+0x314>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d02b      	beq.n	8001cc6 <HAL_GPIO_Init+0x226>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a51      	ldr	r2, [pc, #324]	@ (8001db8 <HAL_GPIO_Init+0x318>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d025      	beq.n	8001cc2 <HAL_GPIO_Init+0x222>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a50      	ldr	r2, [pc, #320]	@ (8001dbc <HAL_GPIO_Init+0x31c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d01f      	beq.n	8001cbe <HAL_GPIO_Init+0x21e>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a4f      	ldr	r2, [pc, #316]	@ (8001dc0 <HAL_GPIO_Init+0x320>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d019      	beq.n	8001cba <HAL_GPIO_Init+0x21a>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a4e      	ldr	r2, [pc, #312]	@ (8001dc4 <HAL_GPIO_Init+0x324>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d013      	beq.n	8001cb6 <HAL_GPIO_Init+0x216>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a4d      	ldr	r2, [pc, #308]	@ (8001dc8 <HAL_GPIO_Init+0x328>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d00d      	beq.n	8001cb2 <HAL_GPIO_Init+0x212>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a4c      	ldr	r2, [pc, #304]	@ (8001dcc <HAL_GPIO_Init+0x32c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d007      	beq.n	8001cae <HAL_GPIO_Init+0x20e>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a4b      	ldr	r2, [pc, #300]	@ (8001dd0 <HAL_GPIO_Init+0x330>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d101      	bne.n	8001caa <HAL_GPIO_Init+0x20a>
 8001ca6:	2307      	movs	r3, #7
 8001ca8:	e00e      	b.n	8001cc8 <HAL_GPIO_Init+0x228>
 8001caa:	2308      	movs	r3, #8
 8001cac:	e00c      	b.n	8001cc8 <HAL_GPIO_Init+0x228>
 8001cae:	2306      	movs	r3, #6
 8001cb0:	e00a      	b.n	8001cc8 <HAL_GPIO_Init+0x228>
 8001cb2:	2305      	movs	r3, #5
 8001cb4:	e008      	b.n	8001cc8 <HAL_GPIO_Init+0x228>
 8001cb6:	2304      	movs	r3, #4
 8001cb8:	e006      	b.n	8001cc8 <HAL_GPIO_Init+0x228>
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e004      	b.n	8001cc8 <HAL_GPIO_Init+0x228>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e002      	b.n	8001cc8 <HAL_GPIO_Init+0x228>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <HAL_GPIO_Init+0x228>
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	69fa      	ldr	r2, [r7, #28]
 8001cca:	f002 0203 	and.w	r2, r2, #3
 8001cce:	0092      	lsls	r2, r2, #2
 8001cd0:	4093      	lsls	r3, r2
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cd8:	4935      	ldr	r1, [pc, #212]	@ (8001db0 <HAL_GPIO_Init+0x310>)
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	089b      	lsrs	r3, r3, #2
 8001cde:	3302      	adds	r3, #2
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ce6:	4b3b      	ldr	r3, [pc, #236]	@ (8001dd4 <HAL_GPIO_Init+0x334>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d0a:	4a32      	ldr	r2, [pc, #200]	@ (8001dd4 <HAL_GPIO_Init+0x334>)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d10:	4b30      	ldr	r3, [pc, #192]	@ (8001dd4 <HAL_GPIO_Init+0x334>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d34:	4a27      	ldr	r2, [pc, #156]	@ (8001dd4 <HAL_GPIO_Init+0x334>)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d3a:	4b26      	ldr	r3, [pc, #152]	@ (8001dd4 <HAL_GPIO_Init+0x334>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d5e:	4a1d      	ldr	r2, [pc, #116]	@ (8001dd4 <HAL_GPIO_Init+0x334>)
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d64:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd4 <HAL_GPIO_Init+0x334>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d88:	4a12      	ldr	r2, [pc, #72]	@ (8001dd4 <HAL_GPIO_Init+0x334>)
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3301      	adds	r3, #1
 8001d92:	61fb      	str	r3, [r7, #28]
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	2b0f      	cmp	r3, #15
 8001d98:	f67f ae90 	bls.w	8001abc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	bf00      	nop
 8001da0:	3724      	adds	r7, #36	@ 0x24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40013800 	.word	0x40013800
 8001db4:	40020000 	.word	0x40020000
 8001db8:	40020400 	.word	0x40020400
 8001dbc:	40020800 	.word	0x40020800
 8001dc0:	40020c00 	.word	0x40020c00
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	40021400 	.word	0x40021400
 8001dcc:	40021800 	.word	0x40021800
 8001dd0:	40021c00 	.word	0x40021c00
 8001dd4:	40013c00 	.word	0x40013c00

08001dd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e12b      	b.n	8002042 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d106      	bne.n	8001e04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7fe ff74 	bl	8000cec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2224      	movs	r2, #36	@ 0x24
 8001e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0201 	bic.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e3c:	f001 f8da 	bl	8002ff4 <HAL_RCC_GetPCLK1Freq>
 8001e40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	4a81      	ldr	r2, [pc, #516]	@ (800204c <HAL_I2C_Init+0x274>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d807      	bhi.n	8001e5c <HAL_I2C_Init+0x84>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4a80      	ldr	r2, [pc, #512]	@ (8002050 <HAL_I2C_Init+0x278>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	bf94      	ite	ls
 8001e54:	2301      	movls	r3, #1
 8001e56:	2300      	movhi	r3, #0
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	e006      	b.n	8001e6a <HAL_I2C_Init+0x92>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4a7d      	ldr	r2, [pc, #500]	@ (8002054 <HAL_I2C_Init+0x27c>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	bf94      	ite	ls
 8001e64:	2301      	movls	r3, #1
 8001e66:	2300      	movhi	r3, #0
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e0e7      	b.n	8002042 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4a78      	ldr	r2, [pc, #480]	@ (8002058 <HAL_I2C_Init+0x280>)
 8001e76:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7a:	0c9b      	lsrs	r3, r3, #18
 8001e7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68ba      	ldr	r2, [r7, #8]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	4a6a      	ldr	r2, [pc, #424]	@ (800204c <HAL_I2C_Init+0x274>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d802      	bhi.n	8001eac <HAL_I2C_Init+0xd4>
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	e009      	b.n	8001ec0 <HAL_I2C_Init+0xe8>
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001eb2:	fb02 f303 	mul.w	r3, r2, r3
 8001eb6:	4a69      	ldr	r2, [pc, #420]	@ (800205c <HAL_I2C_Init+0x284>)
 8001eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebc:	099b      	lsrs	r3, r3, #6
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	430b      	orrs	r3, r1
 8001ec6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001ed2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	495c      	ldr	r1, [pc, #368]	@ (800204c <HAL_I2C_Init+0x274>)
 8001edc:	428b      	cmp	r3, r1
 8001ede:	d819      	bhi.n	8001f14 <HAL_I2C_Init+0x13c>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	1e59      	subs	r1, r3, #1
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eee:	1c59      	adds	r1, r3, #1
 8001ef0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001ef4:	400b      	ands	r3, r1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00a      	beq.n	8001f10 <HAL_I2C_Init+0x138>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	1e59      	subs	r1, r3, #1
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f08:	3301      	adds	r3, #1
 8001f0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f0e:	e051      	b.n	8001fb4 <HAL_I2C_Init+0x1dc>
 8001f10:	2304      	movs	r3, #4
 8001f12:	e04f      	b.n	8001fb4 <HAL_I2C_Init+0x1dc>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d111      	bne.n	8001f40 <HAL_I2C_Init+0x168>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	1e58      	subs	r0, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6859      	ldr	r1, [r3, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	440b      	add	r3, r1
 8001f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f2e:	3301      	adds	r3, #1
 8001f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	bf0c      	ite	eq
 8001f38:	2301      	moveq	r3, #1
 8001f3a:	2300      	movne	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	e012      	b.n	8001f66 <HAL_I2C_Init+0x18e>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	1e58      	subs	r0, r3, #1
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6859      	ldr	r1, [r3, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	0099      	lsls	r1, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f56:	3301      	adds	r3, #1
 8001f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	bf0c      	ite	eq
 8001f60:	2301      	moveq	r3, #1
 8001f62:	2300      	movne	r3, #0
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_I2C_Init+0x196>
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e022      	b.n	8001fb4 <HAL_I2C_Init+0x1dc>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10e      	bne.n	8001f94 <HAL_I2C_Init+0x1bc>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	1e58      	subs	r0, r3, #1
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6859      	ldr	r1, [r3, #4]
 8001f7e:	460b      	mov	r3, r1
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	440b      	add	r3, r1
 8001f84:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f88:	3301      	adds	r3, #1
 8001f8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f92:	e00f      	b.n	8001fb4 <HAL_I2C_Init+0x1dc>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	1e58      	subs	r0, r3, #1
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6859      	ldr	r1, [r3, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	0099      	lsls	r1, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001faa:	3301      	adds	r3, #1
 8001fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	6809      	ldr	r1, [r1, #0]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69da      	ldr	r2, [r3, #28]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001fe2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6911      	ldr	r1, [r2, #16]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	68d2      	ldr	r2, [r2, #12]
 8001fee:	4311      	orrs	r1, r2
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	430b      	orrs	r3, r1
 8001ff6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	695a      	ldr	r2, [r3, #20]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	431a      	orrs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	430a      	orrs	r2, r1
 8002012:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0201 	orr.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2220      	movs	r2, #32
 800202e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	000186a0 	.word	0x000186a0
 8002050:	001e847f 	.word	0x001e847f
 8002054:	003d08ff 	.word	0x003d08ff
 8002058:	431bde83 	.word	0x431bde83
 800205c:	10624dd3 	.word	0x10624dd3

08002060 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af02      	add	r7, sp, #8
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	607a      	str	r2, [r7, #4]
 800206a:	461a      	mov	r2, r3
 800206c:	460b      	mov	r3, r1
 800206e:	817b      	strh	r3, [r7, #10]
 8002070:	4613      	mov	r3, r2
 8002072:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002074:	f7ff f802 	bl	800107c <HAL_GetTick>
 8002078:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b20      	cmp	r3, #32
 8002084:	f040 80e0 	bne.w	8002248 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	2319      	movs	r3, #25
 800208e:	2201      	movs	r2, #1
 8002090:	4970      	ldr	r1, [pc, #448]	@ (8002254 <HAL_I2C_Master_Transmit+0x1f4>)
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 f964 	bl	8002360 <I2C_WaitOnFlagUntilTimeout>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800209e:	2302      	movs	r3, #2
 80020a0:	e0d3      	b.n	800224a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d101      	bne.n	80020b0 <HAL_I2C_Master_Transmit+0x50>
 80020ac:	2302      	movs	r3, #2
 80020ae:	e0cc      	b.n	800224a <HAL_I2C_Master_Transmit+0x1ea>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d007      	beq.n	80020d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f042 0201 	orr.w	r2, r2, #1
 80020d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2221      	movs	r2, #33	@ 0x21
 80020ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2210      	movs	r2, #16
 80020f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	893a      	ldrh	r2, [r7, #8]
 8002106:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800210c:	b29a      	uxth	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	4a50      	ldr	r2, [pc, #320]	@ (8002258 <HAL_I2C_Master_Transmit+0x1f8>)
 8002116:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002118:	8979      	ldrh	r1, [r7, #10]
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	6a3a      	ldr	r2, [r7, #32]
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 f89c 	bl	800225c <I2C_MasterRequestWrite>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e08d      	b.n	800224a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002144:	e066      	b.n	8002214 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	6a39      	ldr	r1, [r7, #32]
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f000 fa22 	bl	8002594 <I2C_WaitOnTXEFlagUntilTimeout>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00d      	beq.n	8002172 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215a:	2b04      	cmp	r3, #4
 800215c:	d107      	bne.n	800216e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800216c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e06b      	b.n	800224a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002176:	781a      	ldrb	r2, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002182:	1c5a      	adds	r2, r3, #1
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800218c:	b29b      	uxth	r3, r3
 800218e:	3b01      	subs	r3, #1
 8002190:	b29a      	uxth	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800219a:	3b01      	subs	r3, #1
 800219c:	b29a      	uxth	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d11b      	bne.n	80021e8 <HAL_I2C_Master_Transmit+0x188>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d017      	beq.n	80021e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021bc:	781a      	ldrb	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c8:	1c5a      	adds	r2, r3, #1
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	3b01      	subs	r3, #1
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021e0:	3b01      	subs	r3, #1
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	6a39      	ldr	r1, [r7, #32]
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 fa19 	bl	8002624 <I2C_WaitOnBTFFlagUntilTimeout>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00d      	beq.n	8002214 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fc:	2b04      	cmp	r3, #4
 80021fe:	d107      	bne.n	8002210 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800220e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e01a      	b.n	800224a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002218:	2b00      	cmp	r3, #0
 800221a:	d194      	bne.n	8002146 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800222a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2220      	movs	r2, #32
 8002230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002244:	2300      	movs	r3, #0
 8002246:	e000      	b.n	800224a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002248:	2302      	movs	r3, #2
  }
}
 800224a:	4618      	mov	r0, r3
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	00100002 	.word	0x00100002
 8002258:	ffff0000 	.word	0xffff0000

0800225c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af02      	add	r7, sp, #8
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	607a      	str	r2, [r7, #4]
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	460b      	mov	r3, r1
 800226a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002270:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2b08      	cmp	r3, #8
 8002276:	d006      	beq.n	8002286 <I2C_MasterRequestWrite+0x2a>
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d003      	beq.n	8002286 <I2C_MasterRequestWrite+0x2a>
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002284:	d108      	bne.n	8002298 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	e00b      	b.n	80022b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229c:	2b12      	cmp	r3, #18
 800229e:	d107      	bne.n	80022b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f000 f84f 	bl	8002360 <I2C_WaitOnFlagUntilTimeout>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00d      	beq.n	80022e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022d6:	d103      	bne.n	80022e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022de:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e035      	b.n	8002350 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80022ec:	d108      	bne.n	8002300 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022ee:	897b      	ldrh	r3, [r7, #10]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	461a      	mov	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80022fc:	611a      	str	r2, [r3, #16]
 80022fe:	e01b      	b.n	8002338 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002300:	897b      	ldrh	r3, [r7, #10]
 8002302:	11db      	asrs	r3, r3, #7
 8002304:	b2db      	uxtb	r3, r3
 8002306:	f003 0306 	and.w	r3, r3, #6
 800230a:	b2db      	uxtb	r3, r3
 800230c:	f063 030f 	orn	r3, r3, #15
 8002310:	b2da      	uxtb	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	490e      	ldr	r1, [pc, #56]	@ (8002358 <I2C_MasterRequestWrite+0xfc>)
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 f898 	bl	8002454 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e010      	b.n	8002350 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800232e:	897b      	ldrh	r3, [r7, #10]
 8002330:	b2da      	uxtb	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	4907      	ldr	r1, [pc, #28]	@ (800235c <I2C_MasterRequestWrite+0x100>)
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 f888 	bl	8002454 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	00010008 	.word	0x00010008
 800235c:	00010002 	.word	0x00010002

08002360 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	603b      	str	r3, [r7, #0]
 800236c:	4613      	mov	r3, r2
 800236e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002370:	e048      	b.n	8002404 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002378:	d044      	beq.n	8002404 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800237a:	f7fe fe7f 	bl	800107c <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d302      	bcc.n	8002390 <I2C_WaitOnFlagUntilTimeout+0x30>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d139      	bne.n	8002404 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	0c1b      	lsrs	r3, r3, #16
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b01      	cmp	r3, #1
 8002398:	d10d      	bne.n	80023b6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	43da      	mvns	r2, r3
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	4013      	ands	r3, r2
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	bf0c      	ite	eq
 80023ac:	2301      	moveq	r3, #1
 80023ae:	2300      	movne	r3, #0
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	461a      	mov	r2, r3
 80023b4:	e00c      	b.n	80023d0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	43da      	mvns	r2, r3
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	4013      	ands	r3, r2
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	bf0c      	ite	eq
 80023c8:	2301      	moveq	r3, #1
 80023ca:	2300      	movne	r3, #0
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	461a      	mov	r2, r3
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d116      	bne.n	8002404 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2220      	movs	r2, #32
 80023e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f0:	f043 0220 	orr.w	r2, r3, #32
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e023      	b.n	800244c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	0c1b      	lsrs	r3, r3, #16
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b01      	cmp	r3, #1
 800240c:	d10d      	bne.n	800242a <I2C_WaitOnFlagUntilTimeout+0xca>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	43da      	mvns	r2, r3
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	4013      	ands	r3, r2
 800241a:	b29b      	uxth	r3, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	bf0c      	ite	eq
 8002420:	2301      	moveq	r3, #1
 8002422:	2300      	movne	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	461a      	mov	r2, r3
 8002428:	e00c      	b.n	8002444 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	43da      	mvns	r2, r3
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	4013      	ands	r3, r2
 8002436:	b29b      	uxth	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	bf0c      	ite	eq
 800243c:	2301      	moveq	r3, #1
 800243e:	2300      	movne	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	461a      	mov	r2, r3
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	429a      	cmp	r2, r3
 8002448:	d093      	beq.n	8002372 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
 8002460:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002462:	e071      	b.n	8002548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800246e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002472:	d123      	bne.n	80024bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002482:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800248c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2220      	movs	r2, #32
 8002498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a8:	f043 0204 	orr.w	r2, r3, #4
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e067      	b.n	800258c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c2:	d041      	beq.n	8002548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024c4:	f7fe fdda 	bl	800107c <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d302      	bcc.n	80024da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d136      	bne.n	8002548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	0c1b      	lsrs	r3, r3, #16
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d10c      	bne.n	80024fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	43da      	mvns	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	4013      	ands	r3, r2
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	bf14      	ite	ne
 80024f6:	2301      	movne	r3, #1
 80024f8:	2300      	moveq	r3, #0
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	e00b      	b.n	8002516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	43da      	mvns	r2, r3
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	4013      	ands	r3, r2
 800250a:	b29b      	uxth	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	bf14      	ite	ne
 8002510:	2301      	movne	r3, #1
 8002512:	2300      	moveq	r3, #0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d016      	beq.n	8002548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2220      	movs	r2, #32
 8002524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002534:	f043 0220 	orr.w	r2, r3, #32
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e021      	b.n	800258c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	0c1b      	lsrs	r3, r3, #16
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b01      	cmp	r3, #1
 8002550:	d10c      	bne.n	800256c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	43da      	mvns	r2, r3
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	4013      	ands	r3, r2
 800255e:	b29b      	uxth	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	bf14      	ite	ne
 8002564:	2301      	movne	r3, #1
 8002566:	2300      	moveq	r3, #0
 8002568:	b2db      	uxtb	r3, r3
 800256a:	e00b      	b.n	8002584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	43da      	mvns	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	4013      	ands	r3, r2
 8002578:	b29b      	uxth	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	bf14      	ite	ne
 800257e:	2301      	movne	r3, #1
 8002580:	2300      	moveq	r3, #0
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	f47f af6d 	bne.w	8002464 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025a0:	e034      	b.n	800260c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 f886 	bl	80026b4 <I2C_IsAcknowledgeFailed>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e034      	b.n	800261c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b8:	d028      	beq.n	800260c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ba:	f7fe fd5f 	bl	800107c <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d302      	bcc.n	80025d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d11d      	bne.n	800260c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025da:	2b80      	cmp	r3, #128	@ 0x80
 80025dc:	d016      	beq.n	800260c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f8:	f043 0220 	orr.w	r2, r3, #32
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e007      	b.n	800261c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002616:	2b80      	cmp	r3, #128	@ 0x80
 8002618:	d1c3      	bne.n	80025a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002630:	e034      	b.n	800269c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 f83e 	bl	80026b4 <I2C_IsAcknowledgeFailed>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e034      	b.n	80026ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002648:	d028      	beq.n	800269c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800264a:	f7fe fd17 	bl	800107c <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	429a      	cmp	r2, r3
 8002658:	d302      	bcc.n	8002660 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d11d      	bne.n	800269c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	2b04      	cmp	r3, #4
 800266c:	d016      	beq.n	800269c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2220      	movs	r2, #32
 8002678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002688:	f043 0220 	orr.w	r2, r3, #32
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e007      	b.n	80026ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d1c3      	bne.n	8002632 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026ca:	d11b      	bne.n	8002704 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80026d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2220      	movs	r2, #32
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f0:	f043 0204 	orr.w	r2, r3, #4
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e000      	b.n	8002706 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
	...

08002714 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e267      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d075      	beq.n	800281e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002732:	4b88      	ldr	r3, [pc, #544]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 030c 	and.w	r3, r3, #12
 800273a:	2b04      	cmp	r3, #4
 800273c:	d00c      	beq.n	8002758 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800273e:	4b85      	ldr	r3, [pc, #532]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002746:	2b08      	cmp	r3, #8
 8002748:	d112      	bne.n	8002770 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800274a:	4b82      	ldr	r3, [pc, #520]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002752:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002756:	d10b      	bne.n	8002770 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002758:	4b7e      	ldr	r3, [pc, #504]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d05b      	beq.n	800281c <HAL_RCC_OscConfig+0x108>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d157      	bne.n	800281c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e242      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002778:	d106      	bne.n	8002788 <HAL_RCC_OscConfig+0x74>
 800277a:	4b76      	ldr	r3, [pc, #472]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a75      	ldr	r2, [pc, #468]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 8002780:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	e01d      	b.n	80027c4 <HAL_RCC_OscConfig+0xb0>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002790:	d10c      	bne.n	80027ac <HAL_RCC_OscConfig+0x98>
 8002792:	4b70      	ldr	r3, [pc, #448]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a6f      	ldr	r2, [pc, #444]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 8002798:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	4b6d      	ldr	r3, [pc, #436]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a6c      	ldr	r2, [pc, #432]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 80027a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	e00b      	b.n	80027c4 <HAL_RCC_OscConfig+0xb0>
 80027ac:	4b69      	ldr	r3, [pc, #420]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a68      	ldr	r2, [pc, #416]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 80027b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027b6:	6013      	str	r3, [r2, #0]
 80027b8:	4b66      	ldr	r3, [pc, #408]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a65      	ldr	r2, [pc, #404]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 80027be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d013      	beq.n	80027f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027cc:	f7fe fc56 	bl	800107c <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d4:	f7fe fc52 	bl	800107c <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b64      	cmp	r3, #100	@ 0x64
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e207      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e6:	4b5b      	ldr	r3, [pc, #364]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0f0      	beq.n	80027d4 <HAL_RCC_OscConfig+0xc0>
 80027f2:	e014      	b.n	800281e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f4:	f7fe fc42 	bl	800107c <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027fc:	f7fe fc3e 	bl	800107c <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b64      	cmp	r3, #100	@ 0x64
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e1f3      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800280e:	4b51      	ldr	r3, [pc, #324]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0xe8>
 800281a:	e000      	b.n	800281e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d063      	beq.n	80028f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800282a:	4b4a      	ldr	r3, [pc, #296]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 030c 	and.w	r3, r3, #12
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00b      	beq.n	800284e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002836:	4b47      	ldr	r3, [pc, #284]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800283e:	2b08      	cmp	r3, #8
 8002840:	d11c      	bne.n	800287c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002842:	4b44      	ldr	r3, [pc, #272]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d116      	bne.n	800287c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800284e:	4b41      	ldr	r3, [pc, #260]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d005      	beq.n	8002866 <HAL_RCC_OscConfig+0x152>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d001      	beq.n	8002866 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e1c7      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002866:	4b3b      	ldr	r3, [pc, #236]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	4937      	ldr	r1, [pc, #220]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 8002876:	4313      	orrs	r3, r2
 8002878:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800287a:	e03a      	b.n	80028f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d020      	beq.n	80028c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002884:	4b34      	ldr	r3, [pc, #208]	@ (8002958 <HAL_RCC_OscConfig+0x244>)
 8002886:	2201      	movs	r2, #1
 8002888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288a:	f7fe fbf7 	bl	800107c <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002890:	e008      	b.n	80028a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002892:	f7fe fbf3 	bl	800107c <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e1a8      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0f0      	beq.n	8002892 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b0:	4b28      	ldr	r3, [pc, #160]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	4925      	ldr	r1, [pc, #148]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	600b      	str	r3, [r1, #0]
 80028c4:	e015      	b.n	80028f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028c6:	4b24      	ldr	r3, [pc, #144]	@ (8002958 <HAL_RCC_OscConfig+0x244>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028cc:	f7fe fbd6 	bl	800107c <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028d4:	f7fe fbd2 	bl	800107c <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e187      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d036      	beq.n	800296c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d016      	beq.n	8002934 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002906:	4b15      	ldr	r3, [pc, #84]	@ (800295c <HAL_RCC_OscConfig+0x248>)
 8002908:	2201      	movs	r2, #1
 800290a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290c:	f7fe fbb6 	bl	800107c <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002914:	f7fe fbb2 	bl	800107c <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e167      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002926:	4b0b      	ldr	r3, [pc, #44]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 8002928:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0f0      	beq.n	8002914 <HAL_RCC_OscConfig+0x200>
 8002932:	e01b      	b.n	800296c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002934:	4b09      	ldr	r3, [pc, #36]	@ (800295c <HAL_RCC_OscConfig+0x248>)
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800293a:	f7fe fb9f 	bl	800107c <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002940:	e00e      	b.n	8002960 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002942:	f7fe fb9b 	bl	800107c <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d907      	bls.n	8002960 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e150      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
 8002954:	40023800 	.word	0x40023800
 8002958:	42470000 	.word	0x42470000
 800295c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002960:	4b88      	ldr	r3, [pc, #544]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002962:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1ea      	bne.n	8002942 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 8097 	beq.w	8002aa8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800297a:	2300      	movs	r3, #0
 800297c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800297e:	4b81      	ldr	r3, [pc, #516]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10f      	bne.n	80029aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	4b7d      	ldr	r3, [pc, #500]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002992:	4a7c      	ldr	r2, [pc, #496]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002994:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002998:	6413      	str	r3, [r2, #64]	@ 0x40
 800299a:	4b7a      	ldr	r3, [pc, #488]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029a6:	2301      	movs	r3, #1
 80029a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029aa:	4b77      	ldr	r3, [pc, #476]	@ (8002b88 <HAL_RCC_OscConfig+0x474>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d118      	bne.n	80029e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029b6:	4b74      	ldr	r3, [pc, #464]	@ (8002b88 <HAL_RCC_OscConfig+0x474>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a73      	ldr	r2, [pc, #460]	@ (8002b88 <HAL_RCC_OscConfig+0x474>)
 80029bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029c2:	f7fe fb5b 	bl	800107c <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ca:	f7fe fb57 	bl	800107c <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e10c      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029dc:	4b6a      	ldr	r3, [pc, #424]	@ (8002b88 <HAL_RCC_OscConfig+0x474>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0f0      	beq.n	80029ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d106      	bne.n	80029fe <HAL_RCC_OscConfig+0x2ea>
 80029f0:	4b64      	ldr	r3, [pc, #400]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 80029f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f4:	4a63      	ldr	r2, [pc, #396]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80029fc:	e01c      	b.n	8002a38 <HAL_RCC_OscConfig+0x324>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	2b05      	cmp	r3, #5
 8002a04:	d10c      	bne.n	8002a20 <HAL_RCC_OscConfig+0x30c>
 8002a06:	4b5f      	ldr	r3, [pc, #380]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a0a:	4a5e      	ldr	r2, [pc, #376]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a0c:	f043 0304 	orr.w	r3, r3, #4
 8002a10:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a12:	4b5c      	ldr	r3, [pc, #368]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a16:	4a5b      	ldr	r2, [pc, #364]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a1e:	e00b      	b.n	8002a38 <HAL_RCC_OscConfig+0x324>
 8002a20:	4b58      	ldr	r3, [pc, #352]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a24:	4a57      	ldr	r2, [pc, #348]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a26:	f023 0301 	bic.w	r3, r3, #1
 8002a2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a2c:	4b55      	ldr	r3, [pc, #340]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a30:	4a54      	ldr	r2, [pc, #336]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a32:	f023 0304 	bic.w	r3, r3, #4
 8002a36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d015      	beq.n	8002a6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a40:	f7fe fb1c 	bl	800107c <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a46:	e00a      	b.n	8002a5e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a48:	f7fe fb18 	bl	800107c <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e0cb      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5e:	4b49      	ldr	r3, [pc, #292]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0ee      	beq.n	8002a48 <HAL_RCC_OscConfig+0x334>
 8002a6a:	e014      	b.n	8002a96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a6c:	f7fe fb06 	bl	800107c <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a72:	e00a      	b.n	8002a8a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a74:	f7fe fb02 	bl	800107c <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e0b5      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a8a:	4b3e      	ldr	r3, [pc, #248]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1ee      	bne.n	8002a74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a96:	7dfb      	ldrb	r3, [r7, #23]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d105      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a9c:	4b39      	ldr	r3, [pc, #228]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa0:	4a38      	ldr	r2, [pc, #224]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002aa2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002aa6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 80a1 	beq.w	8002bf4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ab2:	4b34      	ldr	r3, [pc, #208]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
 8002aba:	2b08      	cmp	r3, #8
 8002abc:	d05c      	beq.n	8002b78 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d141      	bne.n	8002b4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac6:	4b31      	ldr	r3, [pc, #196]	@ (8002b8c <HAL_RCC_OscConfig+0x478>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002acc:	f7fe fad6 	bl	800107c <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad4:	f7fe fad2 	bl	800107c <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e087      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae6:	4b27      	ldr	r3, [pc, #156]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f0      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69da      	ldr	r2, [r3, #28]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b00:	019b      	lsls	r3, r3, #6
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b08:	085b      	lsrs	r3, r3, #1
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	041b      	lsls	r3, r3, #16
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b14:	061b      	lsls	r3, r3, #24
 8002b16:	491b      	ldr	r1, [pc, #108]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b8c <HAL_RCC_OscConfig+0x478>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b22:	f7fe faab 	bl	800107c <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b2a:	f7fe faa7 	bl	800107c <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e05c      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b3c:	4b11      	ldr	r3, [pc, #68]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0f0      	beq.n	8002b2a <HAL_RCC_OscConfig+0x416>
 8002b48:	e054      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4a:	4b10      	ldr	r3, [pc, #64]	@ (8002b8c <HAL_RCC_OscConfig+0x478>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b50:	f7fe fa94 	bl	800107c <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b58:	f7fe fa90 	bl	800107c <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e045      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b6a:	4b06      	ldr	r3, [pc, #24]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f0      	bne.n	8002b58 <HAL_RCC_OscConfig+0x444>
 8002b76:	e03d      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d107      	bne.n	8002b90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e038      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
 8002b84:	40023800 	.word	0x40023800
 8002b88:	40007000 	.word	0x40007000
 8002b8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b90:	4b1b      	ldr	r3, [pc, #108]	@ (8002c00 <HAL_RCC_OscConfig+0x4ec>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d028      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d121      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d11a      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d111      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd6:	085b      	lsrs	r3, r3, #1
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d107      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e000      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40023800 	.word	0x40023800

08002c04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e0cc      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c18:	4b68      	ldr	r3, [pc, #416]	@ (8002dbc <HAL_RCC_ClockConfig+0x1b8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d90c      	bls.n	8002c40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c26:	4b65      	ldr	r3, [pc, #404]	@ (8002dbc <HAL_RCC_ClockConfig+0x1b8>)
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2e:	4b63      	ldr	r3, [pc, #396]	@ (8002dbc <HAL_RCC_ClockConfig+0x1b8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d001      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e0b8      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d020      	beq.n	8002c8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c58:	4b59      	ldr	r3, [pc, #356]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	4a58      	ldr	r2, [pc, #352]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0308 	and.w	r3, r3, #8
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c70:	4b53      	ldr	r3, [pc, #332]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	4a52      	ldr	r2, [pc, #328]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c7c:	4b50      	ldr	r3, [pc, #320]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	494d      	ldr	r1, [pc, #308]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d044      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d107      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca2:	4b47      	ldr	r3, [pc, #284]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d119      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e07f      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d003      	beq.n	8002cc2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cbe:	2b03      	cmp	r3, #3
 8002cc0:	d107      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc2:	4b3f      	ldr	r3, [pc, #252]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d109      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e06f      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd2:	4b3b      	ldr	r3, [pc, #236]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e067      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ce2:	4b37      	ldr	r3, [pc, #220]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f023 0203 	bic.w	r2, r3, #3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	4934      	ldr	r1, [pc, #208]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cf4:	f7fe f9c2 	bl	800107c <HAL_GetTick>
 8002cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfa:	e00a      	b.n	8002d12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cfc:	f7fe f9be 	bl	800107c <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e04f      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d12:	4b2b      	ldr	r3, [pc, #172]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 020c 	and.w	r2, r3, #12
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d1eb      	bne.n	8002cfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d24:	4b25      	ldr	r3, [pc, #148]	@ (8002dbc <HAL_RCC_ClockConfig+0x1b8>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d20c      	bcs.n	8002d4c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d32:	4b22      	ldr	r3, [pc, #136]	@ (8002dbc <HAL_RCC_ClockConfig+0x1b8>)
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3a:	4b20      	ldr	r3, [pc, #128]	@ (8002dbc <HAL_RCC_ClockConfig+0x1b8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d001      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e032      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d008      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d58:	4b19      	ldr	r3, [pc, #100]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	4916      	ldr	r1, [pc, #88]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d009      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d76:	4b12      	ldr	r3, [pc, #72]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	490e      	ldr	r1, [pc, #56]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d8a:	f000 f821 	bl	8002dd0 <HAL_RCC_GetSysClockFreq>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	091b      	lsrs	r3, r3, #4
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	490a      	ldr	r1, [pc, #40]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d9c:	5ccb      	ldrb	r3, [r1, r3]
 8002d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002da2:	4a09      	ldr	r2, [pc, #36]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002da6:	4b09      	ldr	r3, [pc, #36]	@ (8002dcc <HAL_RCC_ClockConfig+0x1c8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fe f808 	bl	8000dc0 <HAL_InitTick>

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40023c00 	.word	0x40023c00
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	08004034 	.word	0x08004034
 8002dc8:	20000000 	.word	0x20000000
 8002dcc:	20000004 	.word	0x20000004

08002dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dd4:	b094      	sub	sp, #80	@ 0x50
 8002dd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002de8:	4b79      	ldr	r3, [pc, #484]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 030c 	and.w	r3, r3, #12
 8002df0:	2b08      	cmp	r3, #8
 8002df2:	d00d      	beq.n	8002e10 <HAL_RCC_GetSysClockFreq+0x40>
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	f200 80e1 	bhi.w	8002fbc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <HAL_RCC_GetSysClockFreq+0x34>
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	d003      	beq.n	8002e0a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e02:	e0db      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e04:	4b73      	ldr	r3, [pc, #460]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e08:	e0db      	b.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e0a:	4b73      	ldr	r3, [pc, #460]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e0e:	e0d8      	b.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e10:	4b6f      	ldr	r3, [pc, #444]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e18:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e1a:	4b6d      	ldr	r3, [pc, #436]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d063      	beq.n	8002eee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e26:	4b6a      	ldr	r3, [pc, #424]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	099b      	lsrs	r3, r3, #6
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e30:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e38:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e42:	4622      	mov	r2, r4
 8002e44:	462b      	mov	r3, r5
 8002e46:	f04f 0000 	mov.w	r0, #0
 8002e4a:	f04f 0100 	mov.w	r1, #0
 8002e4e:	0159      	lsls	r1, r3, #5
 8002e50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e54:	0150      	lsls	r0, r2, #5
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4621      	mov	r1, r4
 8002e5c:	1a51      	subs	r1, r2, r1
 8002e5e:	6139      	str	r1, [r7, #16]
 8002e60:	4629      	mov	r1, r5
 8002e62:	eb63 0301 	sbc.w	r3, r3, r1
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e74:	4659      	mov	r1, fp
 8002e76:	018b      	lsls	r3, r1, #6
 8002e78:	4651      	mov	r1, sl
 8002e7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e7e:	4651      	mov	r1, sl
 8002e80:	018a      	lsls	r2, r1, #6
 8002e82:	4651      	mov	r1, sl
 8002e84:	ebb2 0801 	subs.w	r8, r2, r1
 8002e88:	4659      	mov	r1, fp
 8002e8a:	eb63 0901 	sbc.w	r9, r3, r1
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ea2:	4690      	mov	r8, r2
 8002ea4:	4699      	mov	r9, r3
 8002ea6:	4623      	mov	r3, r4
 8002ea8:	eb18 0303 	adds.w	r3, r8, r3
 8002eac:	60bb      	str	r3, [r7, #8]
 8002eae:	462b      	mov	r3, r5
 8002eb0:	eb49 0303 	adc.w	r3, r9, r3
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	f04f 0300 	mov.w	r3, #0
 8002ebe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ec2:	4629      	mov	r1, r5
 8002ec4:	024b      	lsls	r3, r1, #9
 8002ec6:	4621      	mov	r1, r4
 8002ec8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ecc:	4621      	mov	r1, r4
 8002ece:	024a      	lsls	r2, r1, #9
 8002ed0:	4610      	mov	r0, r2
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002eda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002edc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ee0:	f7fd f9c6 	bl	8000270 <__aeabi_uldivmod>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4613      	mov	r3, r2
 8002eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002eec:	e058      	b.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eee:	4b38      	ldr	r3, [pc, #224]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	099b      	lsrs	r3, r3, #6
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	4611      	mov	r1, r2
 8002efa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002efe:	623b      	str	r3, [r7, #32]
 8002f00:	2300      	movs	r3, #0
 8002f02:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f08:	4642      	mov	r2, r8
 8002f0a:	464b      	mov	r3, r9
 8002f0c:	f04f 0000 	mov.w	r0, #0
 8002f10:	f04f 0100 	mov.w	r1, #0
 8002f14:	0159      	lsls	r1, r3, #5
 8002f16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f1a:	0150      	lsls	r0, r2, #5
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4641      	mov	r1, r8
 8002f22:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f26:	4649      	mov	r1, r9
 8002f28:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f2c:	f04f 0200 	mov.w	r2, #0
 8002f30:	f04f 0300 	mov.w	r3, #0
 8002f34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f40:	ebb2 040a 	subs.w	r4, r2, sl
 8002f44:	eb63 050b 	sbc.w	r5, r3, fp
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	f04f 0300 	mov.w	r3, #0
 8002f50:	00eb      	lsls	r3, r5, #3
 8002f52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f56:	00e2      	lsls	r2, r4, #3
 8002f58:	4614      	mov	r4, r2
 8002f5a:	461d      	mov	r5, r3
 8002f5c:	4643      	mov	r3, r8
 8002f5e:	18e3      	adds	r3, r4, r3
 8002f60:	603b      	str	r3, [r7, #0]
 8002f62:	464b      	mov	r3, r9
 8002f64:	eb45 0303 	adc.w	r3, r5, r3
 8002f68:	607b      	str	r3, [r7, #4]
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f76:	4629      	mov	r1, r5
 8002f78:	028b      	lsls	r3, r1, #10
 8002f7a:	4621      	mov	r1, r4
 8002f7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f80:	4621      	mov	r1, r4
 8002f82:	028a      	lsls	r2, r1, #10
 8002f84:	4610      	mov	r0, r2
 8002f86:	4619      	mov	r1, r3
 8002f88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	61bb      	str	r3, [r7, #24]
 8002f8e:	61fa      	str	r2, [r7, #28]
 8002f90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f94:	f7fd f96c 	bl	8000270 <__aeabi_uldivmod>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	0c1b      	lsrs	r3, r3, #16
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	3301      	adds	r3, #1
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002fb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002fb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fba:	e002      	b.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fbc:	4b05      	ldr	r3, [pc, #20]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3750      	adds	r7, #80	@ 0x50
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fce:	bf00      	nop
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	00f42400 	.word	0x00f42400
 8002fd8:	007a1200 	.word	0x007a1200

08002fdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fe0:	4b03      	ldr	r3, [pc, #12]	@ (8002ff0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	20000000 	.word	0x20000000

08002ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ff8:	f7ff fff0 	bl	8002fdc <HAL_RCC_GetHCLKFreq>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	4b05      	ldr	r3, [pc, #20]	@ (8003014 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	0a9b      	lsrs	r3, r3, #10
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	4903      	ldr	r1, [pc, #12]	@ (8003018 <HAL_RCC_GetPCLK1Freq+0x24>)
 800300a:	5ccb      	ldrb	r3, [r1, r3]
 800300c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003010:	4618      	mov	r0, r3
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40023800 	.word	0x40023800
 8003018:	08004044 	.word	0x08004044

0800301c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	220f      	movs	r2, #15
 800302a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800302c:	4b12      	ldr	r3, [pc, #72]	@ (8003078 <HAL_RCC_GetClockConfig+0x5c>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 0203 	and.w	r2, r3, #3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003038:	4b0f      	ldr	r3, [pc, #60]	@ (8003078 <HAL_RCC_GetClockConfig+0x5c>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003044:	4b0c      	ldr	r3, [pc, #48]	@ (8003078 <HAL_RCC_GetClockConfig+0x5c>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003050:	4b09      	ldr	r3, [pc, #36]	@ (8003078 <HAL_RCC_GetClockConfig+0x5c>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	08db      	lsrs	r3, r3, #3
 8003056:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800305e:	4b07      	ldr	r3, [pc, #28]	@ (800307c <HAL_RCC_GetClockConfig+0x60>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0207 	and.w	r2, r3, #7
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	601a      	str	r2, [r3, #0]
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	40023800 	.word	0x40023800
 800307c:	40023c00 	.word	0x40023c00

08003080 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e041      	b.n	8003116 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d106      	bne.n	80030ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7fd fe68 	bl	8000d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3304      	adds	r3, #4
 80030bc:	4619      	mov	r1, r3
 80030be:	4610      	mov	r0, r2
 80030c0:	f000 f9b6 	bl	8003430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b01      	cmp	r3, #1
 8003132:	d001      	beq.n	8003138 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e04e      	b.n	80031d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2202      	movs	r2, #2
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0201 	orr.w	r2, r2, #1
 800314e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a23      	ldr	r2, [pc, #140]	@ (80031e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d022      	beq.n	80031a0 <HAL_TIM_Base_Start_IT+0x80>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003162:	d01d      	beq.n	80031a0 <HAL_TIM_Base_Start_IT+0x80>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a1f      	ldr	r2, [pc, #124]	@ (80031e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d018      	beq.n	80031a0 <HAL_TIM_Base_Start_IT+0x80>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a1e      	ldr	r2, [pc, #120]	@ (80031ec <HAL_TIM_Base_Start_IT+0xcc>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d013      	beq.n	80031a0 <HAL_TIM_Base_Start_IT+0x80>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a1c      	ldr	r2, [pc, #112]	@ (80031f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d00e      	beq.n	80031a0 <HAL_TIM_Base_Start_IT+0x80>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a1b      	ldr	r2, [pc, #108]	@ (80031f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d009      	beq.n	80031a0 <HAL_TIM_Base_Start_IT+0x80>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a19      	ldr	r2, [pc, #100]	@ (80031f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d004      	beq.n	80031a0 <HAL_TIM_Base_Start_IT+0x80>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a18      	ldr	r2, [pc, #96]	@ (80031fc <HAL_TIM_Base_Start_IT+0xdc>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d111      	bne.n	80031c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2b06      	cmp	r3, #6
 80031b0:	d010      	beq.n	80031d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f042 0201 	orr.w	r2, r2, #1
 80031c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031c2:	e007      	b.n	80031d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 0201 	orr.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	40010000 	.word	0x40010000
 80031e8:	40000400 	.word	0x40000400
 80031ec:	40000800 	.word	0x40000800
 80031f0:	40000c00 	.word	0x40000c00
 80031f4:	40010400 	.word	0x40010400
 80031f8:	40014000 	.word	0x40014000
 80031fc:	40001800 	.word	0x40001800

08003200 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d020      	beq.n	8003264 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d01b      	beq.n	8003264 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f06f 0202 	mvn.w	r2, #2
 8003234:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	f003 0303 	and.w	r3, r3, #3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f8d2 	bl	80033f4 <HAL_TIM_IC_CaptureCallback>
 8003250:	e005      	b.n	800325e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f8c4 	bl	80033e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f8d5 	bl	8003408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	2b00      	cmp	r3, #0
 800326c:	d020      	beq.n	80032b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	d01b      	beq.n	80032b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f06f 0204 	mvn.w	r2, #4
 8003280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2202      	movs	r2, #2
 8003286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f8ac 	bl	80033f4 <HAL_TIM_IC_CaptureCallback>
 800329c:	e005      	b.n	80032aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f89e 	bl	80033e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 f8af 	bl	8003408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	f003 0308 	and.w	r3, r3, #8
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d020      	beq.n	80032fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f003 0308 	and.w	r3, r3, #8
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d01b      	beq.n	80032fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f06f 0208 	mvn.w	r2, #8
 80032cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2204      	movs	r2, #4
 80032d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	f003 0303 	and.w	r3, r3, #3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f886 	bl	80033f4 <HAL_TIM_IC_CaptureCallback>
 80032e8:	e005      	b.n	80032f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f878 	bl	80033e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 f889 	bl	8003408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	f003 0310 	and.w	r3, r3, #16
 8003302:	2b00      	cmp	r3, #0
 8003304:	d020      	beq.n	8003348 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	2b00      	cmp	r3, #0
 800330e:	d01b      	beq.n	8003348 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f06f 0210 	mvn.w	r2, #16
 8003318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2208      	movs	r2, #8
 800331e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f860 	bl	80033f4 <HAL_TIM_IC_CaptureCallback>
 8003334:	e005      	b.n	8003342 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f852 	bl	80033e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 f863 	bl	8003408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00c      	beq.n	800336c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b00      	cmp	r3, #0
 800335a:	d007      	beq.n	800336c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f06f 0201 	mvn.w	r2, #1
 8003364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7fd fc0e 	bl	8000b88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00c      	beq.n	8003390 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800337c:	2b00      	cmp	r3, #0
 800337e:	d007      	beq.n	8003390 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f97c 	bl	8003688 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00c      	beq.n	80033b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d007      	beq.n	80033b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80033ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 f834 	bl	800341c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f003 0320 	and.w	r3, r3, #32
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00c      	beq.n	80033d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f003 0320 	and.w	r3, r3, #32
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d007      	beq.n	80033d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f06f 0220 	mvn.w	r2, #32
 80033d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f94e 	bl	8003674 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033d8:	bf00      	nop
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a43      	ldr	r2, [pc, #268]	@ (8003550 <TIM_Base_SetConfig+0x120>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d013      	beq.n	8003470 <TIM_Base_SetConfig+0x40>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800344e:	d00f      	beq.n	8003470 <TIM_Base_SetConfig+0x40>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a40      	ldr	r2, [pc, #256]	@ (8003554 <TIM_Base_SetConfig+0x124>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d00b      	beq.n	8003470 <TIM_Base_SetConfig+0x40>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a3f      	ldr	r2, [pc, #252]	@ (8003558 <TIM_Base_SetConfig+0x128>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d007      	beq.n	8003470 <TIM_Base_SetConfig+0x40>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a3e      	ldr	r2, [pc, #248]	@ (800355c <TIM_Base_SetConfig+0x12c>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d003      	beq.n	8003470 <TIM_Base_SetConfig+0x40>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a3d      	ldr	r2, [pc, #244]	@ (8003560 <TIM_Base_SetConfig+0x130>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d108      	bne.n	8003482 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003476:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	4313      	orrs	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a32      	ldr	r2, [pc, #200]	@ (8003550 <TIM_Base_SetConfig+0x120>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d02b      	beq.n	80034e2 <TIM_Base_SetConfig+0xb2>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003490:	d027      	beq.n	80034e2 <TIM_Base_SetConfig+0xb2>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a2f      	ldr	r2, [pc, #188]	@ (8003554 <TIM_Base_SetConfig+0x124>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d023      	beq.n	80034e2 <TIM_Base_SetConfig+0xb2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a2e      	ldr	r2, [pc, #184]	@ (8003558 <TIM_Base_SetConfig+0x128>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d01f      	beq.n	80034e2 <TIM_Base_SetConfig+0xb2>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a2d      	ldr	r2, [pc, #180]	@ (800355c <TIM_Base_SetConfig+0x12c>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d01b      	beq.n	80034e2 <TIM_Base_SetConfig+0xb2>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a2c      	ldr	r2, [pc, #176]	@ (8003560 <TIM_Base_SetConfig+0x130>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d017      	beq.n	80034e2 <TIM_Base_SetConfig+0xb2>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a2b      	ldr	r2, [pc, #172]	@ (8003564 <TIM_Base_SetConfig+0x134>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d013      	beq.n	80034e2 <TIM_Base_SetConfig+0xb2>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a2a      	ldr	r2, [pc, #168]	@ (8003568 <TIM_Base_SetConfig+0x138>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d00f      	beq.n	80034e2 <TIM_Base_SetConfig+0xb2>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a29      	ldr	r2, [pc, #164]	@ (800356c <TIM_Base_SetConfig+0x13c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d00b      	beq.n	80034e2 <TIM_Base_SetConfig+0xb2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a28      	ldr	r2, [pc, #160]	@ (8003570 <TIM_Base_SetConfig+0x140>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d007      	beq.n	80034e2 <TIM_Base_SetConfig+0xb2>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a27      	ldr	r2, [pc, #156]	@ (8003574 <TIM_Base_SetConfig+0x144>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d003      	beq.n	80034e2 <TIM_Base_SetConfig+0xb2>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a26      	ldr	r2, [pc, #152]	@ (8003578 <TIM_Base_SetConfig+0x148>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d108      	bne.n	80034f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	4313      	orrs	r3, r2
 8003500:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a0e      	ldr	r2, [pc, #56]	@ (8003550 <TIM_Base_SetConfig+0x120>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d003      	beq.n	8003522 <TIM_Base_SetConfig+0xf2>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a10      	ldr	r2, [pc, #64]	@ (8003560 <TIM_Base_SetConfig+0x130>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d103      	bne.n	800352a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	691a      	ldr	r2, [r3, #16]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f043 0204 	orr.w	r2, r3, #4
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	601a      	str	r2, [r3, #0]
}
 8003542:	bf00      	nop
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	40010000 	.word	0x40010000
 8003554:	40000400 	.word	0x40000400
 8003558:	40000800 	.word	0x40000800
 800355c:	40000c00 	.word	0x40000c00
 8003560:	40010400 	.word	0x40010400
 8003564:	40014000 	.word	0x40014000
 8003568:	40014400 	.word	0x40014400
 800356c:	40014800 	.word	0x40014800
 8003570:	40001800 	.word	0x40001800
 8003574:	40001c00 	.word	0x40001c00
 8003578:	40002000 	.word	0x40002000

0800357c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800358c:	2b01      	cmp	r3, #1
 800358e:	d101      	bne.n	8003594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003590:	2302      	movs	r3, #2
 8003592:	e05a      	b.n	800364a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a21      	ldr	r2, [pc, #132]	@ (8003658 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d022      	beq.n	800361e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035e0:	d01d      	beq.n	800361e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a1d      	ldr	r2, [pc, #116]	@ (800365c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d018      	beq.n	800361e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a1b      	ldr	r2, [pc, #108]	@ (8003660 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d013      	beq.n	800361e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a1a      	ldr	r2, [pc, #104]	@ (8003664 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d00e      	beq.n	800361e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a18      	ldr	r2, [pc, #96]	@ (8003668 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d009      	beq.n	800361e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a17      	ldr	r2, [pc, #92]	@ (800366c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d004      	beq.n	800361e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a15      	ldr	r2, [pc, #84]	@ (8003670 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d10c      	bne.n	8003638 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003624:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	4313      	orrs	r3, r2
 800362e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	40010000 	.word	0x40010000
 800365c:	40000400 	.word	0x40000400
 8003660:	40000800 	.word	0x40000800
 8003664:	40000c00 	.word	0x40000c00
 8003668:	40010400 	.word	0x40010400
 800366c:	40014000 	.word	0x40014000
 8003670:	40001800 	.word	0x40001800

08003674 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <sniprintf>:
 800369c:	b40c      	push	{r2, r3}
 800369e:	b530      	push	{r4, r5, lr}
 80036a0:	4b17      	ldr	r3, [pc, #92]	@ (8003700 <sniprintf+0x64>)
 80036a2:	1e0c      	subs	r4, r1, #0
 80036a4:	681d      	ldr	r5, [r3, #0]
 80036a6:	b09d      	sub	sp, #116	@ 0x74
 80036a8:	da08      	bge.n	80036bc <sniprintf+0x20>
 80036aa:	238b      	movs	r3, #139	@ 0x8b
 80036ac:	602b      	str	r3, [r5, #0]
 80036ae:	f04f 30ff 	mov.w	r0, #4294967295
 80036b2:	b01d      	add	sp, #116	@ 0x74
 80036b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80036b8:	b002      	add	sp, #8
 80036ba:	4770      	bx	lr
 80036bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80036c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80036c4:	bf14      	ite	ne
 80036c6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80036ca:	4623      	moveq	r3, r4
 80036cc:	9304      	str	r3, [sp, #16]
 80036ce:	9307      	str	r3, [sp, #28]
 80036d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036d4:	9002      	str	r0, [sp, #8]
 80036d6:	9006      	str	r0, [sp, #24]
 80036d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80036dc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80036de:	ab21      	add	r3, sp, #132	@ 0x84
 80036e0:	a902      	add	r1, sp, #8
 80036e2:	4628      	mov	r0, r5
 80036e4:	9301      	str	r3, [sp, #4]
 80036e6:	f000 f995 	bl	8003a14 <_svfiprintf_r>
 80036ea:	1c43      	adds	r3, r0, #1
 80036ec:	bfbc      	itt	lt
 80036ee:	238b      	movlt	r3, #139	@ 0x8b
 80036f0:	602b      	strlt	r3, [r5, #0]
 80036f2:	2c00      	cmp	r4, #0
 80036f4:	d0dd      	beq.n	80036b2 <sniprintf+0x16>
 80036f6:	9b02      	ldr	r3, [sp, #8]
 80036f8:	2200      	movs	r2, #0
 80036fa:	701a      	strb	r2, [r3, #0]
 80036fc:	e7d9      	b.n	80036b2 <sniprintf+0x16>
 80036fe:	bf00      	nop
 8003700:	2000000c 	.word	0x2000000c

08003704 <memset>:
 8003704:	4402      	add	r2, r0
 8003706:	4603      	mov	r3, r0
 8003708:	4293      	cmp	r3, r2
 800370a:	d100      	bne.n	800370e <memset+0xa>
 800370c:	4770      	bx	lr
 800370e:	f803 1b01 	strb.w	r1, [r3], #1
 8003712:	e7f9      	b.n	8003708 <memset+0x4>

08003714 <__errno>:
 8003714:	4b01      	ldr	r3, [pc, #4]	@ (800371c <__errno+0x8>)
 8003716:	6818      	ldr	r0, [r3, #0]
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	2000000c 	.word	0x2000000c

08003720 <__libc_init_array>:
 8003720:	b570      	push	{r4, r5, r6, lr}
 8003722:	4d0d      	ldr	r5, [pc, #52]	@ (8003758 <__libc_init_array+0x38>)
 8003724:	4c0d      	ldr	r4, [pc, #52]	@ (800375c <__libc_init_array+0x3c>)
 8003726:	1b64      	subs	r4, r4, r5
 8003728:	10a4      	asrs	r4, r4, #2
 800372a:	2600      	movs	r6, #0
 800372c:	42a6      	cmp	r6, r4
 800372e:	d109      	bne.n	8003744 <__libc_init_array+0x24>
 8003730:	4d0b      	ldr	r5, [pc, #44]	@ (8003760 <__libc_init_array+0x40>)
 8003732:	4c0c      	ldr	r4, [pc, #48]	@ (8003764 <__libc_init_array+0x44>)
 8003734:	f000 fc66 	bl	8004004 <_init>
 8003738:	1b64      	subs	r4, r4, r5
 800373a:	10a4      	asrs	r4, r4, #2
 800373c:	2600      	movs	r6, #0
 800373e:	42a6      	cmp	r6, r4
 8003740:	d105      	bne.n	800374e <__libc_init_array+0x2e>
 8003742:	bd70      	pop	{r4, r5, r6, pc}
 8003744:	f855 3b04 	ldr.w	r3, [r5], #4
 8003748:	4798      	blx	r3
 800374a:	3601      	adds	r6, #1
 800374c:	e7ee      	b.n	800372c <__libc_init_array+0xc>
 800374e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003752:	4798      	blx	r3
 8003754:	3601      	adds	r6, #1
 8003756:	e7f2      	b.n	800373e <__libc_init_array+0x1e>
 8003758:	08004088 	.word	0x08004088
 800375c:	08004088 	.word	0x08004088
 8003760:	08004088 	.word	0x08004088
 8003764:	0800408c 	.word	0x0800408c

08003768 <__retarget_lock_acquire_recursive>:
 8003768:	4770      	bx	lr

0800376a <__retarget_lock_release_recursive>:
 800376a:	4770      	bx	lr

0800376c <_free_r>:
 800376c:	b538      	push	{r3, r4, r5, lr}
 800376e:	4605      	mov	r5, r0
 8003770:	2900      	cmp	r1, #0
 8003772:	d041      	beq.n	80037f8 <_free_r+0x8c>
 8003774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003778:	1f0c      	subs	r4, r1, #4
 800377a:	2b00      	cmp	r3, #0
 800377c:	bfb8      	it	lt
 800377e:	18e4      	addlt	r4, r4, r3
 8003780:	f000 f8e0 	bl	8003944 <__malloc_lock>
 8003784:	4a1d      	ldr	r2, [pc, #116]	@ (80037fc <_free_r+0x90>)
 8003786:	6813      	ldr	r3, [r2, #0]
 8003788:	b933      	cbnz	r3, 8003798 <_free_r+0x2c>
 800378a:	6063      	str	r3, [r4, #4]
 800378c:	6014      	str	r4, [r2, #0]
 800378e:	4628      	mov	r0, r5
 8003790:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003794:	f000 b8dc 	b.w	8003950 <__malloc_unlock>
 8003798:	42a3      	cmp	r3, r4
 800379a:	d908      	bls.n	80037ae <_free_r+0x42>
 800379c:	6820      	ldr	r0, [r4, #0]
 800379e:	1821      	adds	r1, r4, r0
 80037a0:	428b      	cmp	r3, r1
 80037a2:	bf01      	itttt	eq
 80037a4:	6819      	ldreq	r1, [r3, #0]
 80037a6:	685b      	ldreq	r3, [r3, #4]
 80037a8:	1809      	addeq	r1, r1, r0
 80037aa:	6021      	streq	r1, [r4, #0]
 80037ac:	e7ed      	b.n	800378a <_free_r+0x1e>
 80037ae:	461a      	mov	r2, r3
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	b10b      	cbz	r3, 80037b8 <_free_r+0x4c>
 80037b4:	42a3      	cmp	r3, r4
 80037b6:	d9fa      	bls.n	80037ae <_free_r+0x42>
 80037b8:	6811      	ldr	r1, [r2, #0]
 80037ba:	1850      	adds	r0, r2, r1
 80037bc:	42a0      	cmp	r0, r4
 80037be:	d10b      	bne.n	80037d8 <_free_r+0x6c>
 80037c0:	6820      	ldr	r0, [r4, #0]
 80037c2:	4401      	add	r1, r0
 80037c4:	1850      	adds	r0, r2, r1
 80037c6:	4283      	cmp	r3, r0
 80037c8:	6011      	str	r1, [r2, #0]
 80037ca:	d1e0      	bne.n	800378e <_free_r+0x22>
 80037cc:	6818      	ldr	r0, [r3, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	6053      	str	r3, [r2, #4]
 80037d2:	4408      	add	r0, r1
 80037d4:	6010      	str	r0, [r2, #0]
 80037d6:	e7da      	b.n	800378e <_free_r+0x22>
 80037d8:	d902      	bls.n	80037e0 <_free_r+0x74>
 80037da:	230c      	movs	r3, #12
 80037dc:	602b      	str	r3, [r5, #0]
 80037de:	e7d6      	b.n	800378e <_free_r+0x22>
 80037e0:	6820      	ldr	r0, [r4, #0]
 80037e2:	1821      	adds	r1, r4, r0
 80037e4:	428b      	cmp	r3, r1
 80037e6:	bf04      	itt	eq
 80037e8:	6819      	ldreq	r1, [r3, #0]
 80037ea:	685b      	ldreq	r3, [r3, #4]
 80037ec:	6063      	str	r3, [r4, #4]
 80037ee:	bf04      	itt	eq
 80037f0:	1809      	addeq	r1, r1, r0
 80037f2:	6021      	streq	r1, [r4, #0]
 80037f4:	6054      	str	r4, [r2, #4]
 80037f6:	e7ca      	b.n	800378e <_free_r+0x22>
 80037f8:	bd38      	pop	{r3, r4, r5, pc}
 80037fa:	bf00      	nop
 80037fc:	20000364 	.word	0x20000364

08003800 <sbrk_aligned>:
 8003800:	b570      	push	{r4, r5, r6, lr}
 8003802:	4e0f      	ldr	r6, [pc, #60]	@ (8003840 <sbrk_aligned+0x40>)
 8003804:	460c      	mov	r4, r1
 8003806:	6831      	ldr	r1, [r6, #0]
 8003808:	4605      	mov	r5, r0
 800380a:	b911      	cbnz	r1, 8003812 <sbrk_aligned+0x12>
 800380c:	f000 fba6 	bl	8003f5c <_sbrk_r>
 8003810:	6030      	str	r0, [r6, #0]
 8003812:	4621      	mov	r1, r4
 8003814:	4628      	mov	r0, r5
 8003816:	f000 fba1 	bl	8003f5c <_sbrk_r>
 800381a:	1c43      	adds	r3, r0, #1
 800381c:	d103      	bne.n	8003826 <sbrk_aligned+0x26>
 800381e:	f04f 34ff 	mov.w	r4, #4294967295
 8003822:	4620      	mov	r0, r4
 8003824:	bd70      	pop	{r4, r5, r6, pc}
 8003826:	1cc4      	adds	r4, r0, #3
 8003828:	f024 0403 	bic.w	r4, r4, #3
 800382c:	42a0      	cmp	r0, r4
 800382e:	d0f8      	beq.n	8003822 <sbrk_aligned+0x22>
 8003830:	1a21      	subs	r1, r4, r0
 8003832:	4628      	mov	r0, r5
 8003834:	f000 fb92 	bl	8003f5c <_sbrk_r>
 8003838:	3001      	adds	r0, #1
 800383a:	d1f2      	bne.n	8003822 <sbrk_aligned+0x22>
 800383c:	e7ef      	b.n	800381e <sbrk_aligned+0x1e>
 800383e:	bf00      	nop
 8003840:	20000360 	.word	0x20000360

08003844 <_malloc_r>:
 8003844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003848:	1ccd      	adds	r5, r1, #3
 800384a:	f025 0503 	bic.w	r5, r5, #3
 800384e:	3508      	adds	r5, #8
 8003850:	2d0c      	cmp	r5, #12
 8003852:	bf38      	it	cc
 8003854:	250c      	movcc	r5, #12
 8003856:	2d00      	cmp	r5, #0
 8003858:	4606      	mov	r6, r0
 800385a:	db01      	blt.n	8003860 <_malloc_r+0x1c>
 800385c:	42a9      	cmp	r1, r5
 800385e:	d904      	bls.n	800386a <_malloc_r+0x26>
 8003860:	230c      	movs	r3, #12
 8003862:	6033      	str	r3, [r6, #0]
 8003864:	2000      	movs	r0, #0
 8003866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800386a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003940 <_malloc_r+0xfc>
 800386e:	f000 f869 	bl	8003944 <__malloc_lock>
 8003872:	f8d8 3000 	ldr.w	r3, [r8]
 8003876:	461c      	mov	r4, r3
 8003878:	bb44      	cbnz	r4, 80038cc <_malloc_r+0x88>
 800387a:	4629      	mov	r1, r5
 800387c:	4630      	mov	r0, r6
 800387e:	f7ff ffbf 	bl	8003800 <sbrk_aligned>
 8003882:	1c43      	adds	r3, r0, #1
 8003884:	4604      	mov	r4, r0
 8003886:	d158      	bne.n	800393a <_malloc_r+0xf6>
 8003888:	f8d8 4000 	ldr.w	r4, [r8]
 800388c:	4627      	mov	r7, r4
 800388e:	2f00      	cmp	r7, #0
 8003890:	d143      	bne.n	800391a <_malloc_r+0xd6>
 8003892:	2c00      	cmp	r4, #0
 8003894:	d04b      	beq.n	800392e <_malloc_r+0xea>
 8003896:	6823      	ldr	r3, [r4, #0]
 8003898:	4639      	mov	r1, r7
 800389a:	4630      	mov	r0, r6
 800389c:	eb04 0903 	add.w	r9, r4, r3
 80038a0:	f000 fb5c 	bl	8003f5c <_sbrk_r>
 80038a4:	4581      	cmp	r9, r0
 80038a6:	d142      	bne.n	800392e <_malloc_r+0xea>
 80038a8:	6821      	ldr	r1, [r4, #0]
 80038aa:	1a6d      	subs	r5, r5, r1
 80038ac:	4629      	mov	r1, r5
 80038ae:	4630      	mov	r0, r6
 80038b0:	f7ff ffa6 	bl	8003800 <sbrk_aligned>
 80038b4:	3001      	adds	r0, #1
 80038b6:	d03a      	beq.n	800392e <_malloc_r+0xea>
 80038b8:	6823      	ldr	r3, [r4, #0]
 80038ba:	442b      	add	r3, r5
 80038bc:	6023      	str	r3, [r4, #0]
 80038be:	f8d8 3000 	ldr.w	r3, [r8]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	bb62      	cbnz	r2, 8003920 <_malloc_r+0xdc>
 80038c6:	f8c8 7000 	str.w	r7, [r8]
 80038ca:	e00f      	b.n	80038ec <_malloc_r+0xa8>
 80038cc:	6822      	ldr	r2, [r4, #0]
 80038ce:	1b52      	subs	r2, r2, r5
 80038d0:	d420      	bmi.n	8003914 <_malloc_r+0xd0>
 80038d2:	2a0b      	cmp	r2, #11
 80038d4:	d917      	bls.n	8003906 <_malloc_r+0xc2>
 80038d6:	1961      	adds	r1, r4, r5
 80038d8:	42a3      	cmp	r3, r4
 80038da:	6025      	str	r5, [r4, #0]
 80038dc:	bf18      	it	ne
 80038de:	6059      	strne	r1, [r3, #4]
 80038e0:	6863      	ldr	r3, [r4, #4]
 80038e2:	bf08      	it	eq
 80038e4:	f8c8 1000 	streq.w	r1, [r8]
 80038e8:	5162      	str	r2, [r4, r5]
 80038ea:	604b      	str	r3, [r1, #4]
 80038ec:	4630      	mov	r0, r6
 80038ee:	f000 f82f 	bl	8003950 <__malloc_unlock>
 80038f2:	f104 000b 	add.w	r0, r4, #11
 80038f6:	1d23      	adds	r3, r4, #4
 80038f8:	f020 0007 	bic.w	r0, r0, #7
 80038fc:	1ac2      	subs	r2, r0, r3
 80038fe:	bf1c      	itt	ne
 8003900:	1a1b      	subne	r3, r3, r0
 8003902:	50a3      	strne	r3, [r4, r2]
 8003904:	e7af      	b.n	8003866 <_malloc_r+0x22>
 8003906:	6862      	ldr	r2, [r4, #4]
 8003908:	42a3      	cmp	r3, r4
 800390a:	bf0c      	ite	eq
 800390c:	f8c8 2000 	streq.w	r2, [r8]
 8003910:	605a      	strne	r2, [r3, #4]
 8003912:	e7eb      	b.n	80038ec <_malloc_r+0xa8>
 8003914:	4623      	mov	r3, r4
 8003916:	6864      	ldr	r4, [r4, #4]
 8003918:	e7ae      	b.n	8003878 <_malloc_r+0x34>
 800391a:	463c      	mov	r4, r7
 800391c:	687f      	ldr	r7, [r7, #4]
 800391e:	e7b6      	b.n	800388e <_malloc_r+0x4a>
 8003920:	461a      	mov	r2, r3
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	42a3      	cmp	r3, r4
 8003926:	d1fb      	bne.n	8003920 <_malloc_r+0xdc>
 8003928:	2300      	movs	r3, #0
 800392a:	6053      	str	r3, [r2, #4]
 800392c:	e7de      	b.n	80038ec <_malloc_r+0xa8>
 800392e:	230c      	movs	r3, #12
 8003930:	6033      	str	r3, [r6, #0]
 8003932:	4630      	mov	r0, r6
 8003934:	f000 f80c 	bl	8003950 <__malloc_unlock>
 8003938:	e794      	b.n	8003864 <_malloc_r+0x20>
 800393a:	6005      	str	r5, [r0, #0]
 800393c:	e7d6      	b.n	80038ec <_malloc_r+0xa8>
 800393e:	bf00      	nop
 8003940:	20000364 	.word	0x20000364

08003944 <__malloc_lock>:
 8003944:	4801      	ldr	r0, [pc, #4]	@ (800394c <__malloc_lock+0x8>)
 8003946:	f7ff bf0f 	b.w	8003768 <__retarget_lock_acquire_recursive>
 800394a:	bf00      	nop
 800394c:	2000035c 	.word	0x2000035c

08003950 <__malloc_unlock>:
 8003950:	4801      	ldr	r0, [pc, #4]	@ (8003958 <__malloc_unlock+0x8>)
 8003952:	f7ff bf0a 	b.w	800376a <__retarget_lock_release_recursive>
 8003956:	bf00      	nop
 8003958:	2000035c 	.word	0x2000035c

0800395c <__ssputs_r>:
 800395c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003960:	688e      	ldr	r6, [r1, #8]
 8003962:	461f      	mov	r7, r3
 8003964:	42be      	cmp	r6, r7
 8003966:	680b      	ldr	r3, [r1, #0]
 8003968:	4682      	mov	sl, r0
 800396a:	460c      	mov	r4, r1
 800396c:	4690      	mov	r8, r2
 800396e:	d82d      	bhi.n	80039cc <__ssputs_r+0x70>
 8003970:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003974:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003978:	d026      	beq.n	80039c8 <__ssputs_r+0x6c>
 800397a:	6965      	ldr	r5, [r4, #20]
 800397c:	6909      	ldr	r1, [r1, #16]
 800397e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003982:	eba3 0901 	sub.w	r9, r3, r1
 8003986:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800398a:	1c7b      	adds	r3, r7, #1
 800398c:	444b      	add	r3, r9
 800398e:	106d      	asrs	r5, r5, #1
 8003990:	429d      	cmp	r5, r3
 8003992:	bf38      	it	cc
 8003994:	461d      	movcc	r5, r3
 8003996:	0553      	lsls	r3, r2, #21
 8003998:	d527      	bpl.n	80039ea <__ssputs_r+0x8e>
 800399a:	4629      	mov	r1, r5
 800399c:	f7ff ff52 	bl	8003844 <_malloc_r>
 80039a0:	4606      	mov	r6, r0
 80039a2:	b360      	cbz	r0, 80039fe <__ssputs_r+0xa2>
 80039a4:	6921      	ldr	r1, [r4, #16]
 80039a6:	464a      	mov	r2, r9
 80039a8:	f000 fae8 	bl	8003f7c <memcpy>
 80039ac:	89a3      	ldrh	r3, [r4, #12]
 80039ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80039b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039b6:	81a3      	strh	r3, [r4, #12]
 80039b8:	6126      	str	r6, [r4, #16]
 80039ba:	6165      	str	r5, [r4, #20]
 80039bc:	444e      	add	r6, r9
 80039be:	eba5 0509 	sub.w	r5, r5, r9
 80039c2:	6026      	str	r6, [r4, #0]
 80039c4:	60a5      	str	r5, [r4, #8]
 80039c6:	463e      	mov	r6, r7
 80039c8:	42be      	cmp	r6, r7
 80039ca:	d900      	bls.n	80039ce <__ssputs_r+0x72>
 80039cc:	463e      	mov	r6, r7
 80039ce:	6820      	ldr	r0, [r4, #0]
 80039d0:	4632      	mov	r2, r6
 80039d2:	4641      	mov	r1, r8
 80039d4:	f000 faa8 	bl	8003f28 <memmove>
 80039d8:	68a3      	ldr	r3, [r4, #8]
 80039da:	1b9b      	subs	r3, r3, r6
 80039dc:	60a3      	str	r3, [r4, #8]
 80039de:	6823      	ldr	r3, [r4, #0]
 80039e0:	4433      	add	r3, r6
 80039e2:	6023      	str	r3, [r4, #0]
 80039e4:	2000      	movs	r0, #0
 80039e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039ea:	462a      	mov	r2, r5
 80039ec:	f000 fad4 	bl	8003f98 <_realloc_r>
 80039f0:	4606      	mov	r6, r0
 80039f2:	2800      	cmp	r0, #0
 80039f4:	d1e0      	bne.n	80039b8 <__ssputs_r+0x5c>
 80039f6:	6921      	ldr	r1, [r4, #16]
 80039f8:	4650      	mov	r0, sl
 80039fa:	f7ff feb7 	bl	800376c <_free_r>
 80039fe:	230c      	movs	r3, #12
 8003a00:	f8ca 3000 	str.w	r3, [sl]
 8003a04:	89a3      	ldrh	r3, [r4, #12]
 8003a06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a0a:	81a3      	strh	r3, [r4, #12]
 8003a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a10:	e7e9      	b.n	80039e6 <__ssputs_r+0x8a>
	...

08003a14 <_svfiprintf_r>:
 8003a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a18:	4698      	mov	r8, r3
 8003a1a:	898b      	ldrh	r3, [r1, #12]
 8003a1c:	061b      	lsls	r3, r3, #24
 8003a1e:	b09d      	sub	sp, #116	@ 0x74
 8003a20:	4607      	mov	r7, r0
 8003a22:	460d      	mov	r5, r1
 8003a24:	4614      	mov	r4, r2
 8003a26:	d510      	bpl.n	8003a4a <_svfiprintf_r+0x36>
 8003a28:	690b      	ldr	r3, [r1, #16]
 8003a2a:	b973      	cbnz	r3, 8003a4a <_svfiprintf_r+0x36>
 8003a2c:	2140      	movs	r1, #64	@ 0x40
 8003a2e:	f7ff ff09 	bl	8003844 <_malloc_r>
 8003a32:	6028      	str	r0, [r5, #0]
 8003a34:	6128      	str	r0, [r5, #16]
 8003a36:	b930      	cbnz	r0, 8003a46 <_svfiprintf_r+0x32>
 8003a38:	230c      	movs	r3, #12
 8003a3a:	603b      	str	r3, [r7, #0]
 8003a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a40:	b01d      	add	sp, #116	@ 0x74
 8003a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a46:	2340      	movs	r3, #64	@ 0x40
 8003a48:	616b      	str	r3, [r5, #20]
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a4e:	2320      	movs	r3, #32
 8003a50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003a54:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a58:	2330      	movs	r3, #48	@ 0x30
 8003a5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003bf8 <_svfiprintf_r+0x1e4>
 8003a5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003a62:	f04f 0901 	mov.w	r9, #1
 8003a66:	4623      	mov	r3, r4
 8003a68:	469a      	mov	sl, r3
 8003a6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a6e:	b10a      	cbz	r2, 8003a74 <_svfiprintf_r+0x60>
 8003a70:	2a25      	cmp	r2, #37	@ 0x25
 8003a72:	d1f9      	bne.n	8003a68 <_svfiprintf_r+0x54>
 8003a74:	ebba 0b04 	subs.w	fp, sl, r4
 8003a78:	d00b      	beq.n	8003a92 <_svfiprintf_r+0x7e>
 8003a7a:	465b      	mov	r3, fp
 8003a7c:	4622      	mov	r2, r4
 8003a7e:	4629      	mov	r1, r5
 8003a80:	4638      	mov	r0, r7
 8003a82:	f7ff ff6b 	bl	800395c <__ssputs_r>
 8003a86:	3001      	adds	r0, #1
 8003a88:	f000 80a7 	beq.w	8003bda <_svfiprintf_r+0x1c6>
 8003a8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003a8e:	445a      	add	r2, fp
 8003a90:	9209      	str	r2, [sp, #36]	@ 0x24
 8003a92:	f89a 3000 	ldrb.w	r3, [sl]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 809f 	beq.w	8003bda <_svfiprintf_r+0x1c6>
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003aa6:	f10a 0a01 	add.w	sl, sl, #1
 8003aaa:	9304      	str	r3, [sp, #16]
 8003aac:	9307      	str	r3, [sp, #28]
 8003aae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003ab2:	931a      	str	r3, [sp, #104]	@ 0x68
 8003ab4:	4654      	mov	r4, sl
 8003ab6:	2205      	movs	r2, #5
 8003ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003abc:	484e      	ldr	r0, [pc, #312]	@ (8003bf8 <_svfiprintf_r+0x1e4>)
 8003abe:	f7fc fb87 	bl	80001d0 <memchr>
 8003ac2:	9a04      	ldr	r2, [sp, #16]
 8003ac4:	b9d8      	cbnz	r0, 8003afe <_svfiprintf_r+0xea>
 8003ac6:	06d0      	lsls	r0, r2, #27
 8003ac8:	bf44      	itt	mi
 8003aca:	2320      	movmi	r3, #32
 8003acc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ad0:	0711      	lsls	r1, r2, #28
 8003ad2:	bf44      	itt	mi
 8003ad4:	232b      	movmi	r3, #43	@ 0x2b
 8003ad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ada:	f89a 3000 	ldrb.w	r3, [sl]
 8003ade:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ae0:	d015      	beq.n	8003b0e <_svfiprintf_r+0xfa>
 8003ae2:	9a07      	ldr	r2, [sp, #28]
 8003ae4:	4654      	mov	r4, sl
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	f04f 0c0a 	mov.w	ip, #10
 8003aec:	4621      	mov	r1, r4
 8003aee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003af2:	3b30      	subs	r3, #48	@ 0x30
 8003af4:	2b09      	cmp	r3, #9
 8003af6:	d94b      	bls.n	8003b90 <_svfiprintf_r+0x17c>
 8003af8:	b1b0      	cbz	r0, 8003b28 <_svfiprintf_r+0x114>
 8003afa:	9207      	str	r2, [sp, #28]
 8003afc:	e014      	b.n	8003b28 <_svfiprintf_r+0x114>
 8003afe:	eba0 0308 	sub.w	r3, r0, r8
 8003b02:	fa09 f303 	lsl.w	r3, r9, r3
 8003b06:	4313      	orrs	r3, r2
 8003b08:	9304      	str	r3, [sp, #16]
 8003b0a:	46a2      	mov	sl, r4
 8003b0c:	e7d2      	b.n	8003ab4 <_svfiprintf_r+0xa0>
 8003b0e:	9b03      	ldr	r3, [sp, #12]
 8003b10:	1d19      	adds	r1, r3, #4
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	9103      	str	r1, [sp, #12]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	bfbb      	ittet	lt
 8003b1a:	425b      	neglt	r3, r3
 8003b1c:	f042 0202 	orrlt.w	r2, r2, #2
 8003b20:	9307      	strge	r3, [sp, #28]
 8003b22:	9307      	strlt	r3, [sp, #28]
 8003b24:	bfb8      	it	lt
 8003b26:	9204      	strlt	r2, [sp, #16]
 8003b28:	7823      	ldrb	r3, [r4, #0]
 8003b2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b2c:	d10a      	bne.n	8003b44 <_svfiprintf_r+0x130>
 8003b2e:	7863      	ldrb	r3, [r4, #1]
 8003b30:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b32:	d132      	bne.n	8003b9a <_svfiprintf_r+0x186>
 8003b34:	9b03      	ldr	r3, [sp, #12]
 8003b36:	1d1a      	adds	r2, r3, #4
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	9203      	str	r2, [sp, #12]
 8003b3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003b40:	3402      	adds	r4, #2
 8003b42:	9305      	str	r3, [sp, #20]
 8003b44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003c08 <_svfiprintf_r+0x1f4>
 8003b48:	7821      	ldrb	r1, [r4, #0]
 8003b4a:	2203      	movs	r2, #3
 8003b4c:	4650      	mov	r0, sl
 8003b4e:	f7fc fb3f 	bl	80001d0 <memchr>
 8003b52:	b138      	cbz	r0, 8003b64 <_svfiprintf_r+0x150>
 8003b54:	9b04      	ldr	r3, [sp, #16]
 8003b56:	eba0 000a 	sub.w	r0, r0, sl
 8003b5a:	2240      	movs	r2, #64	@ 0x40
 8003b5c:	4082      	lsls	r2, r0
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	3401      	adds	r4, #1
 8003b62:	9304      	str	r3, [sp, #16]
 8003b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b68:	4824      	ldr	r0, [pc, #144]	@ (8003bfc <_svfiprintf_r+0x1e8>)
 8003b6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003b6e:	2206      	movs	r2, #6
 8003b70:	f7fc fb2e 	bl	80001d0 <memchr>
 8003b74:	2800      	cmp	r0, #0
 8003b76:	d036      	beq.n	8003be6 <_svfiprintf_r+0x1d2>
 8003b78:	4b21      	ldr	r3, [pc, #132]	@ (8003c00 <_svfiprintf_r+0x1ec>)
 8003b7a:	bb1b      	cbnz	r3, 8003bc4 <_svfiprintf_r+0x1b0>
 8003b7c:	9b03      	ldr	r3, [sp, #12]
 8003b7e:	3307      	adds	r3, #7
 8003b80:	f023 0307 	bic.w	r3, r3, #7
 8003b84:	3308      	adds	r3, #8
 8003b86:	9303      	str	r3, [sp, #12]
 8003b88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b8a:	4433      	add	r3, r6
 8003b8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b8e:	e76a      	b.n	8003a66 <_svfiprintf_r+0x52>
 8003b90:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b94:	460c      	mov	r4, r1
 8003b96:	2001      	movs	r0, #1
 8003b98:	e7a8      	b.n	8003aec <_svfiprintf_r+0xd8>
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	3401      	adds	r4, #1
 8003b9e:	9305      	str	r3, [sp, #20]
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	f04f 0c0a 	mov.w	ip, #10
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bac:	3a30      	subs	r2, #48	@ 0x30
 8003bae:	2a09      	cmp	r2, #9
 8003bb0:	d903      	bls.n	8003bba <_svfiprintf_r+0x1a6>
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0c6      	beq.n	8003b44 <_svfiprintf_r+0x130>
 8003bb6:	9105      	str	r1, [sp, #20]
 8003bb8:	e7c4      	b.n	8003b44 <_svfiprintf_r+0x130>
 8003bba:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bbe:	4604      	mov	r4, r0
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e7f0      	b.n	8003ba6 <_svfiprintf_r+0x192>
 8003bc4:	ab03      	add	r3, sp, #12
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	462a      	mov	r2, r5
 8003bca:	4b0e      	ldr	r3, [pc, #56]	@ (8003c04 <_svfiprintf_r+0x1f0>)
 8003bcc:	a904      	add	r1, sp, #16
 8003bce:	4638      	mov	r0, r7
 8003bd0:	f3af 8000 	nop.w
 8003bd4:	1c42      	adds	r2, r0, #1
 8003bd6:	4606      	mov	r6, r0
 8003bd8:	d1d6      	bne.n	8003b88 <_svfiprintf_r+0x174>
 8003bda:	89ab      	ldrh	r3, [r5, #12]
 8003bdc:	065b      	lsls	r3, r3, #25
 8003bde:	f53f af2d 	bmi.w	8003a3c <_svfiprintf_r+0x28>
 8003be2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003be4:	e72c      	b.n	8003a40 <_svfiprintf_r+0x2c>
 8003be6:	ab03      	add	r3, sp, #12
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	462a      	mov	r2, r5
 8003bec:	4b05      	ldr	r3, [pc, #20]	@ (8003c04 <_svfiprintf_r+0x1f0>)
 8003bee:	a904      	add	r1, sp, #16
 8003bf0:	4638      	mov	r0, r7
 8003bf2:	f000 f879 	bl	8003ce8 <_printf_i>
 8003bf6:	e7ed      	b.n	8003bd4 <_svfiprintf_r+0x1c0>
 8003bf8:	0800404c 	.word	0x0800404c
 8003bfc:	08004056 	.word	0x08004056
 8003c00:	00000000 	.word	0x00000000
 8003c04:	0800395d 	.word	0x0800395d
 8003c08:	08004052 	.word	0x08004052

08003c0c <_printf_common>:
 8003c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c10:	4616      	mov	r6, r2
 8003c12:	4698      	mov	r8, r3
 8003c14:	688a      	ldr	r2, [r1, #8]
 8003c16:	690b      	ldr	r3, [r1, #16]
 8003c18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	bfb8      	it	lt
 8003c20:	4613      	movlt	r3, r2
 8003c22:	6033      	str	r3, [r6, #0]
 8003c24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003c28:	4607      	mov	r7, r0
 8003c2a:	460c      	mov	r4, r1
 8003c2c:	b10a      	cbz	r2, 8003c32 <_printf_common+0x26>
 8003c2e:	3301      	adds	r3, #1
 8003c30:	6033      	str	r3, [r6, #0]
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	0699      	lsls	r1, r3, #26
 8003c36:	bf42      	ittt	mi
 8003c38:	6833      	ldrmi	r3, [r6, #0]
 8003c3a:	3302      	addmi	r3, #2
 8003c3c:	6033      	strmi	r3, [r6, #0]
 8003c3e:	6825      	ldr	r5, [r4, #0]
 8003c40:	f015 0506 	ands.w	r5, r5, #6
 8003c44:	d106      	bne.n	8003c54 <_printf_common+0x48>
 8003c46:	f104 0a19 	add.w	sl, r4, #25
 8003c4a:	68e3      	ldr	r3, [r4, #12]
 8003c4c:	6832      	ldr	r2, [r6, #0]
 8003c4e:	1a9b      	subs	r3, r3, r2
 8003c50:	42ab      	cmp	r3, r5
 8003c52:	dc26      	bgt.n	8003ca2 <_printf_common+0x96>
 8003c54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c58:	6822      	ldr	r2, [r4, #0]
 8003c5a:	3b00      	subs	r3, #0
 8003c5c:	bf18      	it	ne
 8003c5e:	2301      	movne	r3, #1
 8003c60:	0692      	lsls	r2, r2, #26
 8003c62:	d42b      	bmi.n	8003cbc <_printf_common+0xb0>
 8003c64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003c68:	4641      	mov	r1, r8
 8003c6a:	4638      	mov	r0, r7
 8003c6c:	47c8      	blx	r9
 8003c6e:	3001      	adds	r0, #1
 8003c70:	d01e      	beq.n	8003cb0 <_printf_common+0xa4>
 8003c72:	6823      	ldr	r3, [r4, #0]
 8003c74:	6922      	ldr	r2, [r4, #16]
 8003c76:	f003 0306 	and.w	r3, r3, #6
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	bf02      	ittt	eq
 8003c7e:	68e5      	ldreq	r5, [r4, #12]
 8003c80:	6833      	ldreq	r3, [r6, #0]
 8003c82:	1aed      	subeq	r5, r5, r3
 8003c84:	68a3      	ldr	r3, [r4, #8]
 8003c86:	bf0c      	ite	eq
 8003c88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c8c:	2500      	movne	r5, #0
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	bfc4      	itt	gt
 8003c92:	1a9b      	subgt	r3, r3, r2
 8003c94:	18ed      	addgt	r5, r5, r3
 8003c96:	2600      	movs	r6, #0
 8003c98:	341a      	adds	r4, #26
 8003c9a:	42b5      	cmp	r5, r6
 8003c9c:	d11a      	bne.n	8003cd4 <_printf_common+0xc8>
 8003c9e:	2000      	movs	r0, #0
 8003ca0:	e008      	b.n	8003cb4 <_printf_common+0xa8>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	4652      	mov	r2, sl
 8003ca6:	4641      	mov	r1, r8
 8003ca8:	4638      	mov	r0, r7
 8003caa:	47c8      	blx	r9
 8003cac:	3001      	adds	r0, #1
 8003cae:	d103      	bne.n	8003cb8 <_printf_common+0xac>
 8003cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cb8:	3501      	adds	r5, #1
 8003cba:	e7c6      	b.n	8003c4a <_printf_common+0x3e>
 8003cbc:	18e1      	adds	r1, r4, r3
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	2030      	movs	r0, #48	@ 0x30
 8003cc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003cc6:	4422      	add	r2, r4
 8003cc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ccc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003cd0:	3302      	adds	r3, #2
 8003cd2:	e7c7      	b.n	8003c64 <_printf_common+0x58>
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	4622      	mov	r2, r4
 8003cd8:	4641      	mov	r1, r8
 8003cda:	4638      	mov	r0, r7
 8003cdc:	47c8      	blx	r9
 8003cde:	3001      	adds	r0, #1
 8003ce0:	d0e6      	beq.n	8003cb0 <_printf_common+0xa4>
 8003ce2:	3601      	adds	r6, #1
 8003ce4:	e7d9      	b.n	8003c9a <_printf_common+0x8e>
	...

08003ce8 <_printf_i>:
 8003ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cec:	7e0f      	ldrb	r7, [r1, #24]
 8003cee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003cf0:	2f78      	cmp	r7, #120	@ 0x78
 8003cf2:	4691      	mov	r9, r2
 8003cf4:	4680      	mov	r8, r0
 8003cf6:	460c      	mov	r4, r1
 8003cf8:	469a      	mov	sl, r3
 8003cfa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003cfe:	d807      	bhi.n	8003d10 <_printf_i+0x28>
 8003d00:	2f62      	cmp	r7, #98	@ 0x62
 8003d02:	d80a      	bhi.n	8003d1a <_printf_i+0x32>
 8003d04:	2f00      	cmp	r7, #0
 8003d06:	f000 80d2 	beq.w	8003eae <_printf_i+0x1c6>
 8003d0a:	2f58      	cmp	r7, #88	@ 0x58
 8003d0c:	f000 80b9 	beq.w	8003e82 <_printf_i+0x19a>
 8003d10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003d18:	e03a      	b.n	8003d90 <_printf_i+0xa8>
 8003d1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003d1e:	2b15      	cmp	r3, #21
 8003d20:	d8f6      	bhi.n	8003d10 <_printf_i+0x28>
 8003d22:	a101      	add	r1, pc, #4	@ (adr r1, 8003d28 <_printf_i+0x40>)
 8003d24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d28:	08003d81 	.word	0x08003d81
 8003d2c:	08003d95 	.word	0x08003d95
 8003d30:	08003d11 	.word	0x08003d11
 8003d34:	08003d11 	.word	0x08003d11
 8003d38:	08003d11 	.word	0x08003d11
 8003d3c:	08003d11 	.word	0x08003d11
 8003d40:	08003d95 	.word	0x08003d95
 8003d44:	08003d11 	.word	0x08003d11
 8003d48:	08003d11 	.word	0x08003d11
 8003d4c:	08003d11 	.word	0x08003d11
 8003d50:	08003d11 	.word	0x08003d11
 8003d54:	08003e95 	.word	0x08003e95
 8003d58:	08003dbf 	.word	0x08003dbf
 8003d5c:	08003e4f 	.word	0x08003e4f
 8003d60:	08003d11 	.word	0x08003d11
 8003d64:	08003d11 	.word	0x08003d11
 8003d68:	08003eb7 	.word	0x08003eb7
 8003d6c:	08003d11 	.word	0x08003d11
 8003d70:	08003dbf 	.word	0x08003dbf
 8003d74:	08003d11 	.word	0x08003d11
 8003d78:	08003d11 	.word	0x08003d11
 8003d7c:	08003e57 	.word	0x08003e57
 8003d80:	6833      	ldr	r3, [r6, #0]
 8003d82:	1d1a      	adds	r2, r3, #4
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6032      	str	r2, [r6, #0]
 8003d88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d90:	2301      	movs	r3, #1
 8003d92:	e09d      	b.n	8003ed0 <_printf_i+0x1e8>
 8003d94:	6833      	ldr	r3, [r6, #0]
 8003d96:	6820      	ldr	r0, [r4, #0]
 8003d98:	1d19      	adds	r1, r3, #4
 8003d9a:	6031      	str	r1, [r6, #0]
 8003d9c:	0606      	lsls	r6, r0, #24
 8003d9e:	d501      	bpl.n	8003da4 <_printf_i+0xbc>
 8003da0:	681d      	ldr	r5, [r3, #0]
 8003da2:	e003      	b.n	8003dac <_printf_i+0xc4>
 8003da4:	0645      	lsls	r5, r0, #25
 8003da6:	d5fb      	bpl.n	8003da0 <_printf_i+0xb8>
 8003da8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003dac:	2d00      	cmp	r5, #0
 8003dae:	da03      	bge.n	8003db8 <_printf_i+0xd0>
 8003db0:	232d      	movs	r3, #45	@ 0x2d
 8003db2:	426d      	negs	r5, r5
 8003db4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003db8:	4859      	ldr	r0, [pc, #356]	@ (8003f20 <_printf_i+0x238>)
 8003dba:	230a      	movs	r3, #10
 8003dbc:	e011      	b.n	8003de2 <_printf_i+0xfa>
 8003dbe:	6821      	ldr	r1, [r4, #0]
 8003dc0:	6833      	ldr	r3, [r6, #0]
 8003dc2:	0608      	lsls	r0, r1, #24
 8003dc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8003dc8:	d402      	bmi.n	8003dd0 <_printf_i+0xe8>
 8003dca:	0649      	lsls	r1, r1, #25
 8003dcc:	bf48      	it	mi
 8003dce:	b2ad      	uxthmi	r5, r5
 8003dd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8003dd2:	4853      	ldr	r0, [pc, #332]	@ (8003f20 <_printf_i+0x238>)
 8003dd4:	6033      	str	r3, [r6, #0]
 8003dd6:	bf14      	ite	ne
 8003dd8:	230a      	movne	r3, #10
 8003dda:	2308      	moveq	r3, #8
 8003ddc:	2100      	movs	r1, #0
 8003dde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003de2:	6866      	ldr	r6, [r4, #4]
 8003de4:	60a6      	str	r6, [r4, #8]
 8003de6:	2e00      	cmp	r6, #0
 8003de8:	bfa2      	ittt	ge
 8003dea:	6821      	ldrge	r1, [r4, #0]
 8003dec:	f021 0104 	bicge.w	r1, r1, #4
 8003df0:	6021      	strge	r1, [r4, #0]
 8003df2:	b90d      	cbnz	r5, 8003df8 <_printf_i+0x110>
 8003df4:	2e00      	cmp	r6, #0
 8003df6:	d04b      	beq.n	8003e90 <_printf_i+0x1a8>
 8003df8:	4616      	mov	r6, r2
 8003dfa:	fbb5 f1f3 	udiv	r1, r5, r3
 8003dfe:	fb03 5711 	mls	r7, r3, r1, r5
 8003e02:	5dc7      	ldrb	r7, [r0, r7]
 8003e04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e08:	462f      	mov	r7, r5
 8003e0a:	42bb      	cmp	r3, r7
 8003e0c:	460d      	mov	r5, r1
 8003e0e:	d9f4      	bls.n	8003dfa <_printf_i+0x112>
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d10b      	bne.n	8003e2c <_printf_i+0x144>
 8003e14:	6823      	ldr	r3, [r4, #0]
 8003e16:	07df      	lsls	r7, r3, #31
 8003e18:	d508      	bpl.n	8003e2c <_printf_i+0x144>
 8003e1a:	6923      	ldr	r3, [r4, #16]
 8003e1c:	6861      	ldr	r1, [r4, #4]
 8003e1e:	4299      	cmp	r1, r3
 8003e20:	bfde      	ittt	le
 8003e22:	2330      	movle	r3, #48	@ 0x30
 8003e24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e2c:	1b92      	subs	r2, r2, r6
 8003e2e:	6122      	str	r2, [r4, #16]
 8003e30:	f8cd a000 	str.w	sl, [sp]
 8003e34:	464b      	mov	r3, r9
 8003e36:	aa03      	add	r2, sp, #12
 8003e38:	4621      	mov	r1, r4
 8003e3a:	4640      	mov	r0, r8
 8003e3c:	f7ff fee6 	bl	8003c0c <_printf_common>
 8003e40:	3001      	adds	r0, #1
 8003e42:	d14a      	bne.n	8003eda <_printf_i+0x1f2>
 8003e44:	f04f 30ff 	mov.w	r0, #4294967295
 8003e48:	b004      	add	sp, #16
 8003e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e4e:	6823      	ldr	r3, [r4, #0]
 8003e50:	f043 0320 	orr.w	r3, r3, #32
 8003e54:	6023      	str	r3, [r4, #0]
 8003e56:	4833      	ldr	r0, [pc, #204]	@ (8003f24 <_printf_i+0x23c>)
 8003e58:	2778      	movs	r7, #120	@ 0x78
 8003e5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003e5e:	6823      	ldr	r3, [r4, #0]
 8003e60:	6831      	ldr	r1, [r6, #0]
 8003e62:	061f      	lsls	r7, r3, #24
 8003e64:	f851 5b04 	ldr.w	r5, [r1], #4
 8003e68:	d402      	bmi.n	8003e70 <_printf_i+0x188>
 8003e6a:	065f      	lsls	r7, r3, #25
 8003e6c:	bf48      	it	mi
 8003e6e:	b2ad      	uxthmi	r5, r5
 8003e70:	6031      	str	r1, [r6, #0]
 8003e72:	07d9      	lsls	r1, r3, #31
 8003e74:	bf44      	itt	mi
 8003e76:	f043 0320 	orrmi.w	r3, r3, #32
 8003e7a:	6023      	strmi	r3, [r4, #0]
 8003e7c:	b11d      	cbz	r5, 8003e86 <_printf_i+0x19e>
 8003e7e:	2310      	movs	r3, #16
 8003e80:	e7ac      	b.n	8003ddc <_printf_i+0xf4>
 8003e82:	4827      	ldr	r0, [pc, #156]	@ (8003f20 <_printf_i+0x238>)
 8003e84:	e7e9      	b.n	8003e5a <_printf_i+0x172>
 8003e86:	6823      	ldr	r3, [r4, #0]
 8003e88:	f023 0320 	bic.w	r3, r3, #32
 8003e8c:	6023      	str	r3, [r4, #0]
 8003e8e:	e7f6      	b.n	8003e7e <_printf_i+0x196>
 8003e90:	4616      	mov	r6, r2
 8003e92:	e7bd      	b.n	8003e10 <_printf_i+0x128>
 8003e94:	6833      	ldr	r3, [r6, #0]
 8003e96:	6825      	ldr	r5, [r4, #0]
 8003e98:	6961      	ldr	r1, [r4, #20]
 8003e9a:	1d18      	adds	r0, r3, #4
 8003e9c:	6030      	str	r0, [r6, #0]
 8003e9e:	062e      	lsls	r6, r5, #24
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	d501      	bpl.n	8003ea8 <_printf_i+0x1c0>
 8003ea4:	6019      	str	r1, [r3, #0]
 8003ea6:	e002      	b.n	8003eae <_printf_i+0x1c6>
 8003ea8:	0668      	lsls	r0, r5, #25
 8003eaa:	d5fb      	bpl.n	8003ea4 <_printf_i+0x1bc>
 8003eac:	8019      	strh	r1, [r3, #0]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	6123      	str	r3, [r4, #16]
 8003eb2:	4616      	mov	r6, r2
 8003eb4:	e7bc      	b.n	8003e30 <_printf_i+0x148>
 8003eb6:	6833      	ldr	r3, [r6, #0]
 8003eb8:	1d1a      	adds	r2, r3, #4
 8003eba:	6032      	str	r2, [r6, #0]
 8003ebc:	681e      	ldr	r6, [r3, #0]
 8003ebe:	6862      	ldr	r2, [r4, #4]
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	4630      	mov	r0, r6
 8003ec4:	f7fc f984 	bl	80001d0 <memchr>
 8003ec8:	b108      	cbz	r0, 8003ece <_printf_i+0x1e6>
 8003eca:	1b80      	subs	r0, r0, r6
 8003ecc:	6060      	str	r0, [r4, #4]
 8003ece:	6863      	ldr	r3, [r4, #4]
 8003ed0:	6123      	str	r3, [r4, #16]
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ed8:	e7aa      	b.n	8003e30 <_printf_i+0x148>
 8003eda:	6923      	ldr	r3, [r4, #16]
 8003edc:	4632      	mov	r2, r6
 8003ede:	4649      	mov	r1, r9
 8003ee0:	4640      	mov	r0, r8
 8003ee2:	47d0      	blx	sl
 8003ee4:	3001      	adds	r0, #1
 8003ee6:	d0ad      	beq.n	8003e44 <_printf_i+0x15c>
 8003ee8:	6823      	ldr	r3, [r4, #0]
 8003eea:	079b      	lsls	r3, r3, #30
 8003eec:	d413      	bmi.n	8003f16 <_printf_i+0x22e>
 8003eee:	68e0      	ldr	r0, [r4, #12]
 8003ef0:	9b03      	ldr	r3, [sp, #12]
 8003ef2:	4298      	cmp	r0, r3
 8003ef4:	bfb8      	it	lt
 8003ef6:	4618      	movlt	r0, r3
 8003ef8:	e7a6      	b.n	8003e48 <_printf_i+0x160>
 8003efa:	2301      	movs	r3, #1
 8003efc:	4632      	mov	r2, r6
 8003efe:	4649      	mov	r1, r9
 8003f00:	4640      	mov	r0, r8
 8003f02:	47d0      	blx	sl
 8003f04:	3001      	adds	r0, #1
 8003f06:	d09d      	beq.n	8003e44 <_printf_i+0x15c>
 8003f08:	3501      	adds	r5, #1
 8003f0a:	68e3      	ldr	r3, [r4, #12]
 8003f0c:	9903      	ldr	r1, [sp, #12]
 8003f0e:	1a5b      	subs	r3, r3, r1
 8003f10:	42ab      	cmp	r3, r5
 8003f12:	dcf2      	bgt.n	8003efa <_printf_i+0x212>
 8003f14:	e7eb      	b.n	8003eee <_printf_i+0x206>
 8003f16:	2500      	movs	r5, #0
 8003f18:	f104 0619 	add.w	r6, r4, #25
 8003f1c:	e7f5      	b.n	8003f0a <_printf_i+0x222>
 8003f1e:	bf00      	nop
 8003f20:	0800405d 	.word	0x0800405d
 8003f24:	0800406e 	.word	0x0800406e

08003f28 <memmove>:
 8003f28:	4288      	cmp	r0, r1
 8003f2a:	b510      	push	{r4, lr}
 8003f2c:	eb01 0402 	add.w	r4, r1, r2
 8003f30:	d902      	bls.n	8003f38 <memmove+0x10>
 8003f32:	4284      	cmp	r4, r0
 8003f34:	4623      	mov	r3, r4
 8003f36:	d807      	bhi.n	8003f48 <memmove+0x20>
 8003f38:	1e43      	subs	r3, r0, #1
 8003f3a:	42a1      	cmp	r1, r4
 8003f3c:	d008      	beq.n	8003f50 <memmove+0x28>
 8003f3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f46:	e7f8      	b.n	8003f3a <memmove+0x12>
 8003f48:	4402      	add	r2, r0
 8003f4a:	4601      	mov	r1, r0
 8003f4c:	428a      	cmp	r2, r1
 8003f4e:	d100      	bne.n	8003f52 <memmove+0x2a>
 8003f50:	bd10      	pop	{r4, pc}
 8003f52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f5a:	e7f7      	b.n	8003f4c <memmove+0x24>

08003f5c <_sbrk_r>:
 8003f5c:	b538      	push	{r3, r4, r5, lr}
 8003f5e:	4d06      	ldr	r5, [pc, #24]	@ (8003f78 <_sbrk_r+0x1c>)
 8003f60:	2300      	movs	r3, #0
 8003f62:	4604      	mov	r4, r0
 8003f64:	4608      	mov	r0, r1
 8003f66:	602b      	str	r3, [r5, #0]
 8003f68:	f7fc ffe0 	bl	8000f2c <_sbrk>
 8003f6c:	1c43      	adds	r3, r0, #1
 8003f6e:	d102      	bne.n	8003f76 <_sbrk_r+0x1a>
 8003f70:	682b      	ldr	r3, [r5, #0]
 8003f72:	b103      	cbz	r3, 8003f76 <_sbrk_r+0x1a>
 8003f74:	6023      	str	r3, [r4, #0]
 8003f76:	bd38      	pop	{r3, r4, r5, pc}
 8003f78:	20000358 	.word	0x20000358

08003f7c <memcpy>:
 8003f7c:	440a      	add	r2, r1
 8003f7e:	4291      	cmp	r1, r2
 8003f80:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f84:	d100      	bne.n	8003f88 <memcpy+0xc>
 8003f86:	4770      	bx	lr
 8003f88:	b510      	push	{r4, lr}
 8003f8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f92:	4291      	cmp	r1, r2
 8003f94:	d1f9      	bne.n	8003f8a <memcpy+0xe>
 8003f96:	bd10      	pop	{r4, pc}

08003f98 <_realloc_r>:
 8003f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f9c:	4680      	mov	r8, r0
 8003f9e:	4615      	mov	r5, r2
 8003fa0:	460c      	mov	r4, r1
 8003fa2:	b921      	cbnz	r1, 8003fae <_realloc_r+0x16>
 8003fa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fa8:	4611      	mov	r1, r2
 8003faa:	f7ff bc4b 	b.w	8003844 <_malloc_r>
 8003fae:	b92a      	cbnz	r2, 8003fbc <_realloc_r+0x24>
 8003fb0:	f7ff fbdc 	bl	800376c <_free_r>
 8003fb4:	2400      	movs	r4, #0
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fbc:	f000 f81a 	bl	8003ff4 <_malloc_usable_size_r>
 8003fc0:	4285      	cmp	r5, r0
 8003fc2:	4606      	mov	r6, r0
 8003fc4:	d802      	bhi.n	8003fcc <_realloc_r+0x34>
 8003fc6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003fca:	d8f4      	bhi.n	8003fb6 <_realloc_r+0x1e>
 8003fcc:	4629      	mov	r1, r5
 8003fce:	4640      	mov	r0, r8
 8003fd0:	f7ff fc38 	bl	8003844 <_malloc_r>
 8003fd4:	4607      	mov	r7, r0
 8003fd6:	2800      	cmp	r0, #0
 8003fd8:	d0ec      	beq.n	8003fb4 <_realloc_r+0x1c>
 8003fda:	42b5      	cmp	r5, r6
 8003fdc:	462a      	mov	r2, r5
 8003fde:	4621      	mov	r1, r4
 8003fe0:	bf28      	it	cs
 8003fe2:	4632      	movcs	r2, r6
 8003fe4:	f7ff ffca 	bl	8003f7c <memcpy>
 8003fe8:	4621      	mov	r1, r4
 8003fea:	4640      	mov	r0, r8
 8003fec:	f7ff fbbe 	bl	800376c <_free_r>
 8003ff0:	463c      	mov	r4, r7
 8003ff2:	e7e0      	b.n	8003fb6 <_realloc_r+0x1e>

08003ff4 <_malloc_usable_size_r>:
 8003ff4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ff8:	1f18      	subs	r0, r3, #4
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	bfbc      	itt	lt
 8003ffe:	580b      	ldrlt	r3, [r1, r0]
 8004000:	18c0      	addlt	r0, r0, r3
 8004002:	4770      	bx	lr

08004004 <_init>:
 8004004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004006:	bf00      	nop
 8004008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800400a:	bc08      	pop	{r3}
 800400c:	469e      	mov	lr, r3
 800400e:	4770      	bx	lr

08004010 <_fini>:
 8004010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004012:	bf00      	nop
 8004014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004016:	bc08      	pop	{r3}
 8004018:	469e      	mov	lr, r3
 800401a:	4770      	bx	lr
