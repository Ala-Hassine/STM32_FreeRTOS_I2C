
STM32_FreeRTOS_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007484  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08007614  08007614  00008614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800776c  0800776c  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  0800776c  0800776c  0000876c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007774  08007774  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007774  08007774  00008774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007778  08007778  00008778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800777c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009060  2**0
                  CONTENTS
 10 .bss          00004d08  20000060  20000060  00009060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004d68  20004d68  00009060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018e9d  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000363e  00000000  00000000  00021f2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001608  00000000  00000000  00025570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001120  00000000  00000000  00026b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023d4f  00000000  00000000  00027c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000194a6  00000000  00000000  0004b9e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2982  00000000  00000000  00064e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014780f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006278  00000000  00000000  00147854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  0014dacc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080075fc 	.word	0x080075fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080075fc 	.word	0x080075fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <LCD_SEND_CMD>:
  *         - The ENABLE_BIT_MASK, RS_EN_OFF_MASK, and RS_BIT_MASK are masks for control bits.
  *         - The TIMEOUT is the maximum time to wait for the I2C transmission to complete.
  */

void LCD_SEND_CMD(char cmd)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af02      	add	r7, sp, #8
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]
  uint8_t lcd_Buffer[LCD_BUFFER_SIZE];
  char upper_data, lower_data;
  upper_data = (cmd & UPPER_BITS_MASK);
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	f023 030f 	bic.w	r3, r3, #15
 8000570:	73fb      	strb	r3, [r7, #15]
  lower_data = ((cmd << LCD_BUFFER_SIZE) & UPPER_BITS_MASK);
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	011b      	lsls	r3, r3, #4
 8000576:	73bb      	strb	r3, [r7, #14]

  // Constructing the LCD buffer with control (enable) and selection (RS) signals
  lcd_Buffer[0]  = upper_data|EN_BIT_MASK;      //en=1, rs=0
 8000578:	7bfb      	ldrb	r3, [r7, #15]
 800057a:	f043 030c 	orr.w	r3, r3, #12
 800057e:	b2db      	uxtb	r3, r3
 8000580:	723b      	strb	r3, [r7, #8]
  lcd_Buffer[1]  = upper_data|RS_EN_OFF_MASK;   //en=0, rs=0
 8000582:	7bfb      	ldrb	r3, [r7, #15]
 8000584:	f043 0308 	orr.w	r3, r3, #8
 8000588:	b2db      	uxtb	r3, r3
 800058a:	727b      	strb	r3, [r7, #9]
  lcd_Buffer[2]  = lower_data|EN_BIT_MASK;      //en=1, rs=0
 800058c:	7bbb      	ldrb	r3, [r7, #14]
 800058e:	f043 030c 	orr.w	r3, r3, #12
 8000592:	b2db      	uxtb	r3, r3
 8000594:	72bb      	strb	r3, [r7, #10]
  lcd_Buffer[3]  = lower_data|RS_EN_OFF_MASK;   //en=0, rs=0
 8000596:	7bbb      	ldrb	r3, [r7, #14]
 8000598:	f043 0308 	orr.w	r3, r3, #8
 800059c:	b2db      	uxtb	r3, r3
 800059e:	72fb      	strb	r3, [r7, #11]

  // Transmitting the buffer via the I2C bus to the LCD screen with the specified address
  HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD, (uint8_t *) lcd_Buffer, LCD_BUFFER_SIZE, TIMEOUT);
 80005a0:	f107 0208 	add.w	r2, r7, #8
 80005a4:	2364      	movs	r3, #100	@ 0x64
 80005a6:	9300      	str	r3, [sp, #0]
 80005a8:	2304      	movs	r3, #4
 80005aa:	214e      	movs	r1, #78	@ 0x4e
 80005ac:	4803      	ldr	r0, [pc, #12]	@ (80005bc <LCD_SEND_CMD+0x5c>)
 80005ae:	f001 fdcf 	bl	8002150 <HAL_I2C_Master_Transmit>
}
 80005b2:	bf00      	nop
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000138 	.word	0x20000138

080005c0 <LCD_SEND_DATA>:
  *         - The RS_EN_ON_MASK and RS_BIT_MASK are masks for control bits.
  *         - The TIMEOUT is the maximum time to wait for the I2C transmission to complete.
  */

void LCD_SEND_DATA(char data)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af02      	add	r7, sp, #8
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
  uint8_t lcd_Buffer[LCD_BUFFER_SIZE];
  char upper_data, lower_data;
  upper_data = (data & UPPER_BITS_MASK);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	f023 030f 	bic.w	r3, r3, #15
 80005d0:	73fb      	strb	r3, [r7, #15]
  lower_data = ((data << LCD_BUFFER_SIZE) & UPPER_BITS_MASK);
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	011b      	lsls	r3, r3, #4
 80005d6:	73bb      	strb	r3, [r7, #14]
  
  // Constructing the LCD buffer with control (enable) and selection (RS) signals
  lcd_Buffer[0]  = upper_data|RS_EN_ON_MASK;  //en=1, rs=1
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	f043 030d 	orr.w	r3, r3, #13
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	723b      	strb	r3, [r7, #8]
  lcd_Buffer[1]  = upper_data|RS_BIT_MASK;    //en=0, rs=1
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	f043 0309 	orr.w	r3, r3, #9
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	727b      	strb	r3, [r7, #9]
  lcd_Buffer[2]  = lower_data|RS_EN_ON_MASK;  //en=1, rs=1
 80005ec:	7bbb      	ldrb	r3, [r7, #14]
 80005ee:	f043 030d 	orr.w	r3, r3, #13
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	72bb      	strb	r3, [r7, #10]
  lcd_Buffer[3]  = lower_data|RS_BIT_MASK;    //en=0, rs=1
 80005f6:	7bbb      	ldrb	r3, [r7, #14]
 80005f8:	f043 0309 	orr.w	r3, r3, #9
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD, (uint8_t *) lcd_Buffer, LCD_BUFFER_SIZE, TIMEOUT);
 8000600:	f107 0208 	add.w	r2, r7, #8
 8000604:	2364      	movs	r3, #100	@ 0x64
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	2304      	movs	r3, #4
 800060a:	214e      	movs	r1, #78	@ 0x4e
 800060c:	4803      	ldr	r0, [pc, #12]	@ (800061c <LCD_SEND_DATA+0x5c>)
 800060e:	f001 fd9f 	bl	8002150 <HAL_I2C_Master_Transmit>
}
 8000612:	bf00      	nop
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000138 	.word	0x20000138

08000620 <LCD_SET_CURSOR>:
  *         - The LCD_CURSOR_ROW_FIRST and LCD_CURSOR_ROW_SECOND are commands to set the cursor to the
  *           beginning of the first and second rows, respectively.
  */

void LCD_SET_CURSOR(int row, int col)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
  switch(row)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d003      	beq.n	8000638 <LCD_SET_CURSOR+0x18>
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2b01      	cmp	r3, #1
 8000634:	d005      	beq.n	8000642 <LCD_SET_CURSOR+0x22>
 8000636:	e009      	b.n	800064c <LCD_SET_CURSOR+0x2c>
  {
    case 0: col |= LCD_CURSOR_ROW_FIRST; break;
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	e004      	b.n	800064c <LCD_SET_CURSOR+0x2c>
    case 1: col |= LCD_CURSOR_ROW_SECOND; break;
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	bf00      	nop
  }
  LCD_SEND_CMD(col);
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff ff85 	bl	8000560 <LCD_SEND_CMD>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <LCD_INIT>:
  *           various settings such as function set, display on/off control, clearing the display,
  *           entry mode set, and enabling the display.
  */

void LCD_INIT(void)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	af00      	add	r7, sp, #0
  // Initialisation en mode 4 bits
  HAL_Delay(DELAY_50MS);
 8000662:	2028      	movs	r0, #40	@ 0x28
 8000664:	f000 fd8e 	bl	8001184 <HAL_Delay>
  LCD_SEND_CMD(LCD_INIT_CMD_8BIT);
 8000668:	2030      	movs	r0, #48	@ 0x30
 800066a:	f7ff ff79 	bl	8000560 <LCD_SEND_CMD>
  HAL_Delay(DELAY_5MS);
 800066e:	2005      	movs	r0, #5
 8000670:	f000 fd88 	bl	8001184 <HAL_Delay>
  LCD_SEND_CMD(LCD_INIT_CMD_8BIT);
 8000674:	2030      	movs	r0, #48	@ 0x30
 8000676:	f7ff ff73 	bl	8000560 <LCD_SEND_CMD>
  HAL_Delay(DELAY_1MS);
 800067a:	2001      	movs	r0, #1
 800067c:	f000 fd82 	bl	8001184 <HAL_Delay>
  LCD_SEND_CMD(LCD_INIT_CMD_8BIT);
 8000680:	2030      	movs	r0, #48	@ 0x30
 8000682:	f7ff ff6d 	bl	8000560 <LCD_SEND_CMD>
  HAL_Delay(DELAY_10MS);
 8000686:	200a      	movs	r0, #10
 8000688:	f000 fd7c 	bl	8001184 <HAL_Delay>
  LCD_SEND_CMD(LCD_INIT_CMD_4BIT);
 800068c:	2020      	movs	r0, #32
 800068e:	f7ff ff67 	bl	8000560 <LCD_SEND_CMD>
  HAL_Delay(DELAY_10MS);
 8000692:	200a      	movs	r0, #10
 8000694:	f000 fd76 	bl	8001184 <HAL_Delay>

  // dislay initialisation
  LCD_SEND_CMD (LCD_INIT_CMD_FUNCTION_SET); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000698:	2028      	movs	r0, #40	@ 0x28
 800069a:	f7ff ff61 	bl	8000560 <LCD_SEND_CMD>
  HAL_Delay(DELAY_1MS);
 800069e:	2001      	movs	r0, #1
 80006a0:	f000 fd70 	bl	8001184 <HAL_Delay>
  LCD_SEND_CMD (LCD_INIT_CMD_DISPLAY_OFF); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80006a4:	2008      	movs	r0, #8
 80006a6:	f7ff ff5b 	bl	8000560 <LCD_SEND_CMD>
  HAL_Delay(DELAY_1MS);
 80006aa:	2001      	movs	r0, #1
 80006ac:	f000 fd6a 	bl	8001184 <HAL_Delay>
  LCD_SEND_CMD (LCD_INIT_CMD_CLEAR_DISPLAY);  // clear display
 80006b0:	2001      	movs	r0, #1
 80006b2:	f7ff ff55 	bl	8000560 <LCD_SEND_CMD>
  HAL_Delay(DELAY_1MS);
 80006b6:	2001      	movs	r0, #1
 80006b8:	f000 fd64 	bl	8001184 <HAL_Delay>
  HAL_Delay(DELAY_1MS);
 80006bc:	2001      	movs	r0, #1
 80006be:	f000 fd61 	bl	8001184 <HAL_Delay>
  LCD_SEND_CMD (LCD_INIT_CMD_ENTRY_MODE_SET); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80006c2:	2006      	movs	r0, #6
 80006c4:	f7ff ff4c 	bl	8000560 <LCD_SEND_CMD>
  HAL_Delay(DELAY_1MS);
 80006c8:	2001      	movs	r0, #1
 80006ca:	f000 fd5b 	bl	8001184 <HAL_Delay>
  LCD_SEND_CMD (LCD_INIT_CMD_DISPLAY_ON); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80006ce:	200c      	movs	r0, #12
 80006d0:	f7ff ff46 	bl	8000560 <LCD_SEND_CMD>
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <LCD_SEND_STRING>:
  * @note   For the LCD_SEND_STRING function:
  *         - The *str is a pointer to the input string.
  */

void LCD_SEND_STRING(char *str)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  while (*str) LCD_SEND_DATA(*str++);
 80006e0:	e006      	b.n	80006f0 <LCD_SEND_STRING+0x18>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	1c5a      	adds	r2, r3, #1
 80006e6:	607a      	str	r2, [r7, #4]
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff68 	bl	80005c0 <LCD_SEND_DATA>
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d1f4      	bne.n	80006e2 <LCD_SEND_STRING+0xa>
}
 80006f8:	bf00      	nop
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <read_val1>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void read_val1(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
   osMutexAcquire(adcMutexHandle, osWaitForever);
 8000708:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <read_val1+0x44>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f04f 31ff 	mov.w	r1, #4294967295
 8000710:	4618      	mov	r0, r3
 8000712:	f003 f9fc 	bl	8003b0e <osMutexAcquire>
   HAL_ADC_Start(&hadc1);
 8000716:	480d      	ldr	r0, [pc, #52]	@ (800074c <read_val1+0x48>)
 8000718:	f000 fd9c 	bl	8001254 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc1, 1000);
 800071c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000720:	480a      	ldr	r0, [pc, #40]	@ (800074c <read_val1+0x48>)
 8000722:	f000 fe9c 	bl	800145e <HAL_ADC_PollForConversion>
   readValue1 = HAL_ADC_GetValue(&hadc1);
 8000726:	4809      	ldr	r0, [pc, #36]	@ (800074c <read_val1+0x48>)
 8000728:	f000 ff24 	bl	8001574 <HAL_ADC_GetValue>
 800072c:	4603      	mov	r3, r0
 800072e:	b29a      	uxth	r2, r3
 8000730:	4b07      	ldr	r3, [pc, #28]	@ (8000750 <read_val1+0x4c>)
 8000732:	801a      	strh	r2, [r3, #0]
   HAL_ADC_Stop(&hadc1);
 8000734:	4805      	ldr	r0, [pc, #20]	@ (800074c <read_val1+0x48>)
 8000736:	f000 fe5f 	bl	80013f8 <HAL_ADC_Stop>
   osMutexRelease(adcMutexHandle);
 800073a:	4b03      	ldr	r3, [pc, #12]	@ (8000748 <read_val1+0x44>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4618      	mov	r0, r3
 8000740:	f003 fa30 	bl	8003ba4 <osMutexRelease>
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	200001e4 	.word	0x200001e4
 800074c:	200000a8 	.word	0x200000a8
 8000750:	2000007c 	.word	0x2000007c

08000754 <read_val2>:

void read_val2(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
   osMutexAcquire(adcMutexHandle, osWaitForever);
 8000758:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <read_val2+0x44>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f04f 31ff 	mov.w	r1, #4294967295
 8000760:	4618      	mov	r0, r3
 8000762:	f003 f9d4 	bl	8003b0e <osMutexAcquire>
   HAL_ADC_Start(&hadc2);
 8000766:	480d      	ldr	r0, [pc, #52]	@ (800079c <read_val2+0x48>)
 8000768:	f000 fd74 	bl	8001254 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc2, 1000);
 800076c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000770:	480a      	ldr	r0, [pc, #40]	@ (800079c <read_val2+0x48>)
 8000772:	f000 fe74 	bl	800145e <HAL_ADC_PollForConversion>
   readValue2 = HAL_ADC_GetValue(&hadc2);
 8000776:	4809      	ldr	r0, [pc, #36]	@ (800079c <read_val2+0x48>)
 8000778:	f000 fefc 	bl	8001574 <HAL_ADC_GetValue>
 800077c:	4603      	mov	r3, r0
 800077e:	b29a      	uxth	r2, r3
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <read_val2+0x4c>)
 8000782:	801a      	strh	r2, [r3, #0]
   HAL_ADC_Stop(&hadc2);
 8000784:	4805      	ldr	r0, [pc, #20]	@ (800079c <read_val2+0x48>)
 8000786:	f000 fe37 	bl	80013f8 <HAL_ADC_Stop>
   osMutexRelease(adcMutexHandle);
 800078a:	4b03      	ldr	r3, [pc, #12]	@ (8000798 <read_val2+0x44>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4618      	mov	r0, r3
 8000790:	f003 fa08 	bl	8003ba4 <osMutexRelease>
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200001e4 	.word	0x200001e4
 800079c:	200000f0 	.word	0x200000f0
 80007a0:	2000007e 	.word	0x2000007e

080007a4 <ADC1_Task>:

/* ADC1 Task - reads every 100ms */
void ADC1_Task(void *argument)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  const uint32_t delay_ms = 100;
 80007ac:	2364      	movs	r3, #100	@ 0x64
 80007ae:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    read_val1();
 80007b0:	f7ff ffa8 	bl	8000704 <read_val1>
    osDelay(delay_ms);
 80007b4:	68f8      	ldr	r0, [r7, #12]
 80007b6:	f003 f909 	bl	80039cc <osDelay>
    read_val1();
 80007ba:	bf00      	nop
 80007bc:	e7f8      	b.n	80007b0 <ADC1_Task+0xc>

080007be <ADC2_Task>:
  }
}

/* ADC2 Task - reads every 500ms */
void ADC2_Task(void *argument)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b084      	sub	sp, #16
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
  const uint32_t delay_ms = 2000;
 80007c6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80007ca:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    read_val2();
 80007cc:	f7ff ffc2 	bl	8000754 <read_val2>
    osDelay(delay_ms);
 80007d0:	68f8      	ldr	r0, [r7, #12]
 80007d2:	f003 f8fb 	bl	80039cc <osDelay>
    read_val2();
 80007d6:	bf00      	nop
 80007d8:	e7f8      	b.n	80007cc <ADC2_Task+0xe>
	...

080007dc <Display_Task>:
  }
}

/* Display Task - updates LCD periodically */
void Display_Task(void *argument)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  const uint32_t mydelay = 200;
 80007e4:	23c8      	movs	r3, #200	@ 0xc8
 80007e6:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    // Display PA1 value on first row
    LCD_SET_CURSOR(0, 0);
 80007e8:	2100      	movs	r1, #0
 80007ea:	2000      	movs	r0, #0
 80007ec:	f7ff ff18 	bl	8000620 <LCD_SET_CURSOR>
    uint16_t percent1 = (readValue1 * 100) / 1023;
 80007f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000860 <Display_Task+0x84>)
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	2364      	movs	r3, #100	@ 0x64
 80007f8:	fb02 f303 	mul.w	r3, r2, r3
 80007fc:	4a19      	ldr	r2, [pc, #100]	@ (8000864 <Display_Task+0x88>)
 80007fe:	fb82 1203 	smull	r1, r2, r2, r3
 8000802:	441a      	add	r2, r3
 8000804:	1252      	asrs	r2, r2, #9
 8000806:	17db      	asrs	r3, r3, #31
 8000808:	1ad3      	subs	r3, r2, r3
 800080a:	817b      	strh	r3, [r7, #10]
    snprintf(lcd_buffer1, sizeof(lcd_buffer1), "PA1 : %3u%%", percent1);
 800080c:	897b      	ldrh	r3, [r7, #10]
 800080e:	4a16      	ldr	r2, [pc, #88]	@ (8000868 <Display_Task+0x8c>)
 8000810:	2114      	movs	r1, #20
 8000812:	4816      	ldr	r0, [pc, #88]	@ (800086c <Display_Task+0x90>)
 8000814:	f006 f9e8 	bl	8006be8 <sniprintf>
    LCD_SEND_STRING(lcd_buffer1);
 8000818:	4814      	ldr	r0, [pc, #80]	@ (800086c <Display_Task+0x90>)
 800081a:	f7ff ff5d 	bl	80006d8 <LCD_SEND_STRING>

    // Display PA2 value on second row
    LCD_SET_CURSOR(1, 0);
 800081e:	2100      	movs	r1, #0
 8000820:	2001      	movs	r0, #1
 8000822:	f7ff fefd 	bl	8000620 <LCD_SET_CURSOR>
    uint16_t percent2 = (readValue2 * 100) / 1023;
 8000826:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <Display_Task+0x94>)
 8000828:	881b      	ldrh	r3, [r3, #0]
 800082a:	461a      	mov	r2, r3
 800082c:	2364      	movs	r3, #100	@ 0x64
 800082e:	fb02 f303 	mul.w	r3, r2, r3
 8000832:	4a0c      	ldr	r2, [pc, #48]	@ (8000864 <Display_Task+0x88>)
 8000834:	fb82 1203 	smull	r1, r2, r2, r3
 8000838:	441a      	add	r2, r3
 800083a:	1252      	asrs	r2, r2, #9
 800083c:	17db      	asrs	r3, r3, #31
 800083e:	1ad3      	subs	r3, r2, r3
 8000840:	813b      	strh	r3, [r7, #8]
    snprintf(lcd_buffer2, sizeof(lcd_buffer2), "PA2 : %3u%%", percent2);
 8000842:	893b      	ldrh	r3, [r7, #8]
 8000844:	4a0b      	ldr	r2, [pc, #44]	@ (8000874 <Display_Task+0x98>)
 8000846:	2114      	movs	r1, #20
 8000848:	480b      	ldr	r0, [pc, #44]	@ (8000878 <Display_Task+0x9c>)
 800084a:	f006 f9cd 	bl	8006be8 <sniprintf>
    LCD_SEND_STRING(lcd_buffer2);
 800084e:	480a      	ldr	r0, [pc, #40]	@ (8000878 <Display_Task+0x9c>)
 8000850:	f7ff ff42 	bl	80006d8 <LCD_SEND_STRING>

    osDelay(mydelay);
 8000854:	68f8      	ldr	r0, [r7, #12]
 8000856:	f003 f8b9 	bl	80039cc <osDelay>
  {
 800085a:	bf00      	nop
 800085c:	e7c4      	b.n	80007e8 <Display_Task+0xc>
 800085e:	bf00      	nop
 8000860:	2000007c 	.word	0x2000007c
 8000864:	80200803 	.word	0x80200803
 8000868:	08007650 	.word	0x08007650
 800086c:	20000080 	.word	0x20000080
 8000870:	2000007e 	.word	0x2000007e
 8000874:	0800765c 	.word	0x0800765c
 8000878:	20000094 	.word	0x20000094

0800087c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000880:	f000 fc3e 	bl	8001100 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000884:	f000 f854 	bl	8000930 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000888:	f000 f9c8 	bl	8000c1c <MX_GPIO_Init>
  MX_ADC1_Init();
 800088c:	f000 f8ba 	bl	8000a04 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000890:	f000 f90c 	bl	8000aac <MX_ADC2_Init>
  MX_I2C2_Init();
 8000894:	f000 f95e 	bl	8000b54 <MX_I2C2_Init>
  MX_TIM6_Init();
 8000898:	f000 f98a 	bl	8000bb0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 800089c:	f7ff fedf 	bl	800065e <LCD_INIT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008a0:	f002 ffb8 	bl	8003814 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of adcMutex */
  adcMutexHandle = osMutexNew(&adcMutex_attributes);
 80008a4:	4814      	ldr	r0, [pc, #80]	@ (80008f8 <main+0x7c>)
 80008a6:	f003 f8ac 	bl	8003a02 <osMutexNew>
 80008aa:	4603      	mov	r3, r0
 80008ac:	4a13      	ldr	r2, [pc, #76]	@ (80008fc <main+0x80>)
 80008ae:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008b0:	4a13      	ldr	r2, [pc, #76]	@ (8000900 <main+0x84>)
 80008b2:	2100      	movs	r1, #0
 80008b4:	4813      	ldr	r0, [pc, #76]	@ (8000904 <main+0x88>)
 80008b6:	f002 fff7 	bl	80038a8 <osThreadNew>
 80008ba:	4603      	mov	r3, r0
 80008bc:	4a12      	ldr	r2, [pc, #72]	@ (8000908 <main+0x8c>)
 80008be:	6013      	str	r3, [r2, #0]

  /* creation of ADC1Task */
  ADC1TaskHandle = osThreadNew(ADC1_Task, NULL, &ADC1Task_attributes);
 80008c0:	4a12      	ldr	r2, [pc, #72]	@ (800090c <main+0x90>)
 80008c2:	2100      	movs	r1, #0
 80008c4:	4812      	ldr	r0, [pc, #72]	@ (8000910 <main+0x94>)
 80008c6:	f002 ffef 	bl	80038a8 <osThreadNew>
 80008ca:	4603      	mov	r3, r0
 80008cc:	4a11      	ldr	r2, [pc, #68]	@ (8000914 <main+0x98>)
 80008ce:	6013      	str	r3, [r2, #0]

  /* creation of ADC2Task */
  ADC2TaskHandle = osThreadNew(ADC2_Task, NULL, &ADC2Task_attributes);
 80008d0:	4a11      	ldr	r2, [pc, #68]	@ (8000918 <main+0x9c>)
 80008d2:	2100      	movs	r1, #0
 80008d4:	4811      	ldr	r0, [pc, #68]	@ (800091c <main+0xa0>)
 80008d6:	f002 ffe7 	bl	80038a8 <osThreadNew>
 80008da:	4603      	mov	r3, r0
 80008dc:	4a10      	ldr	r2, [pc, #64]	@ (8000920 <main+0xa4>)
 80008de:	6013      	str	r3, [r2, #0]

  /* creation of DisplayTask */
  DisplayTaskHandle = osThreadNew(Display_Task, NULL, &DisplayTask_attributes);
 80008e0:	4a10      	ldr	r2, [pc, #64]	@ (8000924 <main+0xa8>)
 80008e2:	2100      	movs	r1, #0
 80008e4:	4810      	ldr	r0, [pc, #64]	@ (8000928 <main+0xac>)
 80008e6:	f002 ffdf 	bl	80038a8 <osThreadNew>
 80008ea:	4603      	mov	r3, r0
 80008ec:	4a0f      	ldr	r2, [pc, #60]	@ (800092c <main+0xb0>)
 80008ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008f0:	f002 ffb4 	bl	800385c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <main+0x78>
 80008f8:	08007710 	.word	0x08007710
 80008fc:	200001e4 	.word	0x200001e4
 8000900:	08007680 	.word	0x08007680
 8000904:	08000c89 	.word	0x08000c89
 8000908:	200001d4 	.word	0x200001d4
 800090c:	080076a4 	.word	0x080076a4
 8000910:	080007a5 	.word	0x080007a5
 8000914:	200001d8 	.word	0x200001d8
 8000918:	080076c8 	.word	0x080076c8
 800091c:	080007bf 	.word	0x080007bf
 8000920:	200001dc 	.word	0x200001dc
 8000924:	080076ec 	.word	0x080076ec
 8000928:	080007dd 	.word	0x080007dd
 800092c:	200001e0 	.word	0x200001e0

08000930 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b094      	sub	sp, #80	@ 0x50
 8000934:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000936:	f107 0320 	add.w	r3, r7, #32
 800093a:	2230      	movs	r2, #48	@ 0x30
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f006 f986 	bl	8006c50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	4b28      	ldr	r3, [pc, #160]	@ (80009fc <SystemClock_Config+0xcc>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095c:	4a27      	ldr	r2, [pc, #156]	@ (80009fc <SystemClock_Config+0xcc>)
 800095e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000962:	6413      	str	r3, [r2, #64]	@ 0x40
 8000964:	4b25      	ldr	r3, [pc, #148]	@ (80009fc <SystemClock_Config+0xcc>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000968:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000970:	2300      	movs	r3, #0
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	4b22      	ldr	r3, [pc, #136]	@ (8000a00 <SystemClock_Config+0xd0>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a21      	ldr	r2, [pc, #132]	@ (8000a00 <SystemClock_Config+0xd0>)
 800097a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800097e:	6013      	str	r3, [r2, #0]
 8000980:	4b1f      	ldr	r3, [pc, #124]	@ (8000a00 <SystemClock_Config+0xd0>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800098c:	2301      	movs	r3, #1
 800098e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000990:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000994:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000996:	2302      	movs	r3, #2
 8000998:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800099a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800099e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009a0:	2304      	movs	r3, #4
 80009a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80009a4:	2348      	movs	r3, #72	@ 0x48
 80009a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009a8:	2302      	movs	r3, #2
 80009aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009ac:	2307      	movs	r3, #7
 80009ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b0:	f107 0320 	add.w	r3, r7, #32
 80009b4:	4618      	mov	r0, r3
 80009b6:	f001 ff25 	bl	8002804 <HAL_RCC_OscConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009c0:	f000 f979 	bl	8000cb6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c4:	230f      	movs	r3, #15
 80009c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c8:	2302      	movs	r3, #2
 80009ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	2102      	movs	r1, #2
 80009e2:	4618      	mov	r0, r3
 80009e4:	f002 f986 	bl	8002cf4 <HAL_RCC_ClockConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009ee:	f000 f962 	bl	8000cb6 <Error_Handler>
  }
}
 80009f2:	bf00      	nop
 80009f4:	3750      	adds	r7, #80	@ 0x50
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40007000 	.word	0x40007000

08000a04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a16:	4b22      	ldr	r3, [pc, #136]	@ (8000aa0 <MX_ADC1_Init+0x9c>)
 8000a18:	4a22      	ldr	r2, [pc, #136]	@ (8000aa4 <MX_ADC1_Init+0xa0>)
 8000a1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a1c:	4b20      	ldr	r3, [pc, #128]	@ (8000aa0 <MX_ADC1_Init+0x9c>)
 8000a1e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000a22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000a24:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa0 <MX_ADC1_Init+0x9c>)
 8000a26:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000a2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa0 <MX_ADC1_Init+0x9c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a32:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa0 <MX_ADC1_Init+0x9c>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a38:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <MX_ADC1_Init+0x9c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a40:	4b17      	ldr	r3, [pc, #92]	@ (8000aa0 <MX_ADC1_Init+0x9c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a46:	4b16      	ldr	r3, [pc, #88]	@ (8000aa0 <MX_ADC1_Init+0x9c>)
 8000a48:	4a17      	ldr	r2, [pc, #92]	@ (8000aa8 <MX_ADC1_Init+0xa4>)
 8000a4a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	@ (8000aa0 <MX_ADC1_Init+0x9c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a52:	4b13      	ldr	r3, [pc, #76]	@ (8000aa0 <MX_ADC1_Init+0x9c>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a58:	4b11      	ldr	r3, [pc, #68]	@ (8000aa0 <MX_ADC1_Init+0x9c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <MX_ADC1_Init+0x9c>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a66:	480e      	ldr	r0, [pc, #56]	@ (8000aa0 <MX_ADC1_Init+0x9c>)
 8000a68:	f000 fbb0 	bl	80011cc <HAL_ADC_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000a72:	f000 f920 	bl	8000cb6 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a76:	2301      	movs	r3, #1
 8000a78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a82:	463b      	mov	r3, r7
 8000a84:	4619      	mov	r1, r3
 8000a86:	4806      	ldr	r0, [pc, #24]	@ (8000aa0 <MX_ADC1_Init+0x9c>)
 8000a88:	f000 fd82 	bl	8001590 <HAL_ADC_ConfigChannel>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000a92:	f000 f910 	bl	8000cb6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200000a8 	.word	0x200000a8
 8000aa4:	40012000 	.word	0x40012000
 8000aa8:	0f000001 	.word	0x0f000001

08000aac <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000abe:	4b22      	ldr	r3, [pc, #136]	@ (8000b48 <MX_ADC2_Init+0x9c>)
 8000ac0:	4a22      	ldr	r2, [pc, #136]	@ (8000b4c <MX_ADC2_Init+0xa0>)
 8000ac2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ac4:	4b20      	ldr	r3, [pc, #128]	@ (8000b48 <MX_ADC2_Init+0x9c>)
 8000ac6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000aca:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 8000acc:	4b1e      	ldr	r3, [pc, #120]	@ (8000b48 <MX_ADC2_Init+0x9c>)
 8000ace:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000ad2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b48 <MX_ADC2_Init+0x9c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000ada:	4b1b      	ldr	r3, [pc, #108]	@ (8000b48 <MX_ADC2_Init+0x9c>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ae0:	4b19      	ldr	r3, [pc, #100]	@ (8000b48 <MX_ADC2_Init+0x9c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ae8:	4b17      	ldr	r3, [pc, #92]	@ (8000b48 <MX_ADC2_Init+0x9c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aee:	4b16      	ldr	r3, [pc, #88]	@ (8000b48 <MX_ADC2_Init+0x9c>)
 8000af0:	4a17      	ldr	r2, [pc, #92]	@ (8000b50 <MX_ADC2_Init+0xa4>)
 8000af2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000af4:	4b14      	ldr	r3, [pc, #80]	@ (8000b48 <MX_ADC2_Init+0x9c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000afa:	4b13      	ldr	r3, [pc, #76]	@ (8000b48 <MX_ADC2_Init+0x9c>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000b00:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <MX_ADC2_Init+0x9c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <MX_ADC2_Init+0x9c>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b0e:	480e      	ldr	r0, [pc, #56]	@ (8000b48 <MX_ADC2_Init+0x9c>)
 8000b10:	f000 fb5c 	bl	80011cc <HAL_ADC_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8000b1a:	f000 f8cc 	bl	8000cb6 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b22:	2301      	movs	r3, #1
 8000b24:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b26:	2300      	movs	r3, #0
 8000b28:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4806      	ldr	r0, [pc, #24]	@ (8000b48 <MX_ADC2_Init+0x9c>)
 8000b30:	f000 fd2e 	bl	8001590 <HAL_ADC_ConfigChannel>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 8000b3a:	f000 f8bc 	bl	8000cb6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200000f0 	.word	0x200000f0
 8000b4c:	40012100 	.word	0x40012100
 8000b50:	0f000001 	.word	0x0f000001

08000b54 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b58:	4b12      	ldr	r3, [pc, #72]	@ (8000ba4 <MX_I2C2_Init+0x50>)
 8000b5a:	4a13      	ldr	r2, [pc, #76]	@ (8000ba8 <MX_I2C2_Init+0x54>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000b5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ba4 <MX_I2C2_Init+0x50>)
 8000b60:	4a12      	ldr	r2, [pc, #72]	@ (8000bac <MX_I2C2_Init+0x58>)
 8000b62:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba4 <MX_I2C2_Init+0x50>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba4 <MX_I2C2_Init+0x50>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <MX_I2C2_Init+0x50>)
 8000b72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b76:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba4 <MX_I2C2_Init+0x50>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <MX_I2C2_Init+0x50>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b84:	4b07      	ldr	r3, [pc, #28]	@ (8000ba4 <MX_I2C2_Init+0x50>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <MX_I2C2_Init+0x50>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b90:	4804      	ldr	r0, [pc, #16]	@ (8000ba4 <MX_I2C2_Init+0x50>)
 8000b92:	f001 f999 	bl	8001ec8 <HAL_I2C_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b9c:	f000 f88b 	bl	8000cb6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000138 	.word	0x20000138
 8000ba8:	40005800 	.word	0x40005800
 8000bac:	000186a0 	.word	0x000186a0

08000bb0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb6:	463b      	mov	r3, r7
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000bbe:	4b15      	ldr	r3, [pc, #84]	@ (8000c14 <MX_TIM6_Init+0x64>)
 8000bc0:	4a15      	ldr	r2, [pc, #84]	@ (8000c18 <MX_TIM6_Init+0x68>)
 8000bc2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72-1;
 8000bc4:	4b13      	ldr	r3, [pc, #76]	@ (8000c14 <MX_TIM6_Init+0x64>)
 8000bc6:	2247      	movs	r2, #71	@ 0x47
 8000bc8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bca:	4b12      	ldr	r3, [pc, #72]	@ (8000c14 <MX_TIM6_Init+0x64>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xFFFF-1;
 8000bd0:	4b10      	ldr	r3, [pc, #64]	@ (8000c14 <MX_TIM6_Init+0x64>)
 8000bd2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000bd6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c14 <MX_TIM6_Init+0x64>)
 8000bda:	2280      	movs	r2, #128	@ 0x80
 8000bdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000bde:	480d      	ldr	r0, [pc, #52]	@ (8000c14 <MX_TIM6_Init+0x64>)
 8000be0:	f002 fac6 	bl	8003170 <HAL_TIM_Base_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000bea:	f000 f864 	bl	8000cb6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000bf6:	463b      	mov	r3, r7
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4806      	ldr	r0, [pc, #24]	@ (8000c14 <MX_TIM6_Init+0x64>)
 8000bfc:	f002 fd36 	bl	800366c <HAL_TIMEx_MasterConfigSynchronization>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000c06:	f000 f856 	bl	8000cb6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	2000018c 	.word	0x2000018c
 8000c18:	40001000 	.word	0x40001000

08000c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	4b17      	ldr	r3, [pc, #92]	@ (8000c84 <MX_GPIO_Init+0x68>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	4a16      	ldr	r2, [pc, #88]	@ (8000c84 <MX_GPIO_Init+0x68>)
 8000c2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c32:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <MX_GPIO_Init+0x68>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	4b10      	ldr	r3, [pc, #64]	@ (8000c84 <MX_GPIO_Init+0x68>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	4a0f      	ldr	r2, [pc, #60]	@ (8000c84 <MX_GPIO_Init+0x68>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c84 <MX_GPIO_Init+0x68>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	4b09      	ldr	r3, [pc, #36]	@ (8000c84 <MX_GPIO_Init+0x68>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	4a08      	ldr	r2, [pc, #32]	@ (8000c84 <MX_GPIO_Init+0x68>)
 8000c64:	f043 0302 	orr.w	r3, r3, #2
 8000c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6a:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <MX_GPIO_Init+0x68>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c76:	bf00      	nop
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800

08000c88 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c90:	2001      	movs	r0, #1
 8000c92:	f002 fe9b 	bl	80039cc <osDelay>
 8000c96:	e7fb      	b.n	8000c90 <StartDefaultTask+0x8>

08000c98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ca8:	d101      	bne.n	8000cae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000caa:	f000 fa4b 	bl	8001144 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cba:	b672      	cpsid	i
}
 8000cbc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cbe:	bf00      	nop
 8000cc0:	e7fd      	b.n	8000cbe <Error_Handler+0x8>
	...

08000cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	4b12      	ldr	r3, [pc, #72]	@ (8000d18 <HAL_MspInit+0x54>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd2:	4a11      	ldr	r2, [pc, #68]	@ (8000d18 <HAL_MspInit+0x54>)
 8000cd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cda:	4b0f      	ldr	r3, [pc, #60]	@ (8000d18 <HAL_MspInit+0x54>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	603b      	str	r3, [r7, #0]
 8000cea:	4b0b      	ldr	r3, [pc, #44]	@ (8000d18 <HAL_MspInit+0x54>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cee:	4a0a      	ldr	r2, [pc, #40]	@ (8000d18 <HAL_MspInit+0x54>)
 8000cf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cf6:	4b08      	ldr	r3, [pc, #32]	@ (8000d18 <HAL_MspInit+0x54>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d02:	2200      	movs	r2, #0
 8000d04:	210f      	movs	r1, #15
 8000d06:	f06f 0001 	mvn.w	r0, #1
 8000d0a:	f000 ff17 	bl	8001b3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40023800 	.word	0x40023800

08000d1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08c      	sub	sp, #48	@ 0x30
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a2e      	ldr	r2, [pc, #184]	@ (8000df4 <HAL_ADC_MspInit+0xd8>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d128      	bne.n	8000d90 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61bb      	str	r3, [r7, #24]
 8000d42:	4b2d      	ldr	r3, [pc, #180]	@ (8000df8 <HAL_ADC_MspInit+0xdc>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d46:	4a2c      	ldr	r2, [pc, #176]	@ (8000df8 <HAL_ADC_MspInit+0xdc>)
 8000d48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000df8 <HAL_ADC_MspInit+0xdc>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d56:	61bb      	str	r3, [r7, #24]
 8000d58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
 8000d5e:	4b26      	ldr	r3, [pc, #152]	@ (8000df8 <HAL_ADC_MspInit+0xdc>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	4a25      	ldr	r2, [pc, #148]	@ (8000df8 <HAL_ADC_MspInit+0xdc>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6a:	4b23      	ldr	r3, [pc, #140]	@ (8000df8 <HAL_ADC_MspInit+0xdc>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	617b      	str	r3, [r7, #20]
 8000d74:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d76:	2302      	movs	r3, #2
 8000d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	f107 031c 	add.w	r3, r7, #28
 8000d86:	4619      	mov	r1, r3
 8000d88:	481c      	ldr	r0, [pc, #112]	@ (8000dfc <HAL_ADC_MspInit+0xe0>)
 8000d8a:	f000 ff01 	bl	8001b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000d8e:	e02c      	b.n	8000dea <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a1a      	ldr	r2, [pc, #104]	@ (8000e00 <HAL_ADC_MspInit+0xe4>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d127      	bne.n	8000dea <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	4b16      	ldr	r3, [pc, #88]	@ (8000df8 <HAL_ADC_MspInit+0xdc>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da2:	4a15      	ldr	r2, [pc, #84]	@ (8000df8 <HAL_ADC_MspInit+0xdc>)
 8000da4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000da8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000daa:	4b13      	ldr	r3, [pc, #76]	@ (8000df8 <HAL_ADC_MspInit+0xdc>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b0f      	ldr	r3, [pc, #60]	@ (8000df8 <HAL_ADC_MspInit+0xdc>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	4a0e      	ldr	r2, [pc, #56]	@ (8000df8 <HAL_ADC_MspInit+0xdc>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000df8 <HAL_ADC_MspInit+0xdc>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dd2:	2304      	movs	r3, #4
 8000dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	f107 031c 	add.w	r3, r7, #28
 8000de2:	4619      	mov	r1, r3
 8000de4:	4805      	ldr	r0, [pc, #20]	@ (8000dfc <HAL_ADC_MspInit+0xe0>)
 8000de6:	f000 fed3 	bl	8001b90 <HAL_GPIO_Init>
}
 8000dea:	bf00      	nop
 8000dec:	3730      	adds	r7, #48	@ 0x30
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40012000 	.word	0x40012000
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020000 	.word	0x40020000
 8000e00:	40012100 	.word	0x40012100

08000e04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	@ 0x28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a19      	ldr	r2, [pc, #100]	@ (8000e88 <HAL_I2C_MspInit+0x84>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d12c      	bne.n	8000e80 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	4b18      	ldr	r3, [pc, #96]	@ (8000e8c <HAL_I2C_MspInit+0x88>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	4a17      	ldr	r2, [pc, #92]	@ (8000e8c <HAL_I2C_MspInit+0x88>)
 8000e30:	f043 0302 	orr.w	r3, r3, #2
 8000e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e36:	4b15      	ldr	r3, [pc, #84]	@ (8000e8c <HAL_I2C_MspInit+0x88>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e42:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e48:	2312      	movs	r3, #18
 8000e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e54:	2304      	movs	r3, #4
 8000e56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	480c      	ldr	r0, [pc, #48]	@ (8000e90 <HAL_I2C_MspInit+0x8c>)
 8000e60:	f000 fe96 	bl	8001b90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	4b08      	ldr	r3, [pc, #32]	@ (8000e8c <HAL_I2C_MspInit+0x88>)
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6c:	4a07      	ldr	r2, [pc, #28]	@ (8000e8c <HAL_I2C_MspInit+0x88>)
 8000e6e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e72:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e74:	4b05      	ldr	r3, [pc, #20]	@ (8000e8c <HAL_I2C_MspInit+0x88>)
 8000e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000e80:	bf00      	nop
 8000e82:	3728      	adds	r7, #40	@ 0x28
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40005800 	.word	0x40005800
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020400 	.word	0x40020400

08000e94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0b      	ldr	r2, [pc, #44]	@ (8000ed0 <HAL_TIM_Base_MspInit+0x3c>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d10d      	bne.n	8000ec2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed4 <HAL_TIM_Base_MspInit+0x40>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eae:	4a09      	ldr	r2, [pc, #36]	@ (8000ed4 <HAL_TIM_Base_MspInit+0x40>)
 8000eb0:	f043 0310 	orr.w	r3, r3, #16
 8000eb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eb6:	4b07      	ldr	r3, [pc, #28]	@ (8000ed4 <HAL_TIM_Base_MspInit+0x40>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eba:	f003 0310 	and.w	r3, r3, #16
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000ec2:	bf00      	nop
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	40001000 	.word	0x40001000
 8000ed4:	40023800 	.word	0x40023800

08000ed8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08e      	sub	sp, #56	@ 0x38
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	4b34      	ldr	r3, [pc, #208]	@ (8000fc0 <HAL_InitTick+0xe8>)
 8000eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef0:	4a33      	ldr	r2, [pc, #204]	@ (8000fc0 <HAL_InitTick+0xe8>)
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ef8:	4b31      	ldr	r3, [pc, #196]	@ (8000fc0 <HAL_InitTick+0xe8>)
 8000efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f04:	f107 0210 	add.w	r2, r7, #16
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	4611      	mov	r1, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f002 f8fc 	bl	800310c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f14:	6a3b      	ldr	r3, [r7, #32]
 8000f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d103      	bne.n	8000f26 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f1e:	f002 f8e1 	bl	80030e4 <HAL_RCC_GetPCLK1Freq>
 8000f22:	6378      	str	r0, [r7, #52]	@ 0x34
 8000f24:	e004      	b.n	8000f30 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f26:	f002 f8dd 	bl	80030e4 <HAL_RCC_GetPCLK1Freq>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f32:	4a24      	ldr	r2, [pc, #144]	@ (8000fc4 <HAL_InitTick+0xec>)
 8000f34:	fba2 2303 	umull	r2, r3, r2, r3
 8000f38:	0c9b      	lsrs	r3, r3, #18
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000f3e:	4b22      	ldr	r3, [pc, #136]	@ (8000fc8 <HAL_InitTick+0xf0>)
 8000f40:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000f46:	4b20      	ldr	r3, [pc, #128]	@ (8000fc8 <HAL_InitTick+0xf0>)
 8000f48:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f4c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000f4e:	4a1e      	ldr	r2, [pc, #120]	@ (8000fc8 <HAL_InitTick+0xf0>)
 8000f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f52:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000f54:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc8 <HAL_InitTick+0xf0>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc8 <HAL_InitTick+0xf0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f60:	4b19      	ldr	r3, [pc, #100]	@ (8000fc8 <HAL_InitTick+0xf0>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000f66:	4818      	ldr	r0, [pc, #96]	@ (8000fc8 <HAL_InitTick+0xf0>)
 8000f68:	f002 f902 	bl	8003170 <HAL_TIM_Base_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000f72:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d11b      	bne.n	8000fb2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000f7a:	4813      	ldr	r0, [pc, #76]	@ (8000fc8 <HAL_InitTick+0xf0>)
 8000f7c:	f002 f948 	bl	8003210 <HAL_TIM_Base_Start_IT>
 8000f80:	4603      	mov	r3, r0
 8000f82:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000f86:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d111      	bne.n	8000fb2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f8e:	201c      	movs	r0, #28
 8000f90:	f000 fdf0 	bl	8001b74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b0f      	cmp	r3, #15
 8000f98:	d808      	bhi.n	8000fac <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	201c      	movs	r0, #28
 8000fa0:	f000 fdcc 	bl	8001b3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fa4:	4a09      	ldr	r2, [pc, #36]	@ (8000fcc <HAL_InitTick+0xf4>)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6013      	str	r3, [r2, #0]
 8000faa:	e002      	b.n	8000fb2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000fb2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3738      	adds	r7, #56	@ 0x38
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	431bde83 	.word	0x431bde83
 8000fc8:	200001e8 	.word	0x200001e8
 8000fcc:	20000004 	.word	0x20000004

08000fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <NMI_Handler+0x4>

08000fd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <HardFault_Handler+0x4>

08000fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <MemManage_Handler+0x4>

08000fe8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <BusFault_Handler+0x4>

08000ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <UsageFault_Handler+0x4>

08000ff8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800100c:	4802      	ldr	r0, [pc, #8]	@ (8001018 <TIM2_IRQHandler+0x10>)
 800100e:	f002 f96f 	bl	80032f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200001e8 	.word	0x200001e8

0800101c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001024:	4a14      	ldr	r2, [pc, #80]	@ (8001078 <_sbrk+0x5c>)
 8001026:	4b15      	ldr	r3, [pc, #84]	@ (800107c <_sbrk+0x60>)
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001030:	4b13      	ldr	r3, [pc, #76]	@ (8001080 <_sbrk+0x64>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d102      	bne.n	800103e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001038:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <_sbrk+0x64>)
 800103a:	4a12      	ldr	r2, [pc, #72]	@ (8001084 <_sbrk+0x68>)
 800103c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800103e:	4b10      	ldr	r3, [pc, #64]	@ (8001080 <_sbrk+0x64>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	429a      	cmp	r2, r3
 800104a:	d207      	bcs.n	800105c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800104c:	f005 fe5e 	bl	8006d0c <__errno>
 8001050:	4603      	mov	r3, r0
 8001052:	220c      	movs	r2, #12
 8001054:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001056:	f04f 33ff 	mov.w	r3, #4294967295
 800105a:	e009      	b.n	8001070 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800105c:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <_sbrk+0x64>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001062:	4b07      	ldr	r3, [pc, #28]	@ (8001080 <_sbrk+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	4a05      	ldr	r2, [pc, #20]	@ (8001080 <_sbrk+0x64>)
 800106c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800106e:	68fb      	ldr	r3, [r7, #12]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20020000 	.word	0x20020000
 800107c:	00000400 	.word	0x00000400
 8001080:	20000230 	.word	0x20000230
 8001084:	20004d68 	.word	0x20004d68

08001088 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800108c:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <SystemInit+0x20>)
 800108e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001092:	4a05      	ldr	r2, [pc, #20]	@ (80010a8 <SystemInit+0x20>)
 8001094:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001098:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010b0:	f7ff ffea 	bl	8001088 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010b4:	480c      	ldr	r0, [pc, #48]	@ (80010e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010b6:	490d      	ldr	r1, [pc, #52]	@ (80010ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010b8:	4a0d      	ldr	r2, [pc, #52]	@ (80010f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010bc:	e002      	b.n	80010c4 <LoopCopyDataInit>

080010be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c2:	3304      	adds	r3, #4

080010c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c8:	d3f9      	bcc.n	80010be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ca:	4a0a      	ldr	r2, [pc, #40]	@ (80010f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010cc:	4c0a      	ldr	r4, [pc, #40]	@ (80010f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d0:	e001      	b.n	80010d6 <LoopFillZerobss>

080010d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d4:	3204      	adds	r2, #4

080010d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d8:	d3fb      	bcc.n	80010d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010da:	f005 fe1d 	bl	8006d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010de:	f7ff fbcd 	bl	800087c <main>
  bx  lr    
 80010e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ec:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80010f0:	0800777c 	.word	0x0800777c
  ldr r2, =_sbss
 80010f4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80010f8:	20004d68 	.word	0x20004d68

080010fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010fc:	e7fe      	b.n	80010fc <ADC_IRQHandler>
	...

08001100 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001104:	4b0e      	ldr	r3, [pc, #56]	@ (8001140 <HAL_Init+0x40>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a0d      	ldr	r2, [pc, #52]	@ (8001140 <HAL_Init+0x40>)
 800110a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800110e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001110:	4b0b      	ldr	r3, [pc, #44]	@ (8001140 <HAL_Init+0x40>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a0a      	ldr	r2, [pc, #40]	@ (8001140 <HAL_Init+0x40>)
 8001116:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800111a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800111c:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <HAL_Init+0x40>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a07      	ldr	r2, [pc, #28]	@ (8001140 <HAL_Init+0x40>)
 8001122:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001126:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001128:	2003      	movs	r0, #3
 800112a:	f000 fcfc 	bl	8001b26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800112e:	200f      	movs	r0, #15
 8001130:	f7ff fed2 	bl	8000ed8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001134:	f7ff fdc6 	bl	8000cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40023c00 	.word	0x40023c00

08001144 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001148:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <HAL_IncTick+0x20>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <HAL_IncTick+0x24>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4413      	add	r3, r2
 8001154:	4a04      	ldr	r2, [pc, #16]	@ (8001168 <HAL_IncTick+0x24>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	20000008 	.word	0x20000008
 8001168:	20000234 	.word	0x20000234

0800116c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return uwTick;
 8001170:	4b03      	ldr	r3, [pc, #12]	@ (8001180 <HAL_GetTick+0x14>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000234 	.word	0x20000234

08001184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800118c:	f7ff ffee 	bl	800116c <HAL_GetTick>
 8001190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800119c:	d005      	beq.n	80011aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119e:	4b0a      	ldr	r3, [pc, #40]	@ (80011c8 <HAL_Delay+0x44>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	461a      	mov	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4413      	add	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011aa:	bf00      	nop
 80011ac:	f7ff ffde 	bl	800116c <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d8f7      	bhi.n	80011ac <HAL_Delay+0x28>
  {
  }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000008 	.word	0x20000008

080011cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e033      	b.n	800124a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d109      	bne.n	80011fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff fd96 	bl	8000d1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001202:	f003 0310 	and.w	r3, r3, #16
 8001206:	2b00      	cmp	r3, #0
 8001208:	d118      	bne.n	800123c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001212:	f023 0302 	bic.w	r3, r3, #2
 8001216:	f043 0202 	orr.w	r2, r3, #2
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 fad8 	bl	80017d4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122e:	f023 0303 	bic.w	r3, r3, #3
 8001232:	f043 0201 	orr.w	r2, r3, #1
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	641a      	str	r2, [r3, #64]	@ 0x40
 800123a:	e001      	b.n	8001240 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001248:	7bfb      	ldrb	r3, [r7, #15]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800125c:	2300      	movs	r3, #0
 800125e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001266:	2b01      	cmp	r3, #1
 8001268:	d101      	bne.n	800126e <HAL_ADC_Start+0x1a>
 800126a:	2302      	movs	r3, #2
 800126c:	e0b2      	b.n	80013d4 <HAL_ADC_Start+0x180>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2201      	movs	r2, #1
 8001272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	2b01      	cmp	r3, #1
 8001282:	d018      	beq.n	80012b6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	689a      	ldr	r2, [r3, #8]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f042 0201 	orr.w	r2, r2, #1
 8001292:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001294:	4b52      	ldr	r3, [pc, #328]	@ (80013e0 <HAL_ADC_Start+0x18c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a52      	ldr	r2, [pc, #328]	@ (80013e4 <HAL_ADC_Start+0x190>)
 800129a:	fba2 2303 	umull	r2, r3, r2, r3
 800129e:	0c9a      	lsrs	r2, r3, #18
 80012a0:	4613      	mov	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4413      	add	r3, r2
 80012a6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80012a8:	e002      	b.n	80012b0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	3b01      	subs	r3, #1
 80012ae:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f9      	bne.n	80012aa <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d17a      	bne.n	80013ba <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80012cc:	f023 0301 	bic.w	r3, r3, #1
 80012d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d007      	beq.n	80012f6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80012ee:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001302:	d106      	bne.n	8001312 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001308:	f023 0206 	bic.w	r2, r3, #6
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001310:	e002      	b.n	8001318 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001320:	4b31      	ldr	r3, [pc, #196]	@ (80013e8 <HAL_ADC_Start+0x194>)
 8001322:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800132c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 031f 	and.w	r3, r3, #31
 8001336:	2b00      	cmp	r3, #0
 8001338:	d12a      	bne.n	8001390 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a2b      	ldr	r2, [pc, #172]	@ (80013ec <HAL_ADC_Start+0x198>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d015      	beq.n	8001370 <HAL_ADC_Start+0x11c>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a29      	ldr	r2, [pc, #164]	@ (80013f0 <HAL_ADC_Start+0x19c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d105      	bne.n	800135a <HAL_ADC_Start+0x106>
 800134e:	4b26      	ldr	r3, [pc, #152]	@ (80013e8 <HAL_ADC_Start+0x194>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 031f 	and.w	r3, r3, #31
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00a      	beq.n	8001370 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a25      	ldr	r2, [pc, #148]	@ (80013f4 <HAL_ADC_Start+0x1a0>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d136      	bne.n	80013d2 <HAL_ADC_Start+0x17e>
 8001364:	4b20      	ldr	r3, [pc, #128]	@ (80013e8 <HAL_ADC_Start+0x194>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 0310 	and.w	r3, r3, #16
 800136c:	2b00      	cmp	r3, #0
 800136e:	d130      	bne.n	80013d2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d129      	bne.n	80013d2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	689a      	ldr	r2, [r3, #8]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	e020      	b.n	80013d2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a15      	ldr	r2, [pc, #84]	@ (80013ec <HAL_ADC_Start+0x198>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d11b      	bne.n	80013d2 <HAL_ADC_Start+0x17e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d114      	bne.n	80013d2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	e00b      	b.n	80013d2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013be:	f043 0210 	orr.w	r2, r3, #16
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ca:	f043 0201 	orr.w	r2, r3, #1
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	20000000 	.word	0x20000000
 80013e4:	431bde83 	.word	0x431bde83
 80013e8:	40012300 	.word	0x40012300
 80013ec:	40012000 	.word	0x40012000
 80013f0:	40012100 	.word	0x40012100
 80013f4:	40012200 	.word	0x40012200

080013f8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001406:	2b01      	cmp	r3, #1
 8001408:	d101      	bne.n	800140e <HAL_ADC_Stop+0x16>
 800140a:	2302      	movs	r3, #2
 800140c:	e021      	b.n	8001452 <HAL_ADC_Stop+0x5a>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2201      	movs	r2, #1
 8001412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 0201 	bic.w	r2, r2, #1
 8001424:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	2b00      	cmp	r3, #0
 8001432:	d109      	bne.n	8001448 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001438:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800143c:	f023 0301 	bic.w	r3, r3, #1
 8001440:	f043 0201 	orr.w	r2, r3, #1
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b084      	sub	sp, #16
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
 8001466:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001476:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800147a:	d113      	bne.n	80014a4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001486:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800148a:	d10b      	bne.n	80014a4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001490:	f043 0220 	orr.w	r2, r3, #32
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e063      	b.n	800156c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80014a4:	f7ff fe62 	bl	800116c <HAL_GetTick>
 80014a8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014aa:	e021      	b.n	80014f0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b2:	d01d      	beq.n	80014f0 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d007      	beq.n	80014ca <HAL_ADC_PollForConversion+0x6c>
 80014ba:	f7ff fe57 	bl	800116c <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d212      	bcs.n	80014f0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d00b      	beq.n	80014f0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014dc:	f043 0204 	orr.w	r2, r3, #4
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e03d      	b.n	800156c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d1d6      	bne.n	80014ac <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f06f 0212 	mvn.w	r2, #18
 8001506:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d123      	bne.n	800156a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001526:	2b00      	cmp	r3, #0
 8001528:	d11f      	bne.n	800156a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001530:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001534:	2b00      	cmp	r3, #0
 8001536:	d006      	beq.n	8001546 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001542:	2b00      	cmp	r3, #0
 8001544:	d111      	bne.n	800156a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001556:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d105      	bne.n	800156a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001562:	f043 0201 	orr.w	r2, r3, #1
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001582:	4618      	mov	r0, r3
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
	...

08001590 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800159a:	2300      	movs	r3, #0
 800159c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d101      	bne.n	80015ac <HAL_ADC_ConfigChannel+0x1c>
 80015a8:	2302      	movs	r3, #2
 80015aa:	e105      	b.n	80017b8 <HAL_ADC_ConfigChannel+0x228>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b09      	cmp	r3, #9
 80015ba:	d925      	bls.n	8001608 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68d9      	ldr	r1, [r3, #12]
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	461a      	mov	r2, r3
 80015ca:	4613      	mov	r3, r2
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	4413      	add	r3, r2
 80015d0:	3b1e      	subs	r3, #30
 80015d2:	2207      	movs	r2, #7
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43da      	mvns	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	400a      	ands	r2, r1
 80015e0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	68d9      	ldr	r1, [r3, #12]
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	4618      	mov	r0, r3
 80015f4:	4603      	mov	r3, r0
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4403      	add	r3, r0
 80015fa:	3b1e      	subs	r3, #30
 80015fc:	409a      	lsls	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	430a      	orrs	r2, r1
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	e022      	b.n	800164e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6919      	ldr	r1, [r3, #16]
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	b29b      	uxth	r3, r3
 8001614:	461a      	mov	r2, r3
 8001616:	4613      	mov	r3, r2
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	4413      	add	r3, r2
 800161c:	2207      	movs	r2, #7
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43da      	mvns	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	400a      	ands	r2, r1
 800162a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6919      	ldr	r1, [r3, #16]
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	689a      	ldr	r2, [r3, #8]
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	b29b      	uxth	r3, r3
 800163c:	4618      	mov	r0, r3
 800163e:	4603      	mov	r3, r0
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4403      	add	r3, r0
 8001644:	409a      	lsls	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	430a      	orrs	r2, r1
 800164c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b06      	cmp	r3, #6
 8001654:	d824      	bhi.n	80016a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685a      	ldr	r2, [r3, #4]
 8001660:	4613      	mov	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	3b05      	subs	r3, #5
 8001668:	221f      	movs	r2, #31
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43da      	mvns	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	400a      	ands	r2, r1
 8001676:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	b29b      	uxth	r3, r3
 8001684:	4618      	mov	r0, r3
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	4613      	mov	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	3b05      	subs	r3, #5
 8001692:	fa00 f203 	lsl.w	r2, r0, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	635a      	str	r2, [r3, #52]	@ 0x34
 800169e:	e04c      	b.n	800173a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b0c      	cmp	r3, #12
 80016a6:	d824      	bhi.n	80016f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	3b23      	subs	r3, #35	@ 0x23
 80016ba:	221f      	movs	r2, #31
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43da      	mvns	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	400a      	ands	r2, r1
 80016c8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	4613      	mov	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	3b23      	subs	r3, #35	@ 0x23
 80016e4:	fa00 f203 	lsl.w	r2, r0, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80016f0:	e023      	b.n	800173a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	3b41      	subs	r3, #65	@ 0x41
 8001704:	221f      	movs	r2, #31
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43da      	mvns	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	400a      	ands	r2, r1
 8001712:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	b29b      	uxth	r3, r3
 8001720:	4618      	mov	r0, r3
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	3b41      	subs	r3, #65	@ 0x41
 800172e:	fa00 f203 	lsl.w	r2, r0, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	430a      	orrs	r2, r1
 8001738:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800173a:	4b22      	ldr	r3, [pc, #136]	@ (80017c4 <HAL_ADC_ConfigChannel+0x234>)
 800173c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a21      	ldr	r2, [pc, #132]	@ (80017c8 <HAL_ADC_ConfigChannel+0x238>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d109      	bne.n	800175c <HAL_ADC_ConfigChannel+0x1cc>
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b12      	cmp	r3, #18
 800174e:	d105      	bne.n	800175c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a19      	ldr	r2, [pc, #100]	@ (80017c8 <HAL_ADC_ConfigChannel+0x238>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d123      	bne.n	80017ae <HAL_ADC_ConfigChannel+0x21e>
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b10      	cmp	r3, #16
 800176c:	d003      	beq.n	8001776 <HAL_ADC_ConfigChannel+0x1e6>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b11      	cmp	r3, #17
 8001774:	d11b      	bne.n	80017ae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b10      	cmp	r3, #16
 8001788:	d111      	bne.n	80017ae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800178a:	4b10      	ldr	r3, [pc, #64]	@ (80017cc <HAL_ADC_ConfigChannel+0x23c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a10      	ldr	r2, [pc, #64]	@ (80017d0 <HAL_ADC_ConfigChannel+0x240>)
 8001790:	fba2 2303 	umull	r2, r3, r2, r3
 8001794:	0c9a      	lsrs	r2, r3, #18
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017a0:	e002      	b.n	80017a8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	3b01      	subs	r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f9      	bne.n	80017a2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	40012300 	.word	0x40012300
 80017c8:	40012000 	.word	0x40012000
 80017cc:	20000000 	.word	0x20000000
 80017d0:	431bde83 	.word	0x431bde83

080017d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017dc:	4b79      	ldr	r3, [pc, #484]	@ (80019c4 <ADC_Init+0x1f0>)
 80017de:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	431a      	orrs	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	685a      	ldr	r2, [r3, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001808:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6859      	ldr	r1, [r3, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	021a      	lsls	r2, r3, #8
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800182c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6859      	ldr	r1, [r3, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	430a      	orrs	r2, r1
 800183e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800184e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6899      	ldr	r1, [r3, #8]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68da      	ldr	r2, [r3, #12]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001866:	4a58      	ldr	r2, [pc, #352]	@ (80019c8 <ADC_Init+0x1f4>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d022      	beq.n	80018b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800187a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6899      	ldr	r1, [r3, #8]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	430a      	orrs	r2, r1
 800188c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800189c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6899      	ldr	r1, [r3, #8]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	430a      	orrs	r2, r1
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	e00f      	b.n	80018d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80018d0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 0202 	bic.w	r2, r2, #2
 80018e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6899      	ldr	r1, [r3, #8]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	7e1b      	ldrb	r3, [r3, #24]
 80018ec:	005a      	lsls	r2, r3, #1
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d01b      	beq.n	8001938 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800190e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800191e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6859      	ldr	r1, [r3, #4]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800192a:	3b01      	subs	r3, #1
 800192c:	035a      	lsls	r2, r3, #13
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	430a      	orrs	r2, r1
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	e007      	b.n	8001948 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001946:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001956:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	3b01      	subs	r3, #1
 8001964:	051a      	lsls	r2, r3, #20
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800197c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6899      	ldr	r1, [r3, #8]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800198a:	025a      	lsls	r2, r3, #9
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689a      	ldr	r2, [r3, #8]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6899      	ldr	r1, [r3, #8]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	029a      	lsls	r2, r3, #10
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	609a      	str	r2, [r3, #8]
}
 80019b8:	bf00      	nop
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	40012300 	.word	0x40012300
 80019c8:	0f000001 	.word	0x0f000001

080019cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019e8:	4013      	ands	r3, r2
 80019ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fe:	4a04      	ldr	r2, [pc, #16]	@ (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	60d3      	str	r3, [r2, #12]
}
 8001a04:	bf00      	nop
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a18:	4b04      	ldr	r3, [pc, #16]	@ (8001a2c <__NVIC_GetPriorityGrouping+0x18>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	0a1b      	lsrs	r3, r3, #8
 8001a1e:	f003 0307 	and.w	r3, r3, #7
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	db0b      	blt.n	8001a5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	f003 021f 	and.w	r2, r3, #31
 8001a48:	4907      	ldr	r1, [pc, #28]	@ (8001a68 <__NVIC_EnableIRQ+0x38>)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	095b      	lsrs	r3, r3, #5
 8001a50:	2001      	movs	r0, #1
 8001a52:	fa00 f202 	lsl.w	r2, r0, r2
 8001a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000e100 	.word	0xe000e100

08001a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	6039      	str	r1, [r7, #0]
 8001a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	db0a      	blt.n	8001a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	490c      	ldr	r1, [pc, #48]	@ (8001ab8 <__NVIC_SetPriority+0x4c>)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	0112      	lsls	r2, r2, #4
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	440b      	add	r3, r1
 8001a90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a94:	e00a      	b.n	8001aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	4908      	ldr	r1, [pc, #32]	@ (8001abc <__NVIC_SetPriority+0x50>)
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	3b04      	subs	r3, #4
 8001aa4:	0112      	lsls	r2, r2, #4
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	761a      	strb	r2, [r3, #24]
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000e100 	.word	0xe000e100
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b089      	sub	sp, #36	@ 0x24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f1c3 0307 	rsb	r3, r3, #7
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	bf28      	it	cs
 8001ade:	2304      	movcs	r3, #4
 8001ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	2b06      	cmp	r3, #6
 8001ae8:	d902      	bls.n	8001af0 <NVIC_EncodePriority+0x30>
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3b03      	subs	r3, #3
 8001aee:	e000      	b.n	8001af2 <NVIC_EncodePriority+0x32>
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af4:	f04f 32ff 	mov.w	r2, #4294967295
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43da      	mvns	r2, r3
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	401a      	ands	r2, r3
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b08:	f04f 31ff 	mov.w	r1, #4294967295
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b12:	43d9      	mvns	r1, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b18:	4313      	orrs	r3, r2
         );
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3724      	adds	r7, #36	@ 0x24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff ff4c 	bl	80019cc <__NVIC_SetPriorityGrouping>
}
 8001b34:	bf00      	nop
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
 8001b48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b4e:	f7ff ff61 	bl	8001a14 <__NVIC_GetPriorityGrouping>
 8001b52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	68b9      	ldr	r1, [r7, #8]
 8001b58:	6978      	ldr	r0, [r7, #20]
 8001b5a:	f7ff ffb1 	bl	8001ac0 <NVIC_EncodePriority>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b64:	4611      	mov	r1, r2
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff ff80 	bl	8001a6c <__NVIC_SetPriority>
}
 8001b6c:	bf00      	nop
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff ff54 	bl	8001a30 <__NVIC_EnableIRQ>
}
 8001b88:	bf00      	nop
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b089      	sub	sp, #36	@ 0x24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
 8001baa:	e16b      	b.n	8001e84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bac:	2201      	movs	r2, #1
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	f040 815a 	bne.w	8001e7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d005      	beq.n	8001be2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d130      	bne.n	8001c44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	2203      	movs	r2, #3
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	68da      	ldr	r2, [r3, #12]
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c18:	2201      	movs	r2, #1
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4013      	ands	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	091b      	lsrs	r3, r3, #4
 8001c2e:	f003 0201 	and.w	r2, r3, #1
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	2b03      	cmp	r3, #3
 8001c4e:	d017      	beq.n	8001c80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 0303 	and.w	r3, r3, #3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d123      	bne.n	8001cd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	08da      	lsrs	r2, r3, #3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3208      	adds	r2, #8
 8001c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	220f      	movs	r2, #15
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	691a      	ldr	r2, [r3, #16]
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	08da      	lsrs	r2, r3, #3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	3208      	adds	r2, #8
 8001cce:	69b9      	ldr	r1, [r7, #24]
 8001cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	2203      	movs	r2, #3
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 0203 	and.w	r2, r3, #3
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f000 80b4 	beq.w	8001e7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	4b60      	ldr	r3, [pc, #384]	@ (8001e9c <HAL_GPIO_Init+0x30c>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1e:	4a5f      	ldr	r2, [pc, #380]	@ (8001e9c <HAL_GPIO_Init+0x30c>)
 8001d20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d26:	4b5d      	ldr	r3, [pc, #372]	@ (8001e9c <HAL_GPIO_Init+0x30c>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d32:	4a5b      	ldr	r2, [pc, #364]	@ (8001ea0 <HAL_GPIO_Init+0x310>)
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	089b      	lsrs	r3, r3, #2
 8001d38:	3302      	adds	r3, #2
 8001d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	220f      	movs	r2, #15
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4013      	ands	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a52      	ldr	r2, [pc, #328]	@ (8001ea4 <HAL_GPIO_Init+0x314>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d02b      	beq.n	8001db6 <HAL_GPIO_Init+0x226>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a51      	ldr	r2, [pc, #324]	@ (8001ea8 <HAL_GPIO_Init+0x318>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d025      	beq.n	8001db2 <HAL_GPIO_Init+0x222>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a50      	ldr	r2, [pc, #320]	@ (8001eac <HAL_GPIO_Init+0x31c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d01f      	beq.n	8001dae <HAL_GPIO_Init+0x21e>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a4f      	ldr	r2, [pc, #316]	@ (8001eb0 <HAL_GPIO_Init+0x320>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d019      	beq.n	8001daa <HAL_GPIO_Init+0x21a>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a4e      	ldr	r2, [pc, #312]	@ (8001eb4 <HAL_GPIO_Init+0x324>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d013      	beq.n	8001da6 <HAL_GPIO_Init+0x216>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a4d      	ldr	r2, [pc, #308]	@ (8001eb8 <HAL_GPIO_Init+0x328>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d00d      	beq.n	8001da2 <HAL_GPIO_Init+0x212>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a4c      	ldr	r2, [pc, #304]	@ (8001ebc <HAL_GPIO_Init+0x32c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d007      	beq.n	8001d9e <HAL_GPIO_Init+0x20e>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a4b      	ldr	r2, [pc, #300]	@ (8001ec0 <HAL_GPIO_Init+0x330>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d101      	bne.n	8001d9a <HAL_GPIO_Init+0x20a>
 8001d96:	2307      	movs	r3, #7
 8001d98:	e00e      	b.n	8001db8 <HAL_GPIO_Init+0x228>
 8001d9a:	2308      	movs	r3, #8
 8001d9c:	e00c      	b.n	8001db8 <HAL_GPIO_Init+0x228>
 8001d9e:	2306      	movs	r3, #6
 8001da0:	e00a      	b.n	8001db8 <HAL_GPIO_Init+0x228>
 8001da2:	2305      	movs	r3, #5
 8001da4:	e008      	b.n	8001db8 <HAL_GPIO_Init+0x228>
 8001da6:	2304      	movs	r3, #4
 8001da8:	e006      	b.n	8001db8 <HAL_GPIO_Init+0x228>
 8001daa:	2303      	movs	r3, #3
 8001dac:	e004      	b.n	8001db8 <HAL_GPIO_Init+0x228>
 8001dae:	2302      	movs	r3, #2
 8001db0:	e002      	b.n	8001db8 <HAL_GPIO_Init+0x228>
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <HAL_GPIO_Init+0x228>
 8001db6:	2300      	movs	r3, #0
 8001db8:	69fa      	ldr	r2, [r7, #28]
 8001dba:	f002 0203 	and.w	r2, r2, #3
 8001dbe:	0092      	lsls	r2, r2, #2
 8001dc0:	4093      	lsls	r3, r2
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dc8:	4935      	ldr	r1, [pc, #212]	@ (8001ea0 <HAL_GPIO_Init+0x310>)
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	089b      	lsrs	r3, r3, #2
 8001dce:	3302      	adds	r3, #2
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dd6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ec4 <HAL_GPIO_Init+0x334>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dfa:	4a32      	ldr	r2, [pc, #200]	@ (8001ec4 <HAL_GPIO_Init+0x334>)
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e00:	4b30      	ldr	r3, [pc, #192]	@ (8001ec4 <HAL_GPIO_Init+0x334>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e24:	4a27      	ldr	r2, [pc, #156]	@ (8001ec4 <HAL_GPIO_Init+0x334>)
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e2a:	4b26      	ldr	r3, [pc, #152]	@ (8001ec4 <HAL_GPIO_Init+0x334>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e4e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ec4 <HAL_GPIO_Init+0x334>)
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e54:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec4 <HAL_GPIO_Init+0x334>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e78:	4a12      	ldr	r2, [pc, #72]	@ (8001ec4 <HAL_GPIO_Init+0x334>)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3301      	adds	r3, #1
 8001e82:	61fb      	str	r3, [r7, #28]
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	2b0f      	cmp	r3, #15
 8001e88:	f67f ae90 	bls.w	8001bac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
 8001e90:	3724      	adds	r7, #36	@ 0x24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40013800 	.word	0x40013800
 8001ea4:	40020000 	.word	0x40020000
 8001ea8:	40020400 	.word	0x40020400
 8001eac:	40020800 	.word	0x40020800
 8001eb0:	40020c00 	.word	0x40020c00
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40021400 	.word	0x40021400
 8001ebc:	40021800 	.word	0x40021800
 8001ec0:	40021c00 	.word	0x40021c00
 8001ec4:	40013c00 	.word	0x40013c00

08001ec8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e12b      	b.n	8002132 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d106      	bne.n	8001ef4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7fe ff88 	bl	8000e04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2224      	movs	r2, #36	@ 0x24
 8001ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0201 	bic.w	r2, r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f2c:	f001 f8da 	bl	80030e4 <HAL_RCC_GetPCLK1Freq>
 8001f30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	4a81      	ldr	r2, [pc, #516]	@ (800213c <HAL_I2C_Init+0x274>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d807      	bhi.n	8001f4c <HAL_I2C_Init+0x84>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4a80      	ldr	r2, [pc, #512]	@ (8002140 <HAL_I2C_Init+0x278>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	bf94      	ite	ls
 8001f44:	2301      	movls	r3, #1
 8001f46:	2300      	movhi	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	e006      	b.n	8001f5a <HAL_I2C_Init+0x92>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4a7d      	ldr	r2, [pc, #500]	@ (8002144 <HAL_I2C_Init+0x27c>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	bf94      	ite	ls
 8001f54:	2301      	movls	r3, #1
 8001f56:	2300      	movhi	r3, #0
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e0e7      	b.n	8002132 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	4a78      	ldr	r2, [pc, #480]	@ (8002148 <HAL_I2C_Init+0x280>)
 8001f66:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6a:	0c9b      	lsrs	r3, r3, #18
 8001f6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68ba      	ldr	r2, [r7, #8]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	4a6a      	ldr	r2, [pc, #424]	@ (800213c <HAL_I2C_Init+0x274>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d802      	bhi.n	8001f9c <HAL_I2C_Init+0xd4>
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	e009      	b.n	8001fb0 <HAL_I2C_Init+0xe8>
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001fa2:	fb02 f303 	mul.w	r3, r2, r3
 8001fa6:	4a69      	ldr	r2, [pc, #420]	@ (800214c <HAL_I2C_Init+0x284>)
 8001fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fac:	099b      	lsrs	r3, r3, #6
 8001fae:	3301      	adds	r3, #1
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	6812      	ldr	r2, [r2, #0]
 8001fb4:	430b      	orrs	r3, r1
 8001fb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001fc2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	495c      	ldr	r1, [pc, #368]	@ (800213c <HAL_I2C_Init+0x274>)
 8001fcc:	428b      	cmp	r3, r1
 8001fce:	d819      	bhi.n	8002004 <HAL_I2C_Init+0x13c>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	1e59      	subs	r1, r3, #1
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fde:	1c59      	adds	r1, r3, #1
 8001fe0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001fe4:	400b      	ands	r3, r1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00a      	beq.n	8002000 <HAL_I2C_Init+0x138>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	1e59      	subs	r1, r3, #1
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ffe:	e051      	b.n	80020a4 <HAL_I2C_Init+0x1dc>
 8002000:	2304      	movs	r3, #4
 8002002:	e04f      	b.n	80020a4 <HAL_I2C_Init+0x1dc>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d111      	bne.n	8002030 <HAL_I2C_Init+0x168>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	1e58      	subs	r0, r3, #1
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6859      	ldr	r1, [r3, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	440b      	add	r3, r1
 800201a:	fbb0 f3f3 	udiv	r3, r0, r3
 800201e:	3301      	adds	r3, #1
 8002020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002024:	2b00      	cmp	r3, #0
 8002026:	bf0c      	ite	eq
 8002028:	2301      	moveq	r3, #1
 800202a:	2300      	movne	r3, #0
 800202c:	b2db      	uxtb	r3, r3
 800202e:	e012      	b.n	8002056 <HAL_I2C_Init+0x18e>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1e58      	subs	r0, r3, #1
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6859      	ldr	r1, [r3, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	0099      	lsls	r1, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	fbb0 f3f3 	udiv	r3, r0, r3
 8002046:	3301      	adds	r3, #1
 8002048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800204c:	2b00      	cmp	r3, #0
 800204e:	bf0c      	ite	eq
 8002050:	2301      	moveq	r3, #1
 8002052:	2300      	movne	r3, #0
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_I2C_Init+0x196>
 800205a:	2301      	movs	r3, #1
 800205c:	e022      	b.n	80020a4 <HAL_I2C_Init+0x1dc>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10e      	bne.n	8002084 <HAL_I2C_Init+0x1bc>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	1e58      	subs	r0, r3, #1
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6859      	ldr	r1, [r3, #4]
 800206e:	460b      	mov	r3, r1
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	440b      	add	r3, r1
 8002074:	fbb0 f3f3 	udiv	r3, r0, r3
 8002078:	3301      	adds	r3, #1
 800207a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800207e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002082:	e00f      	b.n	80020a4 <HAL_I2C_Init+0x1dc>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	1e58      	subs	r0, r3, #1
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6859      	ldr	r1, [r3, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	0099      	lsls	r1, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	fbb0 f3f3 	udiv	r3, r0, r3
 800209a:	3301      	adds	r3, #1
 800209c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	6809      	ldr	r1, [r1, #0]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69da      	ldr	r2, [r3, #28]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80020d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6911      	ldr	r1, [r2, #16]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68d2      	ldr	r2, [r2, #12]
 80020de:	4311      	orrs	r1, r2
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	6812      	ldr	r2, [r2, #0]
 80020e4:	430b      	orrs	r3, r1
 80020e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695a      	ldr	r2, [r3, #20]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0201 	orr.w	r2, r2, #1
 8002112:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2220      	movs	r2, #32
 800211e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	000186a0 	.word	0x000186a0
 8002140:	001e847f 	.word	0x001e847f
 8002144:	003d08ff 	.word	0x003d08ff
 8002148:	431bde83 	.word	0x431bde83
 800214c:	10624dd3 	.word	0x10624dd3

08002150 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af02      	add	r7, sp, #8
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	461a      	mov	r2, r3
 800215c:	460b      	mov	r3, r1
 800215e:	817b      	strh	r3, [r7, #10]
 8002160:	4613      	mov	r3, r2
 8002162:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002164:	f7ff f802 	bl	800116c <HAL_GetTick>
 8002168:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b20      	cmp	r3, #32
 8002174:	f040 80e0 	bne.w	8002338 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	2319      	movs	r3, #25
 800217e:	2201      	movs	r2, #1
 8002180:	4970      	ldr	r1, [pc, #448]	@ (8002344 <HAL_I2C_Master_Transmit+0x1f4>)
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f000 f964 	bl	8002450 <I2C_WaitOnFlagUntilTimeout>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800218e:	2302      	movs	r3, #2
 8002190:	e0d3      	b.n	800233a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002198:	2b01      	cmp	r3, #1
 800219a:	d101      	bne.n	80021a0 <HAL_I2C_Master_Transmit+0x50>
 800219c:	2302      	movs	r3, #2
 800219e:	e0cc      	b.n	800233a <HAL_I2C_Master_Transmit+0x1ea>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d007      	beq.n	80021c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f042 0201 	orr.w	r2, r2, #1
 80021c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2221      	movs	r2, #33	@ 0x21
 80021da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2210      	movs	r2, #16
 80021e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	893a      	ldrh	r2, [r7, #8]
 80021f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4a50      	ldr	r2, [pc, #320]	@ (8002348 <HAL_I2C_Master_Transmit+0x1f8>)
 8002206:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002208:	8979      	ldrh	r1, [r7, #10]
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	6a3a      	ldr	r2, [r7, #32]
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f000 f89c 	bl	800234c <I2C_MasterRequestWrite>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e08d      	b.n	800233a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002234:	e066      	b.n	8002304 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	6a39      	ldr	r1, [r7, #32]
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 fa22 	bl	8002684 <I2C_WaitOnTXEFlagUntilTimeout>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00d      	beq.n	8002262 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224a:	2b04      	cmp	r3, #4
 800224c:	d107      	bne.n	800225e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800225c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e06b      	b.n	800233a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002266:	781a      	ldrb	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002272:	1c5a      	adds	r2, r3, #1
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800227c:	b29b      	uxth	r3, r3
 800227e:	3b01      	subs	r3, #1
 8002280:	b29a      	uxth	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800228a:	3b01      	subs	r3, #1
 800228c:	b29a      	uxth	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	f003 0304 	and.w	r3, r3, #4
 800229c:	2b04      	cmp	r3, #4
 800229e:	d11b      	bne.n	80022d8 <HAL_I2C_Master_Transmit+0x188>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d017      	beq.n	80022d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ac:	781a      	ldrb	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b8:	1c5a      	adds	r2, r3, #1
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022d0:	3b01      	subs	r3, #1
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	6a39      	ldr	r1, [r7, #32]
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 fa19 	bl	8002714 <I2C_WaitOnBTFFlagUntilTimeout>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00d      	beq.n	8002304 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d107      	bne.n	8002300 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e01a      	b.n	800233a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002308:	2b00      	cmp	r3, #0
 800230a:	d194      	bne.n	8002236 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800231a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2220      	movs	r2, #32
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002334:	2300      	movs	r3, #0
 8002336:	e000      	b.n	800233a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002338:	2302      	movs	r3, #2
  }
}
 800233a:	4618      	mov	r0, r3
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	00100002 	.word	0x00100002
 8002348:	ffff0000 	.word	0xffff0000

0800234c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af02      	add	r7, sp, #8
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	603b      	str	r3, [r7, #0]
 8002358:	460b      	mov	r3, r1
 800235a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002360:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2b08      	cmp	r3, #8
 8002366:	d006      	beq.n	8002376 <I2C_MasterRequestWrite+0x2a>
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d003      	beq.n	8002376 <I2C_MasterRequestWrite+0x2a>
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002374:	d108      	bne.n	8002388 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	e00b      	b.n	80023a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238c:	2b12      	cmp	r3, #18
 800238e:	d107      	bne.n	80023a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800239e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f000 f84f 	bl	8002450 <I2C_WaitOnFlagUntilTimeout>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00d      	beq.n	80023d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023c6:	d103      	bne.n	80023d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e035      	b.n	8002440 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80023dc:	d108      	bne.n	80023f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023de:	897b      	ldrh	r3, [r7, #10]
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	461a      	mov	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80023ec:	611a      	str	r2, [r3, #16]
 80023ee:	e01b      	b.n	8002428 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80023f0:	897b      	ldrh	r3, [r7, #10]
 80023f2:	11db      	asrs	r3, r3, #7
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	f003 0306 	and.w	r3, r3, #6
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	f063 030f 	orn	r3, r3, #15
 8002400:	b2da      	uxtb	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	490e      	ldr	r1, [pc, #56]	@ (8002448 <I2C_MasterRequestWrite+0xfc>)
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 f898 	bl	8002544 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e010      	b.n	8002440 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800241e:	897b      	ldrh	r3, [r7, #10]
 8002420:	b2da      	uxtb	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	4907      	ldr	r1, [pc, #28]	@ (800244c <I2C_MasterRequestWrite+0x100>)
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f000 f888 	bl	8002544 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	00010008 	.word	0x00010008
 800244c:	00010002 	.word	0x00010002

08002450 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	603b      	str	r3, [r7, #0]
 800245c:	4613      	mov	r3, r2
 800245e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002460:	e048      	b.n	80024f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002468:	d044      	beq.n	80024f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800246a:	f7fe fe7f 	bl	800116c <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d302      	bcc.n	8002480 <I2C_WaitOnFlagUntilTimeout+0x30>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d139      	bne.n	80024f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	0c1b      	lsrs	r3, r3, #16
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b01      	cmp	r3, #1
 8002488:	d10d      	bne.n	80024a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	43da      	mvns	r2, r3
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	4013      	ands	r3, r2
 8002496:	b29b      	uxth	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	bf0c      	ite	eq
 800249c:	2301      	moveq	r3, #1
 800249e:	2300      	movne	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	461a      	mov	r2, r3
 80024a4:	e00c      	b.n	80024c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	43da      	mvns	r2, r3
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	4013      	ands	r3, r2
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	bf0c      	ite	eq
 80024b8:	2301      	moveq	r3, #1
 80024ba:	2300      	movne	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	461a      	mov	r2, r3
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d116      	bne.n	80024f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2220      	movs	r2, #32
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e0:	f043 0220 	orr.w	r2, r3, #32
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e023      	b.n	800253c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	0c1b      	lsrs	r3, r3, #16
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d10d      	bne.n	800251a <I2C_WaitOnFlagUntilTimeout+0xca>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	43da      	mvns	r2, r3
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	4013      	ands	r3, r2
 800250a:	b29b      	uxth	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	bf0c      	ite	eq
 8002510:	2301      	moveq	r3, #1
 8002512:	2300      	movne	r3, #0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	461a      	mov	r2, r3
 8002518:	e00c      	b.n	8002534 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	43da      	mvns	r2, r3
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	4013      	ands	r3, r2
 8002526:	b29b      	uxth	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	bf0c      	ite	eq
 800252c:	2301      	moveq	r3, #1
 800252e:	2300      	movne	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	461a      	mov	r2, r3
 8002534:	79fb      	ldrb	r3, [r7, #7]
 8002536:	429a      	cmp	r2, r3
 8002538:	d093      	beq.n	8002462 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
 8002550:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002552:	e071      	b.n	8002638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800255e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002562:	d123      	bne.n	80025ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002572:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800257c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2220      	movs	r2, #32
 8002588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002598:	f043 0204 	orr.w	r2, r3, #4
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e067      	b.n	800267c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b2:	d041      	beq.n	8002638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025b4:	f7fe fdda 	bl	800116c <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d302      	bcc.n	80025ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d136      	bne.n	8002638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	0c1b      	lsrs	r3, r3, #16
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d10c      	bne.n	80025ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	43da      	mvns	r2, r3
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	4013      	ands	r3, r2
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	bf14      	ite	ne
 80025e6:	2301      	movne	r3, #1
 80025e8:	2300      	moveq	r3, #0
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	e00b      	b.n	8002606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	43da      	mvns	r2, r3
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	4013      	ands	r3, r2
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	bf14      	ite	ne
 8002600:	2301      	movne	r3, #1
 8002602:	2300      	moveq	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d016      	beq.n	8002638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2220      	movs	r2, #32
 8002614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002624:	f043 0220 	orr.w	r2, r3, #32
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e021      	b.n	800267c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	0c1b      	lsrs	r3, r3, #16
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b01      	cmp	r3, #1
 8002640:	d10c      	bne.n	800265c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	43da      	mvns	r2, r3
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	4013      	ands	r3, r2
 800264e:	b29b      	uxth	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	bf14      	ite	ne
 8002654:	2301      	movne	r3, #1
 8002656:	2300      	moveq	r3, #0
 8002658:	b2db      	uxtb	r3, r3
 800265a:	e00b      	b.n	8002674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	43da      	mvns	r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	4013      	ands	r3, r2
 8002668:	b29b      	uxth	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	bf14      	ite	ne
 800266e:	2301      	movne	r3, #1
 8002670:	2300      	moveq	r3, #0
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	f47f af6d 	bne.w	8002554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002690:	e034      	b.n	80026fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 f886 	bl	80027a4 <I2C_IsAcknowledgeFailed>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e034      	b.n	800270c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a8:	d028      	beq.n	80026fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026aa:	f7fe fd5f 	bl	800116c <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	68ba      	ldr	r2, [r7, #8]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d302      	bcc.n	80026c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d11d      	bne.n	80026fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ca:	2b80      	cmp	r3, #128	@ 0x80
 80026cc:	d016      	beq.n	80026fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2220      	movs	r2, #32
 80026d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e8:	f043 0220 	orr.w	r2, r3, #32
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e007      	b.n	800270c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002706:	2b80      	cmp	r3, #128	@ 0x80
 8002708:	d1c3      	bne.n	8002692 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002720:	e034      	b.n	800278c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 f83e 	bl	80027a4 <I2C_IsAcknowledgeFailed>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e034      	b.n	800279c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002738:	d028      	beq.n	800278c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800273a:	f7fe fd17 	bl	800116c <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	429a      	cmp	r2, r3
 8002748:	d302      	bcc.n	8002750 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d11d      	bne.n	800278c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	f003 0304 	and.w	r3, r3, #4
 800275a:	2b04      	cmp	r3, #4
 800275c:	d016      	beq.n	800278c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2220      	movs	r2, #32
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002778:	f043 0220 	orr.w	r2, r3, #32
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e007      	b.n	800279c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	2b04      	cmp	r3, #4
 8002798:	d1c3      	bne.n	8002722 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027ba:	d11b      	bne.n	80027f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80027c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e0:	f043 0204 	orr.w	r2, r3, #4
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e000      	b.n	80027f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
	...

08002804 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e267      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d075      	beq.n	800290e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002822:	4b88      	ldr	r3, [pc, #544]	@ (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 030c 	and.w	r3, r3, #12
 800282a:	2b04      	cmp	r3, #4
 800282c:	d00c      	beq.n	8002848 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800282e:	4b85      	ldr	r3, [pc, #532]	@ (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002836:	2b08      	cmp	r3, #8
 8002838:	d112      	bne.n	8002860 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800283a:	4b82      	ldr	r3, [pc, #520]	@ (8002a44 <HAL_RCC_OscConfig+0x240>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002842:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002846:	d10b      	bne.n	8002860 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002848:	4b7e      	ldr	r3, [pc, #504]	@ (8002a44 <HAL_RCC_OscConfig+0x240>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d05b      	beq.n	800290c <HAL_RCC_OscConfig+0x108>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d157      	bne.n	800290c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e242      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002868:	d106      	bne.n	8002878 <HAL_RCC_OscConfig+0x74>
 800286a:	4b76      	ldr	r3, [pc, #472]	@ (8002a44 <HAL_RCC_OscConfig+0x240>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a75      	ldr	r2, [pc, #468]	@ (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002870:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	e01d      	b.n	80028b4 <HAL_RCC_OscConfig+0xb0>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002880:	d10c      	bne.n	800289c <HAL_RCC_OscConfig+0x98>
 8002882:	4b70      	ldr	r3, [pc, #448]	@ (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a6f      	ldr	r2, [pc, #444]	@ (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002888:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	4b6d      	ldr	r3, [pc, #436]	@ (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a6c      	ldr	r2, [pc, #432]	@ (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002894:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	e00b      	b.n	80028b4 <HAL_RCC_OscConfig+0xb0>
 800289c:	4b69      	ldr	r3, [pc, #420]	@ (8002a44 <HAL_RCC_OscConfig+0x240>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a68      	ldr	r2, [pc, #416]	@ (8002a44 <HAL_RCC_OscConfig+0x240>)
 80028a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028a6:	6013      	str	r3, [r2, #0]
 80028a8:	4b66      	ldr	r3, [pc, #408]	@ (8002a44 <HAL_RCC_OscConfig+0x240>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a65      	ldr	r2, [pc, #404]	@ (8002a44 <HAL_RCC_OscConfig+0x240>)
 80028ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d013      	beq.n	80028e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7fe fc56 	bl	800116c <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c4:	f7fe fc52 	bl	800116c <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b64      	cmp	r3, #100	@ 0x64
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e207      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d6:	4b5b      	ldr	r3, [pc, #364]	@ (8002a44 <HAL_RCC_OscConfig+0x240>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0f0      	beq.n	80028c4 <HAL_RCC_OscConfig+0xc0>
 80028e2:	e014      	b.n	800290e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7fe fc42 	bl	800116c <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ec:	f7fe fc3e 	bl	800116c <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b64      	cmp	r3, #100	@ 0x64
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e1f3      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028fe:	4b51      	ldr	r3, [pc, #324]	@ (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0xe8>
 800290a:	e000      	b.n	800290e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d063      	beq.n	80029e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800291a:	4b4a      	ldr	r3, [pc, #296]	@ (8002a44 <HAL_RCC_OscConfig+0x240>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 030c 	and.w	r3, r3, #12
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00b      	beq.n	800293e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002926:	4b47      	ldr	r3, [pc, #284]	@ (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800292e:	2b08      	cmp	r3, #8
 8002930:	d11c      	bne.n	800296c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002932:	4b44      	ldr	r3, [pc, #272]	@ (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d116      	bne.n	800296c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293e:	4b41      	ldr	r3, [pc, #260]	@ (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d005      	beq.n	8002956 <HAL_RCC_OscConfig+0x152>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d001      	beq.n	8002956 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e1c7      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002956:	4b3b      	ldr	r3, [pc, #236]	@ (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	4937      	ldr	r1, [pc, #220]	@ (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002966:	4313      	orrs	r3, r2
 8002968:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800296a:	e03a      	b.n	80029e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d020      	beq.n	80029b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002974:	4b34      	ldr	r3, [pc, #208]	@ (8002a48 <HAL_RCC_OscConfig+0x244>)
 8002976:	2201      	movs	r2, #1
 8002978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297a:	f7fe fbf7 	bl	800116c <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002982:	f7fe fbf3 	bl	800116c <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e1a8      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002994:	4b2b      	ldr	r3, [pc, #172]	@ (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0f0      	beq.n	8002982 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a0:	4b28      	ldr	r3, [pc, #160]	@ (8002a44 <HAL_RCC_OscConfig+0x240>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	4925      	ldr	r1, [pc, #148]	@ (8002a44 <HAL_RCC_OscConfig+0x240>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	600b      	str	r3, [r1, #0]
 80029b4:	e015      	b.n	80029e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029b6:	4b24      	ldr	r3, [pc, #144]	@ (8002a48 <HAL_RCC_OscConfig+0x244>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029bc:	f7fe fbd6 	bl	800116c <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029c4:	f7fe fbd2 	bl	800116c <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e187      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a44 <HAL_RCC_OscConfig+0x240>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f0      	bne.n	80029c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d036      	beq.n	8002a5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d016      	beq.n	8002a24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029f6:	4b15      	ldr	r3, [pc, #84]	@ (8002a4c <HAL_RCC_OscConfig+0x248>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fc:	f7fe fbb6 	bl	800116c <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a04:	f7fe fbb2 	bl	800116c <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e167      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a16:	4b0b      	ldr	r3, [pc, #44]	@ (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002a18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f0      	beq.n	8002a04 <HAL_RCC_OscConfig+0x200>
 8002a22:	e01b      	b.n	8002a5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a24:	4b09      	ldr	r3, [pc, #36]	@ (8002a4c <HAL_RCC_OscConfig+0x248>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a2a:	f7fe fb9f 	bl	800116c <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a30:	e00e      	b.n	8002a50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a32:	f7fe fb9b 	bl	800116c <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d907      	bls.n	8002a50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e150      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
 8002a44:	40023800 	.word	0x40023800
 8002a48:	42470000 	.word	0x42470000
 8002a4c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a50:	4b88      	ldr	r3, [pc, #544]	@ (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002a52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1ea      	bne.n	8002a32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 8097 	beq.w	8002b98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a6e:	4b81      	ldr	r3, [pc, #516]	@ (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10f      	bne.n	8002a9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	4b7d      	ldr	r3, [pc, #500]	@ (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a82:	4a7c      	ldr	r2, [pc, #496]	@ (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002a84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a88:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a8a:	4b7a      	ldr	r3, [pc, #488]	@ (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a92:	60bb      	str	r3, [r7, #8]
 8002a94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a96:	2301      	movs	r3, #1
 8002a98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9a:	4b77      	ldr	r3, [pc, #476]	@ (8002c78 <HAL_RCC_OscConfig+0x474>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d118      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aa6:	4b74      	ldr	r3, [pc, #464]	@ (8002c78 <HAL_RCC_OscConfig+0x474>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a73      	ldr	r2, [pc, #460]	@ (8002c78 <HAL_RCC_OscConfig+0x474>)
 8002aac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ab0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ab2:	f7fe fb5b 	bl	800116c <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aba:	f7fe fb57 	bl	800116c <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e10c      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002acc:	4b6a      	ldr	r3, [pc, #424]	@ (8002c78 <HAL_RCC_OscConfig+0x474>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d0f0      	beq.n	8002aba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d106      	bne.n	8002aee <HAL_RCC_OscConfig+0x2ea>
 8002ae0:	4b64      	ldr	r3, [pc, #400]	@ (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae4:	4a63      	ldr	r2, [pc, #396]	@ (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aec:	e01c      	b.n	8002b28 <HAL_RCC_OscConfig+0x324>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	2b05      	cmp	r3, #5
 8002af4:	d10c      	bne.n	8002b10 <HAL_RCC_OscConfig+0x30c>
 8002af6:	4b5f      	ldr	r3, [pc, #380]	@ (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002afa:	4a5e      	ldr	r2, [pc, #376]	@ (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002afc:	f043 0304 	orr.w	r3, r3, #4
 8002b00:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b02:	4b5c      	ldr	r3, [pc, #368]	@ (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b06:	4a5b      	ldr	r2, [pc, #364]	@ (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b0e:	e00b      	b.n	8002b28 <HAL_RCC_OscConfig+0x324>
 8002b10:	4b58      	ldr	r3, [pc, #352]	@ (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b14:	4a57      	ldr	r2, [pc, #348]	@ (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002b16:	f023 0301 	bic.w	r3, r3, #1
 8002b1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b1c:	4b55      	ldr	r3, [pc, #340]	@ (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b20:	4a54      	ldr	r2, [pc, #336]	@ (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002b22:	f023 0304 	bic.w	r3, r3, #4
 8002b26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d015      	beq.n	8002b5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b30:	f7fe fb1c 	bl	800116c <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b36:	e00a      	b.n	8002b4e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b38:	f7fe fb18 	bl	800116c <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e0cb      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b4e:	4b49      	ldr	r3, [pc, #292]	@ (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0ee      	beq.n	8002b38 <HAL_RCC_OscConfig+0x334>
 8002b5a:	e014      	b.n	8002b86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b5c:	f7fe fb06 	bl	800116c <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b62:	e00a      	b.n	8002b7a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b64:	f7fe fb02 	bl	800116c <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e0b5      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b7a:	4b3e      	ldr	r3, [pc, #248]	@ (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1ee      	bne.n	8002b64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b86:	7dfb      	ldrb	r3, [r7, #23]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d105      	bne.n	8002b98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b8c:	4b39      	ldr	r3, [pc, #228]	@ (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b90:	4a38      	ldr	r2, [pc, #224]	@ (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002b92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b96:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 80a1 	beq.w	8002ce4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ba2:	4b34      	ldr	r3, [pc, #208]	@ (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 030c 	and.w	r3, r3, #12
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	d05c      	beq.n	8002c68 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d141      	bne.n	8002c3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb6:	4b31      	ldr	r3, [pc, #196]	@ (8002c7c <HAL_RCC_OscConfig+0x478>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbc:	f7fe fad6 	bl	800116c <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc4:	f7fe fad2 	bl	800116c <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e087      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd6:	4b27      	ldr	r3, [pc, #156]	@ (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69da      	ldr	r2, [r3, #28]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf0:	019b      	lsls	r3, r3, #6
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf8:	085b      	lsrs	r3, r3, #1
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	041b      	lsls	r3, r3, #16
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c04:	061b      	lsls	r3, r3, #24
 8002c06:	491b      	ldr	r1, [pc, #108]	@ (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002c7c <HAL_RCC_OscConfig+0x478>)
 8002c0e:	2201      	movs	r2, #1
 8002c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c12:	f7fe faab 	bl	800116c <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1a:	f7fe faa7 	bl	800116c <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e05c      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c2c:	4b11      	ldr	r3, [pc, #68]	@ (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0f0      	beq.n	8002c1a <HAL_RCC_OscConfig+0x416>
 8002c38:	e054      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c3a:	4b10      	ldr	r3, [pc, #64]	@ (8002c7c <HAL_RCC_OscConfig+0x478>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c40:	f7fe fa94 	bl	800116c <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c48:	f7fe fa90 	bl	800116c <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e045      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c5a:	4b06      	ldr	r3, [pc, #24]	@ (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f0      	bne.n	8002c48 <HAL_RCC_OscConfig+0x444>
 8002c66:	e03d      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d107      	bne.n	8002c80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e038      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
 8002c74:	40023800 	.word	0x40023800
 8002c78:	40007000 	.word	0x40007000
 8002c7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c80:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf0 <HAL_RCC_OscConfig+0x4ec>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d028      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d121      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d11a      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002cb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d111      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc6:	085b      	lsrs	r3, r3, #1
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d107      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d001      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e000      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40023800 	.word	0x40023800

08002cf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e0cc      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d08:	4b68      	ldr	r3, [pc, #416]	@ (8002eac <HAL_RCC_ClockConfig+0x1b8>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d90c      	bls.n	8002d30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d16:	4b65      	ldr	r3, [pc, #404]	@ (8002eac <HAL_RCC_ClockConfig+0x1b8>)
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1e:	4b63      	ldr	r3, [pc, #396]	@ (8002eac <HAL_RCC_ClockConfig+0x1b8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d001      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e0b8      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d020      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d48:	4b59      	ldr	r3, [pc, #356]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	4a58      	ldr	r2, [pc, #352]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d52:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0308 	and.w	r3, r3, #8
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d005      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d60:	4b53      	ldr	r3, [pc, #332]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	4a52      	ldr	r2, [pc, #328]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d66:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d6c:	4b50      	ldr	r3, [pc, #320]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	494d      	ldr	r1, [pc, #308]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d044      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d107      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d92:	4b47      	ldr	r3, [pc, #284]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d119      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e07f      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d003      	beq.n	8002db2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	d107      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db2:	4b3f      	ldr	r3, [pc, #252]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d109      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e06f      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc2:	4b3b      	ldr	r3, [pc, #236]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e067      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dd2:	4b37      	ldr	r3, [pc, #220]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f023 0203 	bic.w	r2, r3, #3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	4934      	ldr	r1, [pc, #208]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002de4:	f7fe f9c2 	bl	800116c <HAL_GetTick>
 8002de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dea:	e00a      	b.n	8002e02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dec:	f7fe f9be 	bl	800116c <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e04f      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e02:	4b2b      	ldr	r3, [pc, #172]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 020c 	and.w	r2, r3, #12
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d1eb      	bne.n	8002dec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e14:	4b25      	ldr	r3, [pc, #148]	@ (8002eac <HAL_RCC_ClockConfig+0x1b8>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d20c      	bcs.n	8002e3c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e22:	4b22      	ldr	r3, [pc, #136]	@ (8002eac <HAL_RCC_ClockConfig+0x1b8>)
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2a:	4b20      	ldr	r3, [pc, #128]	@ (8002eac <HAL_RCC_ClockConfig+0x1b8>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d001      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e032      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d008      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e48:	4b19      	ldr	r3, [pc, #100]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	4916      	ldr	r1, [pc, #88]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0308 	and.w	r3, r3, #8
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d009      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e66:	4b12      	ldr	r3, [pc, #72]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	490e      	ldr	r1, [pc, #56]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e7a:	f000 f821 	bl	8002ec0 <HAL_RCC_GetSysClockFreq>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	091b      	lsrs	r3, r3, #4
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	490a      	ldr	r1, [pc, #40]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e8c:	5ccb      	ldrb	r3, [r1, r3]
 8002e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e92:	4a09      	ldr	r2, [pc, #36]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e96:	4b09      	ldr	r3, [pc, #36]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fe f81c 	bl	8000ed8 <HAL_InitTick>

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40023c00 	.word	0x40023c00
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	08007720 	.word	0x08007720
 8002eb8:	20000000 	.word	0x20000000
 8002ebc:	20000004 	.word	0x20000004

08002ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ec4:	b094      	sub	sp, #80	@ 0x50
 8002ec6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ed8:	4b79      	ldr	r3, [pc, #484]	@ (80030c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 030c 	and.w	r3, r3, #12
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d00d      	beq.n	8002f00 <HAL_RCC_GetSysClockFreq+0x40>
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	f200 80e1 	bhi.w	80030ac <HAL_RCC_GetSysClockFreq+0x1ec>
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <HAL_RCC_GetSysClockFreq+0x34>
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	d003      	beq.n	8002efa <HAL_RCC_GetSysClockFreq+0x3a>
 8002ef2:	e0db      	b.n	80030ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ef4:	4b73      	ldr	r3, [pc, #460]	@ (80030c4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ef6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ef8:	e0db      	b.n	80030b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002efa:	4b73      	ldr	r3, [pc, #460]	@ (80030c8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002efc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002efe:	e0d8      	b.n	80030b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f00:	4b6f      	ldr	r3, [pc, #444]	@ (80030c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f08:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f0a:	4b6d      	ldr	r3, [pc, #436]	@ (80030c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d063      	beq.n	8002fde <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f16:	4b6a      	ldr	r3, [pc, #424]	@ (80030c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	099b      	lsrs	r3, r3, #6
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f20:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f28:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f32:	4622      	mov	r2, r4
 8002f34:	462b      	mov	r3, r5
 8002f36:	f04f 0000 	mov.w	r0, #0
 8002f3a:	f04f 0100 	mov.w	r1, #0
 8002f3e:	0159      	lsls	r1, r3, #5
 8002f40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f44:	0150      	lsls	r0, r2, #5
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	4621      	mov	r1, r4
 8002f4c:	1a51      	subs	r1, r2, r1
 8002f4e:	6139      	str	r1, [r7, #16]
 8002f50:	4629      	mov	r1, r5
 8002f52:	eb63 0301 	sbc.w	r3, r3, r1
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	f04f 0300 	mov.w	r3, #0
 8002f60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f64:	4659      	mov	r1, fp
 8002f66:	018b      	lsls	r3, r1, #6
 8002f68:	4651      	mov	r1, sl
 8002f6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f6e:	4651      	mov	r1, sl
 8002f70:	018a      	lsls	r2, r1, #6
 8002f72:	4651      	mov	r1, sl
 8002f74:	ebb2 0801 	subs.w	r8, r2, r1
 8002f78:	4659      	mov	r1, fp
 8002f7a:	eb63 0901 	sbc.w	r9, r3, r1
 8002f7e:	f04f 0200 	mov.w	r2, #0
 8002f82:	f04f 0300 	mov.w	r3, #0
 8002f86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f92:	4690      	mov	r8, r2
 8002f94:	4699      	mov	r9, r3
 8002f96:	4623      	mov	r3, r4
 8002f98:	eb18 0303 	adds.w	r3, r8, r3
 8002f9c:	60bb      	str	r3, [r7, #8]
 8002f9e:	462b      	mov	r3, r5
 8002fa0:	eb49 0303 	adc.w	r3, r9, r3
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	f04f 0300 	mov.w	r3, #0
 8002fae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fb2:	4629      	mov	r1, r5
 8002fb4:	024b      	lsls	r3, r1, #9
 8002fb6:	4621      	mov	r1, r4
 8002fb8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fbc:	4621      	mov	r1, r4
 8002fbe:	024a      	lsls	r2, r1, #9
 8002fc0:	4610      	mov	r0, r2
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fcc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002fd0:	f7fd f94e 	bl	8000270 <__aeabi_uldivmod>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	4613      	mov	r3, r2
 8002fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fdc:	e058      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fde:	4b38      	ldr	r3, [pc, #224]	@ (80030c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	099b      	lsrs	r3, r3, #6
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	4611      	mov	r1, r2
 8002fea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fee:	623b      	str	r3, [r7, #32]
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ff4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ff8:	4642      	mov	r2, r8
 8002ffa:	464b      	mov	r3, r9
 8002ffc:	f04f 0000 	mov.w	r0, #0
 8003000:	f04f 0100 	mov.w	r1, #0
 8003004:	0159      	lsls	r1, r3, #5
 8003006:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800300a:	0150      	lsls	r0, r2, #5
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	4641      	mov	r1, r8
 8003012:	ebb2 0a01 	subs.w	sl, r2, r1
 8003016:	4649      	mov	r1, r9
 8003018:	eb63 0b01 	sbc.w	fp, r3, r1
 800301c:	f04f 0200 	mov.w	r2, #0
 8003020:	f04f 0300 	mov.w	r3, #0
 8003024:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003028:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800302c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003030:	ebb2 040a 	subs.w	r4, r2, sl
 8003034:	eb63 050b 	sbc.w	r5, r3, fp
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	00eb      	lsls	r3, r5, #3
 8003042:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003046:	00e2      	lsls	r2, r4, #3
 8003048:	4614      	mov	r4, r2
 800304a:	461d      	mov	r5, r3
 800304c:	4643      	mov	r3, r8
 800304e:	18e3      	adds	r3, r4, r3
 8003050:	603b      	str	r3, [r7, #0]
 8003052:	464b      	mov	r3, r9
 8003054:	eb45 0303 	adc.w	r3, r5, r3
 8003058:	607b      	str	r3, [r7, #4]
 800305a:	f04f 0200 	mov.w	r2, #0
 800305e:	f04f 0300 	mov.w	r3, #0
 8003062:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003066:	4629      	mov	r1, r5
 8003068:	028b      	lsls	r3, r1, #10
 800306a:	4621      	mov	r1, r4
 800306c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003070:	4621      	mov	r1, r4
 8003072:	028a      	lsls	r2, r1, #10
 8003074:	4610      	mov	r0, r2
 8003076:	4619      	mov	r1, r3
 8003078:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800307a:	2200      	movs	r2, #0
 800307c:	61bb      	str	r3, [r7, #24]
 800307e:	61fa      	str	r2, [r7, #28]
 8003080:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003084:	f7fd f8f4 	bl	8000270 <__aeabi_uldivmod>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	4613      	mov	r3, r2
 800308e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003090:	4b0b      	ldr	r3, [pc, #44]	@ (80030c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	0c1b      	lsrs	r3, r3, #16
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	3301      	adds	r3, #1
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80030a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030aa:	e002      	b.n	80030b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030ac:	4b05      	ldr	r3, [pc, #20]	@ (80030c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80030ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3750      	adds	r7, #80	@ 0x50
 80030b8:	46bd      	mov	sp, r7
 80030ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030be:	bf00      	nop
 80030c0:	40023800 	.word	0x40023800
 80030c4:	00f42400 	.word	0x00f42400
 80030c8:	007a1200 	.word	0x007a1200

080030cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030d0:	4b03      	ldr	r3, [pc, #12]	@ (80030e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030d2:	681b      	ldr	r3, [r3, #0]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	20000000 	.word	0x20000000

080030e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030e8:	f7ff fff0 	bl	80030cc <HAL_RCC_GetHCLKFreq>
 80030ec:	4602      	mov	r2, r0
 80030ee:	4b05      	ldr	r3, [pc, #20]	@ (8003104 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	0a9b      	lsrs	r3, r3, #10
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	4903      	ldr	r1, [pc, #12]	@ (8003108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030fa:	5ccb      	ldrb	r3, [r1, r3]
 80030fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003100:	4618      	mov	r0, r3
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40023800 	.word	0x40023800
 8003108:	08007730 	.word	0x08007730

0800310c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	220f      	movs	r2, #15
 800311a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800311c:	4b12      	ldr	r3, [pc, #72]	@ (8003168 <HAL_RCC_GetClockConfig+0x5c>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 0203 	and.w	r2, r3, #3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003128:	4b0f      	ldr	r3, [pc, #60]	@ (8003168 <HAL_RCC_GetClockConfig+0x5c>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003134:	4b0c      	ldr	r3, [pc, #48]	@ (8003168 <HAL_RCC_GetClockConfig+0x5c>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003140:	4b09      	ldr	r3, [pc, #36]	@ (8003168 <HAL_RCC_GetClockConfig+0x5c>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	08db      	lsrs	r3, r3, #3
 8003146:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800314e:	4b07      	ldr	r3, [pc, #28]	@ (800316c <HAL_RCC_GetClockConfig+0x60>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0207 	and.w	r2, r3, #7
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	601a      	str	r2, [r3, #0]
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40023800 	.word	0x40023800
 800316c:	40023c00 	.word	0x40023c00

08003170 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e041      	b.n	8003206 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d106      	bne.n	800319c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7fd fe7c 	bl	8000e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2202      	movs	r2, #2
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3304      	adds	r3, #4
 80031ac:	4619      	mov	r1, r3
 80031ae:	4610      	mov	r0, r2
 80031b0:	f000 f9b6 	bl	8003520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
	...

08003210 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b01      	cmp	r3, #1
 8003222:	d001      	beq.n	8003228 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e04e      	b.n	80032c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0201 	orr.w	r2, r2, #1
 800323e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a23      	ldr	r2, [pc, #140]	@ (80032d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d022      	beq.n	8003290 <HAL_TIM_Base_Start_IT+0x80>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003252:	d01d      	beq.n	8003290 <HAL_TIM_Base_Start_IT+0x80>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a1f      	ldr	r2, [pc, #124]	@ (80032d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d018      	beq.n	8003290 <HAL_TIM_Base_Start_IT+0x80>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a1e      	ldr	r2, [pc, #120]	@ (80032dc <HAL_TIM_Base_Start_IT+0xcc>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d013      	beq.n	8003290 <HAL_TIM_Base_Start_IT+0x80>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a1c      	ldr	r2, [pc, #112]	@ (80032e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d00e      	beq.n	8003290 <HAL_TIM_Base_Start_IT+0x80>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a1b      	ldr	r2, [pc, #108]	@ (80032e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d009      	beq.n	8003290 <HAL_TIM_Base_Start_IT+0x80>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a19      	ldr	r2, [pc, #100]	@ (80032e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d004      	beq.n	8003290 <HAL_TIM_Base_Start_IT+0x80>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a18      	ldr	r2, [pc, #96]	@ (80032ec <HAL_TIM_Base_Start_IT+0xdc>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d111      	bne.n	80032b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2b06      	cmp	r3, #6
 80032a0:	d010      	beq.n	80032c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f042 0201 	orr.w	r2, r2, #1
 80032b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032b2:	e007      	b.n	80032c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f042 0201 	orr.w	r2, r2, #1
 80032c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	40010000 	.word	0x40010000
 80032d8:	40000400 	.word	0x40000400
 80032dc:	40000800 	.word	0x40000800
 80032e0:	40000c00 	.word	0x40000c00
 80032e4:	40010400 	.word	0x40010400
 80032e8:	40014000 	.word	0x40014000
 80032ec:	40001800 	.word	0x40001800

080032f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d020      	beq.n	8003354 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d01b      	beq.n	8003354 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f06f 0202 	mvn.w	r2, #2
 8003324:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f8d2 	bl	80034e4 <HAL_TIM_IC_CaptureCallback>
 8003340:	e005      	b.n	800334e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f8c4 	bl	80034d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f8d5 	bl	80034f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	f003 0304 	and.w	r3, r3, #4
 800335a:	2b00      	cmp	r3, #0
 800335c:	d020      	beq.n	80033a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d01b      	beq.n	80033a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f06f 0204 	mvn.w	r2, #4
 8003370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2202      	movs	r2, #2
 8003376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f8ac 	bl	80034e4 <HAL_TIM_IC_CaptureCallback>
 800338c:	e005      	b.n	800339a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f89e 	bl	80034d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f8af 	bl	80034f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d020      	beq.n	80033ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f003 0308 	and.w	r3, r3, #8
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d01b      	beq.n	80033ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f06f 0208 	mvn.w	r2, #8
 80033bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2204      	movs	r2, #4
 80033c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f886 	bl	80034e4 <HAL_TIM_IC_CaptureCallback>
 80033d8:	e005      	b.n	80033e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f878 	bl	80034d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f889 	bl	80034f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f003 0310 	and.w	r3, r3, #16
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d020      	beq.n	8003438 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f003 0310 	and.w	r3, r3, #16
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d01b      	beq.n	8003438 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f06f 0210 	mvn.w	r2, #16
 8003408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2208      	movs	r2, #8
 800340e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f860 	bl	80034e4 <HAL_TIM_IC_CaptureCallback>
 8003424:	e005      	b.n	8003432 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f852 	bl	80034d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f863 	bl	80034f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00c      	beq.n	800345c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b00      	cmp	r3, #0
 800344a:	d007      	beq.n	800345c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f06f 0201 	mvn.w	r2, #1
 8003454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7fd fc1e 	bl	8000c98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00c      	beq.n	8003480 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800346c:	2b00      	cmp	r3, #0
 800346e:	d007      	beq.n	8003480 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f97c 	bl	8003778 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00c      	beq.n	80034a4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003490:	2b00      	cmp	r3, #0
 8003492:	d007      	beq.n	80034a4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800349c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f834 	bl	800350c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	f003 0320 	and.w	r3, r3, #32
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00c      	beq.n	80034c8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f003 0320 	and.w	r3, r3, #32
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d007      	beq.n	80034c8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f06f 0220 	mvn.w	r2, #32
 80034c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f94e 	bl	8003764 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034c8:	bf00      	nop
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a43      	ldr	r2, [pc, #268]	@ (8003640 <TIM_Base_SetConfig+0x120>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d013      	beq.n	8003560 <TIM_Base_SetConfig+0x40>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800353e:	d00f      	beq.n	8003560 <TIM_Base_SetConfig+0x40>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a40      	ldr	r2, [pc, #256]	@ (8003644 <TIM_Base_SetConfig+0x124>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d00b      	beq.n	8003560 <TIM_Base_SetConfig+0x40>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a3f      	ldr	r2, [pc, #252]	@ (8003648 <TIM_Base_SetConfig+0x128>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d007      	beq.n	8003560 <TIM_Base_SetConfig+0x40>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a3e      	ldr	r2, [pc, #248]	@ (800364c <TIM_Base_SetConfig+0x12c>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d003      	beq.n	8003560 <TIM_Base_SetConfig+0x40>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a3d      	ldr	r2, [pc, #244]	@ (8003650 <TIM_Base_SetConfig+0x130>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d108      	bne.n	8003572 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003566:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	4313      	orrs	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a32      	ldr	r2, [pc, #200]	@ (8003640 <TIM_Base_SetConfig+0x120>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d02b      	beq.n	80035d2 <TIM_Base_SetConfig+0xb2>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003580:	d027      	beq.n	80035d2 <TIM_Base_SetConfig+0xb2>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a2f      	ldr	r2, [pc, #188]	@ (8003644 <TIM_Base_SetConfig+0x124>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d023      	beq.n	80035d2 <TIM_Base_SetConfig+0xb2>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a2e      	ldr	r2, [pc, #184]	@ (8003648 <TIM_Base_SetConfig+0x128>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d01f      	beq.n	80035d2 <TIM_Base_SetConfig+0xb2>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a2d      	ldr	r2, [pc, #180]	@ (800364c <TIM_Base_SetConfig+0x12c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d01b      	beq.n	80035d2 <TIM_Base_SetConfig+0xb2>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a2c      	ldr	r2, [pc, #176]	@ (8003650 <TIM_Base_SetConfig+0x130>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d017      	beq.n	80035d2 <TIM_Base_SetConfig+0xb2>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a2b      	ldr	r2, [pc, #172]	@ (8003654 <TIM_Base_SetConfig+0x134>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d013      	beq.n	80035d2 <TIM_Base_SetConfig+0xb2>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a2a      	ldr	r2, [pc, #168]	@ (8003658 <TIM_Base_SetConfig+0x138>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d00f      	beq.n	80035d2 <TIM_Base_SetConfig+0xb2>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a29      	ldr	r2, [pc, #164]	@ (800365c <TIM_Base_SetConfig+0x13c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d00b      	beq.n	80035d2 <TIM_Base_SetConfig+0xb2>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a28      	ldr	r2, [pc, #160]	@ (8003660 <TIM_Base_SetConfig+0x140>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d007      	beq.n	80035d2 <TIM_Base_SetConfig+0xb2>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a27      	ldr	r2, [pc, #156]	@ (8003664 <TIM_Base_SetConfig+0x144>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d003      	beq.n	80035d2 <TIM_Base_SetConfig+0xb2>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a26      	ldr	r2, [pc, #152]	@ (8003668 <TIM_Base_SetConfig+0x148>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d108      	bne.n	80035e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a0e      	ldr	r2, [pc, #56]	@ (8003640 <TIM_Base_SetConfig+0x120>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d003      	beq.n	8003612 <TIM_Base_SetConfig+0xf2>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a10      	ldr	r2, [pc, #64]	@ (8003650 <TIM_Base_SetConfig+0x130>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d103      	bne.n	800361a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	691a      	ldr	r2, [r3, #16]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f043 0204 	orr.w	r2, r3, #4
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	601a      	str	r2, [r3, #0]
}
 8003632:	bf00      	nop
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	40010000 	.word	0x40010000
 8003644:	40000400 	.word	0x40000400
 8003648:	40000800 	.word	0x40000800
 800364c:	40000c00 	.word	0x40000c00
 8003650:	40010400 	.word	0x40010400
 8003654:	40014000 	.word	0x40014000
 8003658:	40014400 	.word	0x40014400
 800365c:	40014800 	.word	0x40014800
 8003660:	40001800 	.word	0x40001800
 8003664:	40001c00 	.word	0x40001c00
 8003668:	40002000 	.word	0x40002000

0800366c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800367c:	2b01      	cmp	r3, #1
 800367e:	d101      	bne.n	8003684 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003680:	2302      	movs	r3, #2
 8003682:	e05a      	b.n	800373a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a21      	ldr	r2, [pc, #132]	@ (8003748 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d022      	beq.n	800370e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036d0:	d01d      	beq.n	800370e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a1d      	ldr	r2, [pc, #116]	@ (800374c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d018      	beq.n	800370e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a1b      	ldr	r2, [pc, #108]	@ (8003750 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d013      	beq.n	800370e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a1a      	ldr	r2, [pc, #104]	@ (8003754 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d00e      	beq.n	800370e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a18      	ldr	r2, [pc, #96]	@ (8003758 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d009      	beq.n	800370e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a17      	ldr	r2, [pc, #92]	@ (800375c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d004      	beq.n	800370e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a15      	ldr	r2, [pc, #84]	@ (8003760 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d10c      	bne.n	8003728 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003714:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	4313      	orrs	r3, r2
 800371e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40010000 	.word	0x40010000
 800374c:	40000400 	.word	0x40000400
 8003750:	40000800 	.word	0x40000800
 8003754:	40000c00 	.word	0x40000c00
 8003758:	40010400 	.word	0x40010400
 800375c:	40014000 	.word	0x40014000
 8003760:	40001800 	.word	0x40001800

08003764 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <__NVIC_SetPriority>:
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	6039      	str	r1, [r7, #0]
 8003796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379c:	2b00      	cmp	r3, #0
 800379e:	db0a      	blt.n	80037b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	490c      	ldr	r1, [pc, #48]	@ (80037d8 <__NVIC_SetPriority+0x4c>)
 80037a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037aa:	0112      	lsls	r2, r2, #4
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	440b      	add	r3, r1
 80037b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80037b4:	e00a      	b.n	80037cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	4908      	ldr	r1, [pc, #32]	@ (80037dc <__NVIC_SetPriority+0x50>)
 80037bc:	79fb      	ldrb	r3, [r7, #7]
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	3b04      	subs	r3, #4
 80037c4:	0112      	lsls	r2, r2, #4
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	440b      	add	r3, r1
 80037ca:	761a      	strb	r2, [r3, #24]
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	e000e100 	.word	0xe000e100
 80037dc:	e000ed00 	.word	0xe000ed00

080037e0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80037e4:	4b05      	ldr	r3, [pc, #20]	@ (80037fc <SysTick_Handler+0x1c>)
 80037e6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80037e8:	f002 f880 	bl	80058ec <xTaskGetSchedulerState>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d001      	beq.n	80037f6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80037f2:	f002 ff79 	bl	80066e8 <xPortSysTickHandler>
  }
}
 80037f6:	bf00      	nop
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	e000e010 	.word	0xe000e010

08003800 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003804:	2100      	movs	r1, #0
 8003806:	f06f 0004 	mvn.w	r0, #4
 800380a:	f7ff ffbf 	bl	800378c <__NVIC_SetPriority>
#endif
}
 800380e:	bf00      	nop
 8003810:	bd80      	pop	{r7, pc}
	...

08003814 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800381a:	f3ef 8305 	mrs	r3, IPSR
 800381e:	603b      	str	r3, [r7, #0]
  return(result);
 8003820:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003826:	f06f 0305 	mvn.w	r3, #5
 800382a:	607b      	str	r3, [r7, #4]
 800382c:	e00c      	b.n	8003848 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800382e:	4b0a      	ldr	r3, [pc, #40]	@ (8003858 <osKernelInitialize+0x44>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d105      	bne.n	8003842 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003836:	4b08      	ldr	r3, [pc, #32]	@ (8003858 <osKernelInitialize+0x44>)
 8003838:	2201      	movs	r2, #1
 800383a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800383c:	2300      	movs	r3, #0
 800383e:	607b      	str	r3, [r7, #4]
 8003840:	e002      	b.n	8003848 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003842:	f04f 33ff 	mov.w	r3, #4294967295
 8003846:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003848:	687b      	ldr	r3, [r7, #4]
}
 800384a:	4618      	mov	r0, r3
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	20000238 	.word	0x20000238

0800385c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003862:	f3ef 8305 	mrs	r3, IPSR
 8003866:	603b      	str	r3, [r7, #0]
  return(result);
 8003868:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <osKernelStart+0x1a>
    stat = osErrorISR;
 800386e:	f06f 0305 	mvn.w	r3, #5
 8003872:	607b      	str	r3, [r7, #4]
 8003874:	e010      	b.n	8003898 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003876:	4b0b      	ldr	r3, [pc, #44]	@ (80038a4 <osKernelStart+0x48>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d109      	bne.n	8003892 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800387e:	f7ff ffbf 	bl	8003800 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003882:	4b08      	ldr	r3, [pc, #32]	@ (80038a4 <osKernelStart+0x48>)
 8003884:	2202      	movs	r2, #2
 8003886:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003888:	f001 fbbc 	bl	8005004 <vTaskStartScheduler>
      stat = osOK;
 800388c:	2300      	movs	r3, #0
 800388e:	607b      	str	r3, [r7, #4]
 8003890:	e002      	b.n	8003898 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003892:	f04f 33ff 	mov.w	r3, #4294967295
 8003896:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003898:	687b      	ldr	r3, [r7, #4]
}
 800389a:	4618      	mov	r0, r3
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20000238 	.word	0x20000238

080038a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08e      	sub	sp, #56	@ 0x38
 80038ac:	af04      	add	r7, sp, #16
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80038b4:	2300      	movs	r3, #0
 80038b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038b8:	f3ef 8305 	mrs	r3, IPSR
 80038bc:	617b      	str	r3, [r7, #20]
  return(result);
 80038be:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d17e      	bne.n	80039c2 <osThreadNew+0x11a>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d07b      	beq.n	80039c2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80038ca:	2380      	movs	r3, #128	@ 0x80
 80038cc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80038ce:	2318      	movs	r3, #24
 80038d0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80038d2:	2300      	movs	r3, #0
 80038d4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80038d6:	f04f 33ff 	mov.w	r3, #4294967295
 80038da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d045      	beq.n	800396e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <osThreadNew+0x48>
        name = attr->name;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d008      	beq.n	8003916 <osThreadNew+0x6e>
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	2b38      	cmp	r3, #56	@ 0x38
 8003908:	d805      	bhi.n	8003916 <osThreadNew+0x6e>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <osThreadNew+0x72>
        return (NULL);
 8003916:	2300      	movs	r3, #0
 8003918:	e054      	b.n	80039c4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	089b      	lsrs	r3, r3, #2
 8003928:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00e      	beq.n	8003950 <osThreadNew+0xa8>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	2ba7      	cmp	r3, #167	@ 0xa7
 8003938:	d90a      	bls.n	8003950 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800393e:	2b00      	cmp	r3, #0
 8003940:	d006      	beq.n	8003950 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d002      	beq.n	8003950 <osThreadNew+0xa8>
        mem = 1;
 800394a:	2301      	movs	r3, #1
 800394c:	61bb      	str	r3, [r7, #24]
 800394e:	e010      	b.n	8003972 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10c      	bne.n	8003972 <osThreadNew+0xca>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d108      	bne.n	8003972 <osThreadNew+0xca>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d104      	bne.n	8003972 <osThreadNew+0xca>
          mem = 0;
 8003968:	2300      	movs	r3, #0
 800396a:	61bb      	str	r3, [r7, #24]
 800396c:	e001      	b.n	8003972 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800396e:	2300      	movs	r3, #0
 8003970:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d110      	bne.n	800399a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003980:	9202      	str	r2, [sp, #8]
 8003982:	9301      	str	r3, [sp, #4]
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	6a3a      	ldr	r2, [r7, #32]
 800398c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f001 f944 	bl	8004c1c <xTaskCreateStatic>
 8003994:	4603      	mov	r3, r0
 8003996:	613b      	str	r3, [r7, #16]
 8003998:	e013      	b.n	80039c2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d110      	bne.n	80039c2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	f107 0310 	add.w	r3, r7, #16
 80039a8:	9301      	str	r3, [sp, #4]
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f001 f992 	bl	8004cdc <xTaskCreate>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d001      	beq.n	80039c2 <osThreadNew+0x11a>
            hTask = NULL;
 80039be:	2300      	movs	r3, #0
 80039c0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80039c2:	693b      	ldr	r3, [r7, #16]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3728      	adds	r7, #40	@ 0x28
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039d4:	f3ef 8305 	mrs	r3, IPSR
 80039d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80039da:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d003      	beq.n	80039e8 <osDelay+0x1c>
    stat = osErrorISR;
 80039e0:	f06f 0305 	mvn.w	r3, #5
 80039e4:	60fb      	str	r3, [r7, #12]
 80039e6:	e007      	b.n	80039f8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80039e8:	2300      	movs	r3, #0
 80039ea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d002      	beq.n	80039f8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f001 fad0 	bl	8004f98 <vTaskDelay>
    }
  }

  return (stat);
 80039f8:	68fb      	ldr	r3, [r7, #12]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b088      	sub	sp, #32
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a0e:	f3ef 8305 	mrs	r3, IPSR
 8003a12:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a14:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d174      	bne.n	8003b04 <osMutexNew+0x102>
    if (attr != NULL) {
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d003      	beq.n	8003a28 <osMutexNew+0x26>
      type = attr->attr_bits;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	61bb      	str	r3, [r7, #24]
 8003a26:	e001      	b.n	8003a2c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d002      	beq.n	8003a3c <osMutexNew+0x3a>
      rmtx = 1U;
 8003a36:	2301      	movs	r3, #1
 8003a38:	617b      	str	r3, [r7, #20]
 8003a3a:	e001      	b.n	8003a40 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d15c      	bne.n	8003b04 <osMutexNew+0x102>
      mem = -1;
 8003a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d015      	beq.n	8003a82 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d006      	beq.n	8003a6c <osMutexNew+0x6a>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	2b4f      	cmp	r3, #79	@ 0x4f
 8003a64:	d902      	bls.n	8003a6c <osMutexNew+0x6a>
          mem = 1;
 8003a66:	2301      	movs	r3, #1
 8003a68:	613b      	str	r3, [r7, #16]
 8003a6a:	e00c      	b.n	8003a86 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d108      	bne.n	8003a86 <osMutexNew+0x84>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d104      	bne.n	8003a86 <osMutexNew+0x84>
            mem = 0;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	613b      	str	r3, [r7, #16]
 8003a80:	e001      	b.n	8003a86 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8003a82:	2300      	movs	r3, #0
 8003a84:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d112      	bne.n	8003ab2 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d007      	beq.n	8003aa2 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	4619      	mov	r1, r3
 8003a98:	2004      	movs	r0, #4
 8003a9a:	f000 fb20 	bl	80040de <xQueueCreateMutexStatic>
 8003a9e:	61f8      	str	r0, [r7, #28]
 8003aa0:	e016      	b.n	8003ad0 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	2001      	movs	r0, #1
 8003aaa:	f000 fb18 	bl	80040de <xQueueCreateMutexStatic>
 8003aae:	61f8      	str	r0, [r7, #28]
 8003ab0:	e00e      	b.n	8003ad0 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10b      	bne.n	8003ad0 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d004      	beq.n	8003ac8 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003abe:	2004      	movs	r0, #4
 8003ac0:	f000 faf5 	bl	80040ae <xQueueCreateMutex>
 8003ac4:	61f8      	str	r0, [r7, #28]
 8003ac6:	e003      	b.n	8003ad0 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8003ac8:	2001      	movs	r0, #1
 8003aca:	f000 faf0 	bl	80040ae <xQueueCreateMutex>
 8003ace:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00c      	beq.n	8003af0 <osMutexNew+0xee>
        if (attr != NULL) {
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <osMutexNew+0xe2>
          name = attr->name;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	60fb      	str	r3, [r7, #12]
 8003ae2:	e001      	b.n	8003ae8 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8003ae8:	68f9      	ldr	r1, [r7, #12]
 8003aea:	69f8      	ldr	r0, [r7, #28]
 8003aec:	f001 f838 	bl	8004b60 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d006      	beq.n	8003b04 <osMutexNew+0x102>
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f043 0301 	orr.w	r3, r3, #1
 8003b02:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8003b04:	69fb      	ldr	r3, [r7, #28]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3720      	adds	r7, #32
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b086      	sub	sp, #24
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f023 0301 	bic.w	r3, r3, #1
 8003b1e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b2c:	f3ef 8305 	mrs	r3, IPSR
 8003b30:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b32:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8003b38:	f06f 0305 	mvn.w	r3, #5
 8003b3c:	617b      	str	r3, [r7, #20]
 8003b3e:	e02c      	b.n	8003b9a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d103      	bne.n	8003b4e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8003b46:	f06f 0303 	mvn.w	r3, #3
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	e025      	b.n	8003b9a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d011      	beq.n	8003b78 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8003b54:	6839      	ldr	r1, [r7, #0]
 8003b56:	6938      	ldr	r0, [r7, #16]
 8003b58:	f000 fb11 	bl	800417e <xQueueTakeMutexRecursive>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d01b      	beq.n	8003b9a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8003b68:	f06f 0301 	mvn.w	r3, #1
 8003b6c:	617b      	str	r3, [r7, #20]
 8003b6e:	e014      	b.n	8003b9a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003b70:	f06f 0302 	mvn.w	r3, #2
 8003b74:	617b      	str	r3, [r7, #20]
 8003b76:	e010      	b.n	8003b9a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8003b78:	6839      	ldr	r1, [r7, #0]
 8003b7a:	6938      	ldr	r0, [r7, #16]
 8003b7c:	f000 fdb8 	bl	80046f0 <xQueueSemaphoreTake>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d009      	beq.n	8003b9a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8003b8c:	f06f 0301 	mvn.w	r3, #1
 8003b90:	617b      	str	r3, [r7, #20]
 8003b92:	e002      	b.n	8003b9a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003b94:	f06f 0302 	mvn.w	r3, #2
 8003b98:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8003b9a:	697b      	ldr	r3, [r7, #20]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3718      	adds	r7, #24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f023 0301 	bic.w	r3, r3, #1
 8003bb2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bc0:	f3ef 8305 	mrs	r3, IPSR
 8003bc4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bc6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <osMutexRelease+0x30>
    stat = osErrorISR;
 8003bcc:	f06f 0305 	mvn.w	r3, #5
 8003bd0:	617b      	str	r3, [r7, #20]
 8003bd2:	e01f      	b.n	8003c14 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d103      	bne.n	8003be2 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8003bda:	f06f 0303 	mvn.w	r3, #3
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	e018      	b.n	8003c14 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d009      	beq.n	8003bfc <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8003be8:	6938      	ldr	r0, [r7, #16]
 8003bea:	f000 fa93 	bl	8004114 <xQueueGiveMutexRecursive>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d00f      	beq.n	8003c14 <osMutexRelease+0x70>
        stat = osErrorResource;
 8003bf4:	f06f 0302 	mvn.w	r3, #2
 8003bf8:	617b      	str	r3, [r7, #20]
 8003bfa:	e00b      	b.n	8003c14 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	2200      	movs	r2, #0
 8003c00:	2100      	movs	r1, #0
 8003c02:	6938      	ldr	r0, [r7, #16]
 8003c04:	f000 faf2 	bl	80041ec <xQueueGenericSend>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d002      	beq.n	8003c14 <osMutexRelease+0x70>
        stat = osErrorResource;
 8003c0e:	f06f 0302 	mvn.w	r3, #2
 8003c12:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003c14:	697b      	ldr	r3, [r7, #20]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3718      	adds	r7, #24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
	...

08003c20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4a07      	ldr	r2, [pc, #28]	@ (8003c4c <vApplicationGetIdleTaskMemory+0x2c>)
 8003c30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	4a06      	ldr	r2, [pc, #24]	@ (8003c50 <vApplicationGetIdleTaskMemory+0x30>)
 8003c36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2280      	movs	r2, #128	@ 0x80
 8003c3c:	601a      	str	r2, [r3, #0]
}
 8003c3e:	bf00      	nop
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	2000023c 	.word	0x2000023c
 8003c50:	200002e4 	.word	0x200002e4

08003c54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4a07      	ldr	r2, [pc, #28]	@ (8003c80 <vApplicationGetTimerTaskMemory+0x2c>)
 8003c64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	4a06      	ldr	r2, [pc, #24]	@ (8003c84 <vApplicationGetTimerTaskMemory+0x30>)
 8003c6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c72:	601a      	str	r2, [r3, #0]
}
 8003c74:	bf00      	nop
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	200004e4 	.word	0x200004e4
 8003c84:	2000058c 	.word	0x2000058c

08003c88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f103 0208 	add.w	r2, r3, #8
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003ca0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f103 0208 	add.w	r2, r3, #8
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f103 0208 	add.w	r2, r3, #8
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b085      	sub	sp, #20
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	601a      	str	r2, [r3, #0]
}
 8003d1e:	bf00      	nop
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b085      	sub	sp, #20
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
 8003d32:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d40:	d103      	bne.n	8003d4a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	e00c      	b.n	8003d64 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	3308      	adds	r3, #8
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	e002      	b.n	8003d58 <vListInsert+0x2e>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	60fb      	str	r3, [r7, #12]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d2f6      	bcs.n	8003d52 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	1c5a      	adds	r2, r3, #1
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	601a      	str	r2, [r3, #0]
}
 8003d90:	bf00      	nop
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6892      	ldr	r2, [r2, #8]
 8003db2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6852      	ldr	r2, [r2, #4]
 8003dbc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d103      	bne.n	8003dd0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	1e5a      	subs	r2, r3, #1
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10b      	bne.n	8003e1c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e08:	f383 8811 	msr	BASEPRI, r3
 8003e0c:	f3bf 8f6f 	isb	sy
 8003e10:	f3bf 8f4f 	dsb	sy
 8003e14:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003e16:	bf00      	nop
 8003e18:	bf00      	nop
 8003e1a:	e7fd      	b.n	8003e18 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003e1c:	f002 fbd4 	bl	80065c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e28:	68f9      	ldr	r1, [r7, #12]
 8003e2a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003e2c:	fb01 f303 	mul.w	r3, r1, r3
 8003e30:	441a      	add	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	68f9      	ldr	r1, [r7, #12]
 8003e50:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003e52:	fb01 f303 	mul.w	r3, r1, r3
 8003e56:	441a      	add	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	22ff      	movs	r2, #255	@ 0xff
 8003e60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	22ff      	movs	r2, #255	@ 0xff
 8003e68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d114      	bne.n	8003e9c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d01a      	beq.n	8003eb0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	3310      	adds	r3, #16
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f001 fb5e 	bl	8005540 <xTaskRemoveFromEventList>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d012      	beq.n	8003eb0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec0 <xQueueGenericReset+0xd0>)
 8003e8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	f3bf 8f4f 	dsb	sy
 8003e96:	f3bf 8f6f 	isb	sy
 8003e9a:	e009      	b.n	8003eb0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	3310      	adds	r3, #16
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff fef1 	bl	8003c88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	3324      	adds	r3, #36	@ 0x24
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff feec 	bl	8003c88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003eb0:	f002 fbbc 	bl	800662c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003eb4:	2301      	movs	r3, #1
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	e000ed04 	.word	0xe000ed04

08003ec4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b08e      	sub	sp, #56	@ 0x38
 8003ec8:	af02      	add	r7, sp, #8
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
 8003ed0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10b      	bne.n	8003ef0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003edc:	f383 8811 	msr	BASEPRI, r3
 8003ee0:	f3bf 8f6f 	isb	sy
 8003ee4:	f3bf 8f4f 	dsb	sy
 8003ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003eea:	bf00      	nop
 8003eec:	bf00      	nop
 8003eee:	e7fd      	b.n	8003eec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10b      	bne.n	8003f0e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003efa:	f383 8811 	msr	BASEPRI, r3
 8003efe:	f3bf 8f6f 	isb	sy
 8003f02:	f3bf 8f4f 	dsb	sy
 8003f06:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003f08:	bf00      	nop
 8003f0a:	bf00      	nop
 8003f0c:	e7fd      	b.n	8003f0a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <xQueueGenericCreateStatic+0x56>
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <xQueueGenericCreateStatic+0x5a>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e000      	b.n	8003f20 <xQueueGenericCreateStatic+0x5c>
 8003f1e:	2300      	movs	r3, #0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10b      	bne.n	8003f3c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f28:	f383 8811 	msr	BASEPRI, r3
 8003f2c:	f3bf 8f6f 	isb	sy
 8003f30:	f3bf 8f4f 	dsb	sy
 8003f34:	623b      	str	r3, [r7, #32]
}
 8003f36:	bf00      	nop
 8003f38:	bf00      	nop
 8003f3a:	e7fd      	b.n	8003f38 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d102      	bne.n	8003f48 <xQueueGenericCreateStatic+0x84>
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d101      	bne.n	8003f4c <xQueueGenericCreateStatic+0x88>
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e000      	b.n	8003f4e <xQueueGenericCreateStatic+0x8a>
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10b      	bne.n	8003f6a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f56:	f383 8811 	msr	BASEPRI, r3
 8003f5a:	f3bf 8f6f 	isb	sy
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	61fb      	str	r3, [r7, #28]
}
 8003f64:	bf00      	nop
 8003f66:	bf00      	nop
 8003f68:	e7fd      	b.n	8003f66 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003f6a:	2350      	movs	r3, #80	@ 0x50
 8003f6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	2b50      	cmp	r3, #80	@ 0x50
 8003f72:	d00b      	beq.n	8003f8c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f78:	f383 8811 	msr	BASEPRI, r3
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	61bb      	str	r3, [r7, #24]
}
 8003f86:	bf00      	nop
 8003f88:	bf00      	nop
 8003f8a:	e7fd      	b.n	8003f88 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003f8c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00d      	beq.n	8003fb4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003fa0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	68b9      	ldr	r1, [r7, #8]
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 f840 	bl	8004034 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3730      	adds	r7, #48	@ 0x30
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b08a      	sub	sp, #40	@ 0x28
 8003fc2:	af02      	add	r7, sp, #8
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10b      	bne.n	8003fea <xQueueGenericCreate+0x2c>
	__asm volatile
 8003fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fd6:	f383 8811 	msr	BASEPRI, r3
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	613b      	str	r3, [r7, #16]
}
 8003fe4:	bf00      	nop
 8003fe6:	bf00      	nop
 8003fe8:	e7fd      	b.n	8003fe6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	fb02 f303 	mul.w	r3, r2, r3
 8003ff2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	3350      	adds	r3, #80	@ 0x50
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f002 fc07 	bl	800680c <pvPortMalloc>
 8003ffe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d011      	beq.n	800402a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	3350      	adds	r3, #80	@ 0x50
 800400e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004018:	79fa      	ldrb	r2, [r7, #7]
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	4613      	mov	r3, r2
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	68b9      	ldr	r1, [r7, #8]
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 f805 	bl	8004034 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800402a:	69bb      	ldr	r3, [r7, #24]
	}
 800402c:	4618      	mov	r0, r3
 800402e:	3720      	adds	r7, #32
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d103      	bne.n	8004050 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	e002      	b.n	8004056 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004062:	2101      	movs	r1, #1
 8004064:	69b8      	ldr	r0, [r7, #24]
 8004066:	f7ff fec3 	bl	8003df0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	78fa      	ldrb	r2, [r7, #3]
 800406e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004072:	bf00      	nop
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800407a:	b580      	push	{r7, lr}
 800407c:	b082      	sub	sp, #8
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00e      	beq.n	80040a6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800409a:	2300      	movs	r3, #0
 800409c:	2200      	movs	r2, #0
 800409e:	2100      	movs	r1, #0
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f8a3 	bl	80041ec <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80040a6:	bf00      	nop
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b086      	sub	sp, #24
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	4603      	mov	r3, r0
 80040b6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80040b8:	2301      	movs	r3, #1
 80040ba:	617b      	str	r3, [r7, #20]
 80040bc:	2300      	movs	r3, #0
 80040be:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80040c0:	79fb      	ldrb	r3, [r7, #7]
 80040c2:	461a      	mov	r2, r3
 80040c4:	6939      	ldr	r1, [r7, #16]
 80040c6:	6978      	ldr	r0, [r7, #20]
 80040c8:	f7ff ff79 	bl	8003fbe <xQueueGenericCreate>
 80040cc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f7ff ffd3 	bl	800407a <prvInitialiseMutex>

		return xNewQueue;
 80040d4:	68fb      	ldr	r3, [r7, #12]
	}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3718      	adds	r7, #24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b088      	sub	sp, #32
 80040e2:	af02      	add	r7, sp, #8
 80040e4:	4603      	mov	r3, r0
 80040e6:	6039      	str	r1, [r7, #0]
 80040e8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80040ea:	2301      	movs	r3, #1
 80040ec:	617b      	str	r3, [r7, #20]
 80040ee:	2300      	movs	r3, #0
 80040f0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80040f2:	79fb      	ldrb	r3, [r7, #7]
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2200      	movs	r2, #0
 80040fa:	6939      	ldr	r1, [r7, #16]
 80040fc:	6978      	ldr	r0, [r7, #20]
 80040fe:	f7ff fee1 	bl	8003ec4 <xQueueGenericCreateStatic>
 8004102:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f7ff ffb8 	bl	800407a <prvInitialiseMutex>

		return xNewQueue;
 800410a:	68fb      	ldr	r3, [r7, #12]
	}
 800410c:	4618      	mov	r0, r3
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004114:	b590      	push	{r4, r7, lr}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10b      	bne.n	800413e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8004126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800412a:	f383 8811 	msr	BASEPRI, r3
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f3bf 8f4f 	dsb	sy
 8004136:	60fb      	str	r3, [r7, #12]
}
 8004138:	bf00      	nop
 800413a:	bf00      	nop
 800413c:	e7fd      	b.n	800413a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	689c      	ldr	r4, [r3, #8]
 8004142:	f001 fbc3 	bl	80058cc <xTaskGetCurrentTaskHandle>
 8004146:	4603      	mov	r3, r0
 8004148:	429c      	cmp	r4, r3
 800414a:	d111      	bne.n	8004170 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	1e5a      	subs	r2, r3, #1
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d105      	bne.n	800416a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800415e:	2300      	movs	r3, #0
 8004160:	2200      	movs	r2, #0
 8004162:	2100      	movs	r1, #0
 8004164:	6938      	ldr	r0, [r7, #16]
 8004166:	f000 f841 	bl	80041ec <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800416a:	2301      	movs	r3, #1
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	e001      	b.n	8004174 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8004170:	2300      	movs	r3, #0
 8004172:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8004174:	697b      	ldr	r3, [r7, #20]
	}
 8004176:	4618      	mov	r0, r3
 8004178:	371c      	adds	r7, #28
 800417a:	46bd      	mov	sp, r7
 800417c:	bd90      	pop	{r4, r7, pc}

0800417e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800417e:	b590      	push	{r4, r7, lr}
 8004180:	b087      	sub	sp, #28
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
 8004186:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10b      	bne.n	80041aa <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8004192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004196:	f383 8811 	msr	BASEPRI, r3
 800419a:	f3bf 8f6f 	isb	sy
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	60fb      	str	r3, [r7, #12]
}
 80041a4:	bf00      	nop
 80041a6:	bf00      	nop
 80041a8:	e7fd      	b.n	80041a6 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	689c      	ldr	r4, [r3, #8]
 80041ae:	f001 fb8d 	bl	80058cc <xTaskGetCurrentTaskHandle>
 80041b2:	4603      	mov	r3, r0
 80041b4:	429c      	cmp	r4, r3
 80041b6:	d107      	bne.n	80041c8 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	1c5a      	adds	r2, r3, #1
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80041c2:	2301      	movs	r3, #1
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	e00c      	b.n	80041e2 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80041c8:	6839      	ldr	r1, [r7, #0]
 80041ca:	6938      	ldr	r0, [r7, #16]
 80041cc:	f000 fa90 	bl	80046f0 <xQueueSemaphoreTake>
 80041d0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d004      	beq.n	80041e2 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	1c5a      	adds	r2, r3, #1
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80041e2:	697b      	ldr	r3, [r7, #20]
	}
 80041e4:	4618      	mov	r0, r3
 80041e6:	371c      	adds	r7, #28
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd90      	pop	{r4, r7, pc}

080041ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b08e      	sub	sp, #56	@ 0x38
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80041fa:	2300      	movs	r3, #0
 80041fc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10b      	bne.n	8004220 <xQueueGenericSend+0x34>
	__asm volatile
 8004208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800420c:	f383 8811 	msr	BASEPRI, r3
 8004210:	f3bf 8f6f 	isb	sy
 8004214:	f3bf 8f4f 	dsb	sy
 8004218:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800421a:	bf00      	nop
 800421c:	bf00      	nop
 800421e:	e7fd      	b.n	800421c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d103      	bne.n	800422e <xQueueGenericSend+0x42>
 8004226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <xQueueGenericSend+0x46>
 800422e:	2301      	movs	r3, #1
 8004230:	e000      	b.n	8004234 <xQueueGenericSend+0x48>
 8004232:	2300      	movs	r3, #0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10b      	bne.n	8004250 <xQueueGenericSend+0x64>
	__asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800424a:	bf00      	nop
 800424c:	bf00      	nop
 800424e:	e7fd      	b.n	800424c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	2b02      	cmp	r3, #2
 8004254:	d103      	bne.n	800425e <xQueueGenericSend+0x72>
 8004256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800425a:	2b01      	cmp	r3, #1
 800425c:	d101      	bne.n	8004262 <xQueueGenericSend+0x76>
 800425e:	2301      	movs	r3, #1
 8004260:	e000      	b.n	8004264 <xQueueGenericSend+0x78>
 8004262:	2300      	movs	r3, #0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10b      	bne.n	8004280 <xQueueGenericSend+0x94>
	__asm volatile
 8004268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800426c:	f383 8811 	msr	BASEPRI, r3
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	623b      	str	r3, [r7, #32]
}
 800427a:	bf00      	nop
 800427c:	bf00      	nop
 800427e:	e7fd      	b.n	800427c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004280:	f001 fb34 	bl	80058ec <xTaskGetSchedulerState>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d102      	bne.n	8004290 <xQueueGenericSend+0xa4>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d101      	bne.n	8004294 <xQueueGenericSend+0xa8>
 8004290:	2301      	movs	r3, #1
 8004292:	e000      	b.n	8004296 <xQueueGenericSend+0xaa>
 8004294:	2300      	movs	r3, #0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10b      	bne.n	80042b2 <xQueueGenericSend+0xc6>
	__asm volatile
 800429a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800429e:	f383 8811 	msr	BASEPRI, r3
 80042a2:	f3bf 8f6f 	isb	sy
 80042a6:	f3bf 8f4f 	dsb	sy
 80042aa:	61fb      	str	r3, [r7, #28]
}
 80042ac:	bf00      	nop
 80042ae:	bf00      	nop
 80042b0:	e7fd      	b.n	80042ae <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042b2:	f002 f989 	bl	80065c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042be:	429a      	cmp	r2, r3
 80042c0:	d302      	bcc.n	80042c8 <xQueueGenericSend+0xdc>
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d129      	bne.n	800431c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	68b9      	ldr	r1, [r7, #8]
 80042cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80042ce:	f000 fb37 	bl	8004940 <prvCopyDataToQueue>
 80042d2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d010      	beq.n	80042fe <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042de:	3324      	adds	r3, #36	@ 0x24
 80042e0:	4618      	mov	r0, r3
 80042e2:	f001 f92d 	bl	8005540 <xTaskRemoveFromEventList>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d013      	beq.n	8004314 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80042ec:	4b3f      	ldr	r3, [pc, #252]	@ (80043ec <xQueueGenericSend+0x200>)
 80042ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	f3bf 8f6f 	isb	sy
 80042fc:	e00a      	b.n	8004314 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80042fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004300:	2b00      	cmp	r3, #0
 8004302:	d007      	beq.n	8004314 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004304:	4b39      	ldr	r3, [pc, #228]	@ (80043ec <xQueueGenericSend+0x200>)
 8004306:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004314:	f002 f98a 	bl	800662c <vPortExitCritical>
				return pdPASS;
 8004318:	2301      	movs	r3, #1
 800431a:	e063      	b.n	80043e4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d103      	bne.n	800432a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004322:	f002 f983 	bl	800662c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004326:	2300      	movs	r3, #0
 8004328:	e05c      	b.n	80043e4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800432a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800432c:	2b00      	cmp	r3, #0
 800432e:	d106      	bne.n	800433e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004330:	f107 0314 	add.w	r3, r7, #20
 8004334:	4618      	mov	r0, r3
 8004336:	f001 f967 	bl	8005608 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800433a:	2301      	movs	r3, #1
 800433c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800433e:	f002 f975 	bl	800662c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004342:	f000 fecf 	bl	80050e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004346:	f002 f93f 	bl	80065c8 <vPortEnterCritical>
 800434a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800434c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004350:	b25b      	sxtb	r3, r3
 8004352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004356:	d103      	bne.n	8004360 <xQueueGenericSend+0x174>
 8004358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004362:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004366:	b25b      	sxtb	r3, r3
 8004368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436c:	d103      	bne.n	8004376 <xQueueGenericSend+0x18a>
 800436e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004376:	f002 f959 	bl	800662c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800437a:	1d3a      	adds	r2, r7, #4
 800437c:	f107 0314 	add.w	r3, r7, #20
 8004380:	4611      	mov	r1, r2
 8004382:	4618      	mov	r0, r3
 8004384:	f001 f956 	bl	8005634 <xTaskCheckForTimeOut>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d124      	bne.n	80043d8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800438e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004390:	f000 fbce 	bl	8004b30 <prvIsQueueFull>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d018      	beq.n	80043cc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800439a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439c:	3310      	adds	r3, #16
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	4611      	mov	r1, r2
 80043a2:	4618      	mov	r0, r3
 80043a4:	f001 f87a 	bl	800549c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80043a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80043aa:	f000 fb59 	bl	8004a60 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80043ae:	f000 fea7 	bl	8005100 <xTaskResumeAll>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f47f af7c 	bne.w	80042b2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80043ba:	4b0c      	ldr	r3, [pc, #48]	@ (80043ec <xQueueGenericSend+0x200>)
 80043bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	f3bf 8f4f 	dsb	sy
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	e772      	b.n	80042b2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80043cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80043ce:	f000 fb47 	bl	8004a60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043d2:	f000 fe95 	bl	8005100 <xTaskResumeAll>
 80043d6:	e76c      	b.n	80042b2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80043d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80043da:	f000 fb41 	bl	8004a60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043de:	f000 fe8f 	bl	8005100 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80043e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3738      	adds	r7, #56	@ 0x38
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	e000ed04 	.word	0xe000ed04

080043f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b090      	sub	sp, #64	@ 0x40
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
 80043fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10b      	bne.n	8004420 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800440c:	f383 8811 	msr	BASEPRI, r3
 8004410:	f3bf 8f6f 	isb	sy
 8004414:	f3bf 8f4f 	dsb	sy
 8004418:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800441a:	bf00      	nop
 800441c:	bf00      	nop
 800441e:	e7fd      	b.n	800441c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d103      	bne.n	800442e <xQueueGenericSendFromISR+0x3e>
 8004426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <xQueueGenericSendFromISR+0x42>
 800442e:	2301      	movs	r3, #1
 8004430:	e000      	b.n	8004434 <xQueueGenericSendFromISR+0x44>
 8004432:	2300      	movs	r3, #0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10b      	bne.n	8004450 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800443c:	f383 8811 	msr	BASEPRI, r3
 8004440:	f3bf 8f6f 	isb	sy
 8004444:	f3bf 8f4f 	dsb	sy
 8004448:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800444a:	bf00      	nop
 800444c:	bf00      	nop
 800444e:	e7fd      	b.n	800444c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	2b02      	cmp	r3, #2
 8004454:	d103      	bne.n	800445e <xQueueGenericSendFromISR+0x6e>
 8004456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800445a:	2b01      	cmp	r3, #1
 800445c:	d101      	bne.n	8004462 <xQueueGenericSendFromISR+0x72>
 800445e:	2301      	movs	r3, #1
 8004460:	e000      	b.n	8004464 <xQueueGenericSendFromISR+0x74>
 8004462:	2300      	movs	r3, #0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10b      	bne.n	8004480 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	623b      	str	r3, [r7, #32]
}
 800447a:	bf00      	nop
 800447c:	bf00      	nop
 800447e:	e7fd      	b.n	800447c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004480:	f002 f982 	bl	8006788 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004484:	f3ef 8211 	mrs	r2, BASEPRI
 8004488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800448c:	f383 8811 	msr	BASEPRI, r3
 8004490:	f3bf 8f6f 	isb	sy
 8004494:	f3bf 8f4f 	dsb	sy
 8004498:	61fa      	str	r2, [r7, #28]
 800449a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800449c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800449e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d302      	bcc.n	80044b2 <xQueueGenericSendFromISR+0xc2>
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d12f      	bne.n	8004512 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80044b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044b8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	68b9      	ldr	r1, [r7, #8]
 80044c6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80044c8:	f000 fa3a 	bl	8004940 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80044cc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80044d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d4:	d112      	bne.n	80044fc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d016      	beq.n	800450c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e0:	3324      	adds	r3, #36	@ 0x24
 80044e2:	4618      	mov	r0, r3
 80044e4:	f001 f82c 	bl	8005540 <xTaskRemoveFromEventList>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00e      	beq.n	800450c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00b      	beq.n	800450c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	e007      	b.n	800450c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80044fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004500:	3301      	adds	r3, #1
 8004502:	b2db      	uxtb	r3, r3
 8004504:	b25a      	sxtb	r2, r3
 8004506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004508:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800450c:	2301      	movs	r3, #1
 800450e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004510:	e001      	b.n	8004516 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004512:	2300      	movs	r3, #0
 8004514:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004518:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004520:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004524:	4618      	mov	r0, r3
 8004526:	3740      	adds	r7, #64	@ 0x40
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b08c      	sub	sp, #48	@ 0x30
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004538:	2300      	movs	r3, #0
 800453a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10b      	bne.n	800455e <xQueueReceive+0x32>
	__asm volatile
 8004546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800454a:	f383 8811 	msr	BASEPRI, r3
 800454e:	f3bf 8f6f 	isb	sy
 8004552:	f3bf 8f4f 	dsb	sy
 8004556:	623b      	str	r3, [r7, #32]
}
 8004558:	bf00      	nop
 800455a:	bf00      	nop
 800455c:	e7fd      	b.n	800455a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d103      	bne.n	800456c <xQueueReceive+0x40>
 8004564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <xQueueReceive+0x44>
 800456c:	2301      	movs	r3, #1
 800456e:	e000      	b.n	8004572 <xQueueReceive+0x46>
 8004570:	2300      	movs	r3, #0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10b      	bne.n	800458e <xQueueReceive+0x62>
	__asm volatile
 8004576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800457a:	f383 8811 	msr	BASEPRI, r3
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	f3bf 8f4f 	dsb	sy
 8004586:	61fb      	str	r3, [r7, #28]
}
 8004588:	bf00      	nop
 800458a:	bf00      	nop
 800458c:	e7fd      	b.n	800458a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800458e:	f001 f9ad 	bl	80058ec <xTaskGetSchedulerState>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d102      	bne.n	800459e <xQueueReceive+0x72>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <xQueueReceive+0x76>
 800459e:	2301      	movs	r3, #1
 80045a0:	e000      	b.n	80045a4 <xQueueReceive+0x78>
 80045a2:	2300      	movs	r3, #0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10b      	bne.n	80045c0 <xQueueReceive+0x94>
	__asm volatile
 80045a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ac:	f383 8811 	msr	BASEPRI, r3
 80045b0:	f3bf 8f6f 	isb	sy
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	61bb      	str	r3, [r7, #24]
}
 80045ba:	bf00      	nop
 80045bc:	bf00      	nop
 80045be:	e7fd      	b.n	80045bc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045c0:	f002 f802 	bl	80065c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d01f      	beq.n	8004610 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80045d0:	68b9      	ldr	r1, [r7, #8]
 80045d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045d4:	f000 fa1e 	bl	8004a14 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80045d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045da:	1e5a      	subs	r2, r3, #1
 80045dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045de:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00f      	beq.n	8004608 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ea:	3310      	adds	r3, #16
 80045ec:	4618      	mov	r0, r3
 80045ee:	f000 ffa7 	bl	8005540 <xTaskRemoveFromEventList>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d007      	beq.n	8004608 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80045f8:	4b3c      	ldr	r3, [pc, #240]	@ (80046ec <xQueueReceive+0x1c0>)
 80045fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004608:	f002 f810 	bl	800662c <vPortExitCritical>
				return pdPASS;
 800460c:	2301      	movs	r3, #1
 800460e:	e069      	b.n	80046e4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d103      	bne.n	800461e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004616:	f002 f809 	bl	800662c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800461a:	2300      	movs	r3, #0
 800461c:	e062      	b.n	80046e4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800461e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004620:	2b00      	cmp	r3, #0
 8004622:	d106      	bne.n	8004632 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004624:	f107 0310 	add.w	r3, r7, #16
 8004628:	4618      	mov	r0, r3
 800462a:	f000 ffed 	bl	8005608 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800462e:	2301      	movs	r3, #1
 8004630:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004632:	f001 fffb 	bl	800662c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004636:	f000 fd55 	bl	80050e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800463a:	f001 ffc5 	bl	80065c8 <vPortEnterCritical>
 800463e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004640:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004644:	b25b      	sxtb	r3, r3
 8004646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464a:	d103      	bne.n	8004654 <xQueueReceive+0x128>
 800464c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004656:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800465a:	b25b      	sxtb	r3, r3
 800465c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004660:	d103      	bne.n	800466a <xQueueReceive+0x13e>
 8004662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800466a:	f001 ffdf 	bl	800662c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800466e:	1d3a      	adds	r2, r7, #4
 8004670:	f107 0310 	add.w	r3, r7, #16
 8004674:	4611      	mov	r1, r2
 8004676:	4618      	mov	r0, r3
 8004678:	f000 ffdc 	bl	8005634 <xTaskCheckForTimeOut>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d123      	bne.n	80046ca <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004682:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004684:	f000 fa3e 	bl	8004b04 <prvIsQueueEmpty>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d017      	beq.n	80046be <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800468e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004690:	3324      	adds	r3, #36	@ 0x24
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	4611      	mov	r1, r2
 8004696:	4618      	mov	r0, r3
 8004698:	f000 ff00 	bl	800549c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800469c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800469e:	f000 f9df 	bl	8004a60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80046a2:	f000 fd2d 	bl	8005100 <xTaskResumeAll>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d189      	bne.n	80045c0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80046ac:	4b0f      	ldr	r3, [pc, #60]	@ (80046ec <xQueueReceive+0x1c0>)
 80046ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	f3bf 8f4f 	dsb	sy
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	e780      	b.n	80045c0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80046be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046c0:	f000 f9ce 	bl	8004a60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046c4:	f000 fd1c 	bl	8005100 <xTaskResumeAll>
 80046c8:	e77a      	b.n	80045c0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80046ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046cc:	f000 f9c8 	bl	8004a60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046d0:	f000 fd16 	bl	8005100 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046d6:	f000 fa15 	bl	8004b04 <prvIsQueueEmpty>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f43f af6f 	beq.w	80045c0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80046e2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3730      	adds	r7, #48	@ 0x30
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	e000ed04 	.word	0xe000ed04

080046f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b08e      	sub	sp, #56	@ 0x38
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80046fa:	2300      	movs	r3, #0
 80046fc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004702:	2300      	movs	r3, #0
 8004704:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10b      	bne.n	8004724 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800470c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004710:	f383 8811 	msr	BASEPRI, r3
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	623b      	str	r3, [r7, #32]
}
 800471e:	bf00      	nop
 8004720:	bf00      	nop
 8004722:	e7fd      	b.n	8004720 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00b      	beq.n	8004744 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800472c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004730:	f383 8811 	msr	BASEPRI, r3
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	61fb      	str	r3, [r7, #28]
}
 800473e:	bf00      	nop
 8004740:	bf00      	nop
 8004742:	e7fd      	b.n	8004740 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004744:	f001 f8d2 	bl	80058ec <xTaskGetSchedulerState>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d102      	bne.n	8004754 <xQueueSemaphoreTake+0x64>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d101      	bne.n	8004758 <xQueueSemaphoreTake+0x68>
 8004754:	2301      	movs	r3, #1
 8004756:	e000      	b.n	800475a <xQueueSemaphoreTake+0x6a>
 8004758:	2300      	movs	r3, #0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10b      	bne.n	8004776 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800475e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	61bb      	str	r3, [r7, #24]
}
 8004770:	bf00      	nop
 8004772:	bf00      	nop
 8004774:	e7fd      	b.n	8004772 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004776:	f001 ff27 	bl	80065c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800477a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800477c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800477e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004782:	2b00      	cmp	r3, #0
 8004784:	d024      	beq.n	80047d0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004788:	1e5a      	subs	r2, r3, #1
 800478a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800478c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800478e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d104      	bne.n	80047a0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004796:	f001 fa23 	bl	8005be0 <pvTaskIncrementMutexHeldCount>
 800479a:	4602      	mov	r2, r0
 800479c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800479e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00f      	beq.n	80047c8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047aa:	3310      	adds	r3, #16
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 fec7 	bl	8005540 <xTaskRemoveFromEventList>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d007      	beq.n	80047c8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80047b8:	4b54      	ldr	r3, [pc, #336]	@ (800490c <xQueueSemaphoreTake+0x21c>)
 80047ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	f3bf 8f4f 	dsb	sy
 80047c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80047c8:	f001 ff30 	bl	800662c <vPortExitCritical>
				return pdPASS;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e098      	b.n	8004902 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d112      	bne.n	80047fc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80047d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00b      	beq.n	80047f4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80047dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e0:	f383 8811 	msr	BASEPRI, r3
 80047e4:	f3bf 8f6f 	isb	sy
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	617b      	str	r3, [r7, #20]
}
 80047ee:	bf00      	nop
 80047f0:	bf00      	nop
 80047f2:	e7fd      	b.n	80047f0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80047f4:	f001 ff1a 	bl	800662c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80047f8:	2300      	movs	r3, #0
 80047fa:	e082      	b.n	8004902 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004802:	f107 030c 	add.w	r3, r7, #12
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fefe 	bl	8005608 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800480c:	2301      	movs	r3, #1
 800480e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004810:	f001 ff0c 	bl	800662c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004814:	f000 fc66 	bl	80050e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004818:	f001 fed6 	bl	80065c8 <vPortEnterCritical>
 800481c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800481e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004822:	b25b      	sxtb	r3, r3
 8004824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004828:	d103      	bne.n	8004832 <xQueueSemaphoreTake+0x142>
 800482a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004834:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004838:	b25b      	sxtb	r3, r3
 800483a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483e:	d103      	bne.n	8004848 <xQueueSemaphoreTake+0x158>
 8004840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004848:	f001 fef0 	bl	800662c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800484c:	463a      	mov	r2, r7
 800484e:	f107 030c 	add.w	r3, r7, #12
 8004852:	4611      	mov	r1, r2
 8004854:	4618      	mov	r0, r3
 8004856:	f000 feed 	bl	8005634 <xTaskCheckForTimeOut>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d132      	bne.n	80048c6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004860:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004862:	f000 f94f 	bl	8004b04 <prvIsQueueEmpty>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d026      	beq.n	80048ba <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800486c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d109      	bne.n	8004888 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004874:	f001 fea8 	bl	80065c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	4618      	mov	r0, r3
 800487e:	f001 f853 	bl	8005928 <xTaskPriorityInherit>
 8004882:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004884:	f001 fed2 	bl	800662c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800488a:	3324      	adds	r3, #36	@ 0x24
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	4611      	mov	r1, r2
 8004890:	4618      	mov	r0, r3
 8004892:	f000 fe03 	bl	800549c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004896:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004898:	f000 f8e2 	bl	8004a60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800489c:	f000 fc30 	bl	8005100 <xTaskResumeAll>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f47f af67 	bne.w	8004776 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80048a8:	4b18      	ldr	r3, [pc, #96]	@ (800490c <xQueueSemaphoreTake+0x21c>)
 80048aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	e75d      	b.n	8004776 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80048ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80048bc:	f000 f8d0 	bl	8004a60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048c0:	f000 fc1e 	bl	8005100 <xTaskResumeAll>
 80048c4:	e757      	b.n	8004776 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80048c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80048c8:	f000 f8ca 	bl	8004a60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048cc:	f000 fc18 	bl	8005100 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80048d2:	f000 f917 	bl	8004b04 <prvIsQueueEmpty>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f43f af4c 	beq.w	8004776 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80048de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00d      	beq.n	8004900 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80048e4:	f001 fe70 	bl	80065c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80048e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80048ea:	f000 f811 	bl	8004910 <prvGetDisinheritPriorityAfterTimeout>
 80048ee:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80048f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80048f6:	4618      	mov	r0, r3
 80048f8:	f001 f8ee 	bl	8005ad8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80048fc:	f001 fe96 	bl	800662c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004900:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004902:	4618      	mov	r0, r3
 8004904:	3738      	adds	r7, #56	@ 0x38
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	e000ed04 	.word	0xe000ed04

08004910 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491c:	2b00      	cmp	r3, #0
 800491e:	d006      	beq.n	800492e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800492a:	60fb      	str	r3, [r7, #12]
 800492c:	e001      	b.n	8004932 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800492e:	2300      	movs	r3, #0
 8004930:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004932:	68fb      	ldr	r3, [r7, #12]
	}
 8004934:	4618      	mov	r0, r3
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800494c:	2300      	movs	r3, #0
 800494e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004954:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10d      	bne.n	800497a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d14d      	bne.n	8004a02 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	4618      	mov	r0, r3
 800496c:	f001 f844 	bl	80059f8 <xTaskPriorityDisinherit>
 8004970:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	609a      	str	r2, [r3, #8]
 8004978:	e043      	b.n	8004a02 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d119      	bne.n	80049b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6858      	ldr	r0, [r3, #4]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004988:	461a      	mov	r2, r3
 800498a:	68b9      	ldr	r1, [r7, #8]
 800498c:	f002 f9ea 	bl	8006d64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004998:	441a      	add	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d32b      	bcc.n	8004a02 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	605a      	str	r2, [r3, #4]
 80049b2:	e026      	b.n	8004a02 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	68d8      	ldr	r0, [r3, #12]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049bc:	461a      	mov	r2, r3
 80049be:	68b9      	ldr	r1, [r7, #8]
 80049c0:	f002 f9d0 	bl	8006d64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	68da      	ldr	r2, [r3, #12]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049cc:	425b      	negs	r3, r3
 80049ce:	441a      	add	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	68da      	ldr	r2, [r3, #12]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d207      	bcs.n	80049f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e8:	425b      	negs	r3, r3
 80049ea:	441a      	add	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d105      	bne.n	8004a02 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1c5a      	adds	r2, r3, #1
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004a0a:	697b      	ldr	r3, [r7, #20]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3718      	adds	r7, #24
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d018      	beq.n	8004a58 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2e:	441a      	add	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68da      	ldr	r2, [r3, #12]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d303      	bcc.n	8004a48 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68d9      	ldr	r1, [r3, #12]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a50:	461a      	mov	r2, r3
 8004a52:	6838      	ldr	r0, [r7, #0]
 8004a54:	f002 f986 	bl	8006d64 <memcpy>
	}
}
 8004a58:	bf00      	nop
 8004a5a:	3708      	adds	r7, #8
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004a68:	f001 fdae 	bl	80065c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a72:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a74:	e011      	b.n	8004a9a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d012      	beq.n	8004aa4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	3324      	adds	r3, #36	@ 0x24
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 fd5c 	bl	8005540 <xTaskRemoveFromEventList>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004a8e:	f000 fe35 	bl	80056fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004a92:	7bfb      	ldrb	r3, [r7, #15]
 8004a94:	3b01      	subs	r3, #1
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	dce9      	bgt.n	8004a76 <prvUnlockQueue+0x16>
 8004aa2:	e000      	b.n	8004aa6 <prvUnlockQueue+0x46>
					break;
 8004aa4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	22ff      	movs	r2, #255	@ 0xff
 8004aaa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004aae:	f001 fdbd 	bl	800662c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004ab2:	f001 fd89 	bl	80065c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004abc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004abe:	e011      	b.n	8004ae4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d012      	beq.n	8004aee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	3310      	adds	r3, #16
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 fd37 	bl	8005540 <xTaskRemoveFromEventList>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004ad8:	f000 fe10 	bl	80056fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004adc:	7bbb      	ldrb	r3, [r7, #14]
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ae4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	dce9      	bgt.n	8004ac0 <prvUnlockQueue+0x60>
 8004aec:	e000      	b.n	8004af0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004aee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	22ff      	movs	r2, #255	@ 0xff
 8004af4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004af8:	f001 fd98 	bl	800662c <vPortExitCritical>
}
 8004afc:	bf00      	nop
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b0c:	f001 fd5c 	bl	80065c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d102      	bne.n	8004b1e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	e001      	b.n	8004b22 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b22:	f001 fd83 	bl	800662c <vPortExitCritical>

	return xReturn;
 8004b26:	68fb      	ldr	r3, [r7, #12]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b38:	f001 fd46 	bl	80065c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d102      	bne.n	8004b4e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	60fb      	str	r3, [r7, #12]
 8004b4c:	e001      	b.n	8004b52 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b52:	f001 fd6b 	bl	800662c <vPortExitCritical>

	return xReturn;
 8004b56:	68fb      	ldr	r3, [r7, #12]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60fb      	str	r3, [r7, #12]
 8004b6e:	e014      	b.n	8004b9a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004b70:	4a0f      	ldr	r2, [pc, #60]	@ (8004bb0 <vQueueAddToRegistry+0x50>)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10b      	bne.n	8004b94 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004b7c:	490c      	ldr	r1, [pc, #48]	@ (8004bb0 <vQueueAddToRegistry+0x50>)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004b86:	4a0a      	ldr	r2, [pc, #40]	@ (8004bb0 <vQueueAddToRegistry+0x50>)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	4413      	add	r3, r2
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004b92:	e006      	b.n	8004ba2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	3301      	adds	r3, #1
 8004b98:	60fb      	str	r3, [r7, #12]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2b07      	cmp	r3, #7
 8004b9e:	d9e7      	bls.n	8004b70 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004ba0:	bf00      	nop
 8004ba2:	bf00      	nop
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	2000098c 	.word	0x2000098c

08004bb4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004bc4:	f001 fd00 	bl	80065c8 <vPortEnterCritical>
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004bce:	b25b      	sxtb	r3, r3
 8004bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd4:	d103      	bne.n	8004bde <vQueueWaitForMessageRestricted+0x2a>
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004be4:	b25b      	sxtb	r3, r3
 8004be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bea:	d103      	bne.n	8004bf4 <vQueueWaitForMessageRestricted+0x40>
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004bf4:	f001 fd1a 	bl	800662c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d106      	bne.n	8004c0e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	3324      	adds	r3, #36	@ 0x24
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	68b9      	ldr	r1, [r7, #8]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f000 fc6d 	bl	80054e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004c0e:	6978      	ldr	r0, [r7, #20]
 8004c10:	f7ff ff26 	bl	8004a60 <prvUnlockQueue>
	}
 8004c14:	bf00      	nop
 8004c16:	3718      	adds	r7, #24
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b08e      	sub	sp, #56	@ 0x38
 8004c20:	af04      	add	r7, sp, #16
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
 8004c28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10b      	bne.n	8004c48 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c34:	f383 8811 	msr	BASEPRI, r3
 8004c38:	f3bf 8f6f 	isb	sy
 8004c3c:	f3bf 8f4f 	dsb	sy
 8004c40:	623b      	str	r3, [r7, #32]
}
 8004c42:	bf00      	nop
 8004c44:	bf00      	nop
 8004c46:	e7fd      	b.n	8004c44 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10b      	bne.n	8004c66 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	61fb      	str	r3, [r7, #28]
}
 8004c60:	bf00      	nop
 8004c62:	bf00      	nop
 8004c64:	e7fd      	b.n	8004c62 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c66:	23a8      	movs	r3, #168	@ 0xa8
 8004c68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	2ba8      	cmp	r3, #168	@ 0xa8
 8004c6e:	d00b      	beq.n	8004c88 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	61bb      	str	r3, [r7, #24]
}
 8004c82:	bf00      	nop
 8004c84:	bf00      	nop
 8004c86:	e7fd      	b.n	8004c84 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004c88:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d01e      	beq.n	8004cce <xTaskCreateStatic+0xb2>
 8004c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d01b      	beq.n	8004cce <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c98:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c9e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ca8:	2300      	movs	r3, #0
 8004caa:	9303      	str	r3, [sp, #12]
 8004cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cae:	9302      	str	r3, [sp, #8]
 8004cb0:	f107 0314 	add.w	r3, r7, #20
 8004cb4:	9301      	str	r3, [sp, #4]
 8004cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	68b9      	ldr	r1, [r7, #8]
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 f851 	bl	8004d68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004cc6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004cc8:	f000 f8f6 	bl	8004eb8 <prvAddNewTaskToReadyList>
 8004ccc:	e001      	b.n	8004cd2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004cd2:	697b      	ldr	r3, [r7, #20]
	}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3728      	adds	r7, #40	@ 0x28
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b08c      	sub	sp, #48	@ 0x30
 8004ce0:	af04      	add	r7, sp, #16
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	603b      	str	r3, [r7, #0]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004cec:	88fb      	ldrh	r3, [r7, #6]
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f001 fd8b 	bl	800680c <pvPortMalloc>
 8004cf6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00e      	beq.n	8004d1c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004cfe:	20a8      	movs	r0, #168	@ 0xa8
 8004d00:	f001 fd84 	bl	800680c <pvPortMalloc>
 8004d04:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d12:	e005      	b.n	8004d20 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d14:	6978      	ldr	r0, [r7, #20]
 8004d16:	f001 fe47 	bl	80069a8 <vPortFree>
 8004d1a:	e001      	b.n	8004d20 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d017      	beq.n	8004d56 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d2e:	88fa      	ldrh	r2, [r7, #6]
 8004d30:	2300      	movs	r3, #0
 8004d32:	9303      	str	r3, [sp, #12]
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	9302      	str	r3, [sp, #8]
 8004d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d3a:	9301      	str	r3, [sp, #4]
 8004d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	68b9      	ldr	r1, [r7, #8]
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 f80f 	bl	8004d68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d4a:	69f8      	ldr	r0, [r7, #28]
 8004d4c:	f000 f8b4 	bl	8004eb8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d50:	2301      	movs	r3, #1
 8004d52:	61bb      	str	r3, [r7, #24]
 8004d54:	e002      	b.n	8004d5c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d56:	f04f 33ff 	mov.w	r3, #4294967295
 8004d5a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004d5c:	69bb      	ldr	r3, [r7, #24]
	}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3720      	adds	r7, #32
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
	...

08004d68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b088      	sub	sp, #32
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d78:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	461a      	mov	r2, r3
 8004d80:	21a5      	movs	r1, #165	@ 0xa5
 8004d82:	f001 ff65 	bl	8006c50 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004d90:	3b01      	subs	r3, #1
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	f023 0307 	bic.w	r3, r3, #7
 8004d9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00b      	beq.n	8004dc2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dae:	f383 8811 	msr	BASEPRI, r3
 8004db2:	f3bf 8f6f 	isb	sy
 8004db6:	f3bf 8f4f 	dsb	sy
 8004dba:	617b      	str	r3, [r7, #20]
}
 8004dbc:	bf00      	nop
 8004dbe:	bf00      	nop
 8004dc0:	e7fd      	b.n	8004dbe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d01f      	beq.n	8004e08 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004dc8:	2300      	movs	r3, #0
 8004dca:	61fb      	str	r3, [r7, #28]
 8004dcc:	e012      	b.n	8004df4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	7819      	ldrb	r1, [r3, #0]
 8004dd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	4413      	add	r3, r2
 8004ddc:	3334      	adds	r3, #52	@ 0x34
 8004dde:	460a      	mov	r2, r1
 8004de0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	4413      	add	r3, r2
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d006      	beq.n	8004dfc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	3301      	adds	r3, #1
 8004df2:	61fb      	str	r3, [r7, #28]
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	2b0f      	cmp	r3, #15
 8004df8:	d9e9      	bls.n	8004dce <prvInitialiseNewTask+0x66>
 8004dfa:	e000      	b.n	8004dfe <prvInitialiseNewTask+0x96>
			{
				break;
 8004dfc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e06:	e003      	b.n	8004e10 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e12:	2b37      	cmp	r3, #55	@ 0x37
 8004e14:	d901      	bls.n	8004e1a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e16:	2337      	movs	r3, #55	@ 0x37
 8004e18:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e1e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e24:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e28:	2200      	movs	r2, #0
 8004e2a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e2e:	3304      	adds	r3, #4
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7fe ff49 	bl	8003cc8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e38:	3318      	adds	r3, #24
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7fe ff44 	bl	8003cc8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e44:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e48:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e4e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e54:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e68:	3354      	adds	r3, #84	@ 0x54
 8004e6a:	224c      	movs	r2, #76	@ 0x4c
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f001 feee 	bl	8006c50 <memset>
 8004e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e76:	4a0d      	ldr	r2, [pc, #52]	@ (8004eac <prvInitialiseNewTask+0x144>)
 8004e78:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e7c:	4a0c      	ldr	r2, [pc, #48]	@ (8004eb0 <prvInitialiseNewTask+0x148>)
 8004e7e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e82:	4a0c      	ldr	r2, [pc, #48]	@ (8004eb4 <prvInitialiseNewTask+0x14c>)
 8004e84:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	68f9      	ldr	r1, [r7, #12]
 8004e8a:	69b8      	ldr	r0, [r7, #24]
 8004e8c:	f001 fa6a 	bl	8006364 <pxPortInitialiseStack>
 8004e90:	4602      	mov	r2, r0
 8004e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e94:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d002      	beq.n	8004ea2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ea0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ea2:	bf00      	nop
 8004ea4:	3720      	adds	r7, #32
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	20004c20 	.word	0x20004c20
 8004eb0:	20004c88 	.word	0x20004c88
 8004eb4:	20004cf0 	.word	0x20004cf0

08004eb8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004ec0:	f001 fb82 	bl	80065c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ec4:	4b2d      	ldr	r3, [pc, #180]	@ (8004f7c <prvAddNewTaskToReadyList+0xc4>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	4a2c      	ldr	r2, [pc, #176]	@ (8004f7c <prvAddNewTaskToReadyList+0xc4>)
 8004ecc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004ece:	4b2c      	ldr	r3, [pc, #176]	@ (8004f80 <prvAddNewTaskToReadyList+0xc8>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d109      	bne.n	8004eea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004ed6:	4a2a      	ldr	r2, [pc, #168]	@ (8004f80 <prvAddNewTaskToReadyList+0xc8>)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004edc:	4b27      	ldr	r3, [pc, #156]	@ (8004f7c <prvAddNewTaskToReadyList+0xc4>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d110      	bne.n	8004f06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004ee4:	f000 fc2e 	bl	8005744 <prvInitialiseTaskLists>
 8004ee8:	e00d      	b.n	8004f06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004eea:	4b26      	ldr	r3, [pc, #152]	@ (8004f84 <prvAddNewTaskToReadyList+0xcc>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d109      	bne.n	8004f06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ef2:	4b23      	ldr	r3, [pc, #140]	@ (8004f80 <prvAddNewTaskToReadyList+0xc8>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d802      	bhi.n	8004f06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f00:	4a1f      	ldr	r2, [pc, #124]	@ (8004f80 <prvAddNewTaskToReadyList+0xc8>)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004f06:	4b20      	ldr	r3, [pc, #128]	@ (8004f88 <prvAddNewTaskToReadyList+0xd0>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	4a1e      	ldr	r2, [pc, #120]	@ (8004f88 <prvAddNewTaskToReadyList+0xd0>)
 8004f0e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004f10:	4b1d      	ldr	r3, [pc, #116]	@ (8004f88 <prvAddNewTaskToReadyList+0xd0>)
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8004f8c <prvAddNewTaskToReadyList+0xd4>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d903      	bls.n	8004f2c <prvAddNewTaskToReadyList+0x74>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f28:	4a18      	ldr	r2, [pc, #96]	@ (8004f8c <prvAddNewTaskToReadyList+0xd4>)
 8004f2a:	6013      	str	r3, [r2, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f30:	4613      	mov	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4a15      	ldr	r2, [pc, #84]	@ (8004f90 <prvAddNewTaskToReadyList+0xd8>)
 8004f3a:	441a      	add	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	3304      	adds	r3, #4
 8004f40:	4619      	mov	r1, r3
 8004f42:	4610      	mov	r0, r2
 8004f44:	f7fe fecd 	bl	8003ce2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004f48:	f001 fb70 	bl	800662c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8004f84 <prvAddNewTaskToReadyList+0xcc>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00e      	beq.n	8004f72 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f54:	4b0a      	ldr	r3, [pc, #40]	@ (8004f80 <prvAddNewTaskToReadyList+0xc8>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d207      	bcs.n	8004f72 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004f62:	4b0c      	ldr	r3, [pc, #48]	@ (8004f94 <prvAddNewTaskToReadyList+0xdc>)
 8004f64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	f3bf 8f4f 	dsb	sy
 8004f6e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f72:	bf00      	nop
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	20000ea0 	.word	0x20000ea0
 8004f80:	200009cc 	.word	0x200009cc
 8004f84:	20000eac 	.word	0x20000eac
 8004f88:	20000ebc 	.word	0x20000ebc
 8004f8c:	20000ea8 	.word	0x20000ea8
 8004f90:	200009d0 	.word	0x200009d0
 8004f94:	e000ed04 	.word	0xe000ed04

08004f98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d018      	beq.n	8004fdc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004faa:	4b14      	ldr	r3, [pc, #80]	@ (8004ffc <vTaskDelay+0x64>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00b      	beq.n	8004fca <vTaskDelay+0x32>
	__asm volatile
 8004fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	60bb      	str	r3, [r7, #8]
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop
 8004fc8:	e7fd      	b.n	8004fc6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004fca:	f000 f88b 	bl	80050e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004fce:	2100      	movs	r1, #0
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fe19 	bl	8005c08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004fd6:	f000 f893 	bl	8005100 <xTaskResumeAll>
 8004fda:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d107      	bne.n	8004ff2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004fe2:	4b07      	ldr	r3, [pc, #28]	@ (8005000 <vTaskDelay+0x68>)
 8004fe4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ff2:	bf00      	nop
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	20000ec8 	.word	0x20000ec8
 8005000:	e000ed04 	.word	0xe000ed04

08005004 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b08a      	sub	sp, #40	@ 0x28
 8005008:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800500a:	2300      	movs	r3, #0
 800500c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800500e:	2300      	movs	r3, #0
 8005010:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005012:	463a      	mov	r2, r7
 8005014:	1d39      	adds	r1, r7, #4
 8005016:	f107 0308 	add.w	r3, r7, #8
 800501a:	4618      	mov	r0, r3
 800501c:	f7fe fe00 	bl	8003c20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005020:	6839      	ldr	r1, [r7, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	9202      	str	r2, [sp, #8]
 8005028:	9301      	str	r3, [sp, #4]
 800502a:	2300      	movs	r3, #0
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	2300      	movs	r3, #0
 8005030:	460a      	mov	r2, r1
 8005032:	4924      	ldr	r1, [pc, #144]	@ (80050c4 <vTaskStartScheduler+0xc0>)
 8005034:	4824      	ldr	r0, [pc, #144]	@ (80050c8 <vTaskStartScheduler+0xc4>)
 8005036:	f7ff fdf1 	bl	8004c1c <xTaskCreateStatic>
 800503a:	4603      	mov	r3, r0
 800503c:	4a23      	ldr	r2, [pc, #140]	@ (80050cc <vTaskStartScheduler+0xc8>)
 800503e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005040:	4b22      	ldr	r3, [pc, #136]	@ (80050cc <vTaskStartScheduler+0xc8>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d002      	beq.n	800504e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005048:	2301      	movs	r3, #1
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	e001      	b.n	8005052 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800504e:	2300      	movs	r3, #0
 8005050:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d102      	bne.n	800505e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005058:	f000 fe2a 	bl	8005cb0 <xTimerCreateTimerTask>
 800505c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d11b      	bne.n	800509c <vTaskStartScheduler+0x98>
	__asm volatile
 8005064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005068:	f383 8811 	msr	BASEPRI, r3
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	613b      	str	r3, [r7, #16]
}
 8005076:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005078:	4b15      	ldr	r3, [pc, #84]	@ (80050d0 <vTaskStartScheduler+0xcc>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	3354      	adds	r3, #84	@ 0x54
 800507e:	4a15      	ldr	r2, [pc, #84]	@ (80050d4 <vTaskStartScheduler+0xd0>)
 8005080:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005082:	4b15      	ldr	r3, [pc, #84]	@ (80050d8 <vTaskStartScheduler+0xd4>)
 8005084:	f04f 32ff 	mov.w	r2, #4294967295
 8005088:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800508a:	4b14      	ldr	r3, [pc, #80]	@ (80050dc <vTaskStartScheduler+0xd8>)
 800508c:	2201      	movs	r2, #1
 800508e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005090:	4b13      	ldr	r3, [pc, #76]	@ (80050e0 <vTaskStartScheduler+0xdc>)
 8005092:	2200      	movs	r2, #0
 8005094:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005096:	f001 f9f3 	bl	8006480 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800509a:	e00f      	b.n	80050bc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a2:	d10b      	bne.n	80050bc <vTaskStartScheduler+0xb8>
	__asm volatile
 80050a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a8:	f383 8811 	msr	BASEPRI, r3
 80050ac:	f3bf 8f6f 	isb	sy
 80050b0:	f3bf 8f4f 	dsb	sy
 80050b4:	60fb      	str	r3, [r7, #12]
}
 80050b6:	bf00      	nop
 80050b8:	bf00      	nop
 80050ba:	e7fd      	b.n	80050b8 <vTaskStartScheduler+0xb4>
}
 80050bc:	bf00      	nop
 80050be:	3718      	adds	r7, #24
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	08007668 	.word	0x08007668
 80050c8:	08005715 	.word	0x08005715
 80050cc:	20000ec4 	.word	0x20000ec4
 80050d0:	200009cc 	.word	0x200009cc
 80050d4:	20000010 	.word	0x20000010
 80050d8:	20000ec0 	.word	0x20000ec0
 80050dc:	20000eac 	.word	0x20000eac
 80050e0:	20000ea4 	.word	0x20000ea4

080050e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80050e4:	b480      	push	{r7}
 80050e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80050e8:	4b04      	ldr	r3, [pc, #16]	@ (80050fc <vTaskSuspendAll+0x18>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3301      	adds	r3, #1
 80050ee:	4a03      	ldr	r2, [pc, #12]	@ (80050fc <vTaskSuspendAll+0x18>)
 80050f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80050f2:	bf00      	nop
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	20000ec8 	.word	0x20000ec8

08005100 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005106:	2300      	movs	r3, #0
 8005108:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800510a:	2300      	movs	r3, #0
 800510c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800510e:	4b42      	ldr	r3, [pc, #264]	@ (8005218 <xTaskResumeAll+0x118>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10b      	bne.n	800512e <xTaskResumeAll+0x2e>
	__asm volatile
 8005116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800511a:	f383 8811 	msr	BASEPRI, r3
 800511e:	f3bf 8f6f 	isb	sy
 8005122:	f3bf 8f4f 	dsb	sy
 8005126:	603b      	str	r3, [r7, #0]
}
 8005128:	bf00      	nop
 800512a:	bf00      	nop
 800512c:	e7fd      	b.n	800512a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800512e:	f001 fa4b 	bl	80065c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005132:	4b39      	ldr	r3, [pc, #228]	@ (8005218 <xTaskResumeAll+0x118>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	3b01      	subs	r3, #1
 8005138:	4a37      	ldr	r2, [pc, #220]	@ (8005218 <xTaskResumeAll+0x118>)
 800513a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800513c:	4b36      	ldr	r3, [pc, #216]	@ (8005218 <xTaskResumeAll+0x118>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d162      	bne.n	800520a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005144:	4b35      	ldr	r3, [pc, #212]	@ (800521c <xTaskResumeAll+0x11c>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d05e      	beq.n	800520a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800514c:	e02f      	b.n	80051ae <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800514e:	4b34      	ldr	r3, [pc, #208]	@ (8005220 <xTaskResumeAll+0x120>)
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	3318      	adds	r3, #24
 800515a:	4618      	mov	r0, r3
 800515c:	f7fe fe1e 	bl	8003d9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	3304      	adds	r3, #4
 8005164:	4618      	mov	r0, r3
 8005166:	f7fe fe19 	bl	8003d9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800516e:	4b2d      	ldr	r3, [pc, #180]	@ (8005224 <xTaskResumeAll+0x124>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d903      	bls.n	800517e <xTaskResumeAll+0x7e>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800517a:	4a2a      	ldr	r2, [pc, #168]	@ (8005224 <xTaskResumeAll+0x124>)
 800517c:	6013      	str	r3, [r2, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005182:	4613      	mov	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4413      	add	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4a27      	ldr	r2, [pc, #156]	@ (8005228 <xTaskResumeAll+0x128>)
 800518c:	441a      	add	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	3304      	adds	r3, #4
 8005192:	4619      	mov	r1, r3
 8005194:	4610      	mov	r0, r2
 8005196:	f7fe fda4 	bl	8003ce2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800519e:	4b23      	ldr	r3, [pc, #140]	@ (800522c <xTaskResumeAll+0x12c>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d302      	bcc.n	80051ae <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80051a8:	4b21      	ldr	r3, [pc, #132]	@ (8005230 <xTaskResumeAll+0x130>)
 80051aa:	2201      	movs	r2, #1
 80051ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051ae:	4b1c      	ldr	r3, [pc, #112]	@ (8005220 <xTaskResumeAll+0x120>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1cb      	bne.n	800514e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80051bc:	f000 fb66 	bl	800588c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80051c0:	4b1c      	ldr	r3, [pc, #112]	@ (8005234 <xTaskResumeAll+0x134>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d010      	beq.n	80051ee <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80051cc:	f000 f846 	bl	800525c <xTaskIncrementTick>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d002      	beq.n	80051dc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80051d6:	4b16      	ldr	r3, [pc, #88]	@ (8005230 <xTaskResumeAll+0x130>)
 80051d8:	2201      	movs	r2, #1
 80051da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	3b01      	subs	r3, #1
 80051e0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1f1      	bne.n	80051cc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80051e8:	4b12      	ldr	r3, [pc, #72]	@ (8005234 <xTaskResumeAll+0x134>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80051ee:	4b10      	ldr	r3, [pc, #64]	@ (8005230 <xTaskResumeAll+0x130>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d009      	beq.n	800520a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80051f6:	2301      	movs	r3, #1
 80051f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80051fa:	4b0f      	ldr	r3, [pc, #60]	@ (8005238 <xTaskResumeAll+0x138>)
 80051fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	f3bf 8f4f 	dsb	sy
 8005206:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800520a:	f001 fa0f 	bl	800662c <vPortExitCritical>

	return xAlreadyYielded;
 800520e:	68bb      	ldr	r3, [r7, #8]
}
 8005210:	4618      	mov	r0, r3
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	20000ec8 	.word	0x20000ec8
 800521c:	20000ea0 	.word	0x20000ea0
 8005220:	20000e60 	.word	0x20000e60
 8005224:	20000ea8 	.word	0x20000ea8
 8005228:	200009d0 	.word	0x200009d0
 800522c:	200009cc 	.word	0x200009cc
 8005230:	20000eb4 	.word	0x20000eb4
 8005234:	20000eb0 	.word	0x20000eb0
 8005238:	e000ed04 	.word	0xe000ed04

0800523c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005242:	4b05      	ldr	r3, [pc, #20]	@ (8005258 <xTaskGetTickCount+0x1c>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005248:	687b      	ldr	r3, [r7, #4]
}
 800524a:	4618      	mov	r0, r3
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	20000ea4 	.word	0x20000ea4

0800525c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005262:	2300      	movs	r3, #0
 8005264:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005266:	4b4f      	ldr	r3, [pc, #316]	@ (80053a4 <xTaskIncrementTick+0x148>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	f040 8090 	bne.w	8005390 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005270:	4b4d      	ldr	r3, [pc, #308]	@ (80053a8 <xTaskIncrementTick+0x14c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	3301      	adds	r3, #1
 8005276:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005278:	4a4b      	ldr	r2, [pc, #300]	@ (80053a8 <xTaskIncrementTick+0x14c>)
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d121      	bne.n	80052c8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005284:	4b49      	ldr	r3, [pc, #292]	@ (80053ac <xTaskIncrementTick+0x150>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00b      	beq.n	80052a6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800528e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005292:	f383 8811 	msr	BASEPRI, r3
 8005296:	f3bf 8f6f 	isb	sy
 800529a:	f3bf 8f4f 	dsb	sy
 800529e:	603b      	str	r3, [r7, #0]
}
 80052a0:	bf00      	nop
 80052a2:	bf00      	nop
 80052a4:	e7fd      	b.n	80052a2 <xTaskIncrementTick+0x46>
 80052a6:	4b41      	ldr	r3, [pc, #260]	@ (80053ac <xTaskIncrementTick+0x150>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	4b40      	ldr	r3, [pc, #256]	@ (80053b0 <xTaskIncrementTick+0x154>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a3e      	ldr	r2, [pc, #248]	@ (80053ac <xTaskIncrementTick+0x150>)
 80052b2:	6013      	str	r3, [r2, #0]
 80052b4:	4a3e      	ldr	r2, [pc, #248]	@ (80053b0 <xTaskIncrementTick+0x154>)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6013      	str	r3, [r2, #0]
 80052ba:	4b3e      	ldr	r3, [pc, #248]	@ (80053b4 <xTaskIncrementTick+0x158>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	3301      	adds	r3, #1
 80052c0:	4a3c      	ldr	r2, [pc, #240]	@ (80053b4 <xTaskIncrementTick+0x158>)
 80052c2:	6013      	str	r3, [r2, #0]
 80052c4:	f000 fae2 	bl	800588c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80052c8:	4b3b      	ldr	r3, [pc, #236]	@ (80053b8 <xTaskIncrementTick+0x15c>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d349      	bcc.n	8005366 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052d2:	4b36      	ldr	r3, [pc, #216]	@ (80053ac <xTaskIncrementTick+0x150>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d104      	bne.n	80052e6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052dc:	4b36      	ldr	r3, [pc, #216]	@ (80053b8 <xTaskIncrementTick+0x15c>)
 80052de:	f04f 32ff 	mov.w	r2, #4294967295
 80052e2:	601a      	str	r2, [r3, #0]
					break;
 80052e4:	e03f      	b.n	8005366 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052e6:	4b31      	ldr	r3, [pc, #196]	@ (80053ac <xTaskIncrementTick+0x150>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d203      	bcs.n	8005306 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80052fe:	4a2e      	ldr	r2, [pc, #184]	@ (80053b8 <xTaskIncrementTick+0x15c>)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005304:	e02f      	b.n	8005366 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	3304      	adds	r3, #4
 800530a:	4618      	mov	r0, r3
 800530c:	f7fe fd46 	bl	8003d9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005314:	2b00      	cmp	r3, #0
 8005316:	d004      	beq.n	8005322 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	3318      	adds	r3, #24
 800531c:	4618      	mov	r0, r3
 800531e:	f7fe fd3d 	bl	8003d9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005326:	4b25      	ldr	r3, [pc, #148]	@ (80053bc <xTaskIncrementTick+0x160>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	429a      	cmp	r2, r3
 800532c:	d903      	bls.n	8005336 <xTaskIncrementTick+0xda>
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005332:	4a22      	ldr	r2, [pc, #136]	@ (80053bc <xTaskIncrementTick+0x160>)
 8005334:	6013      	str	r3, [r2, #0]
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800533a:	4613      	mov	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4a1f      	ldr	r2, [pc, #124]	@ (80053c0 <xTaskIncrementTick+0x164>)
 8005344:	441a      	add	r2, r3
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	3304      	adds	r3, #4
 800534a:	4619      	mov	r1, r3
 800534c:	4610      	mov	r0, r2
 800534e:	f7fe fcc8 	bl	8003ce2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005356:	4b1b      	ldr	r3, [pc, #108]	@ (80053c4 <xTaskIncrementTick+0x168>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800535c:	429a      	cmp	r2, r3
 800535e:	d3b8      	bcc.n	80052d2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005360:	2301      	movs	r3, #1
 8005362:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005364:	e7b5      	b.n	80052d2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005366:	4b17      	ldr	r3, [pc, #92]	@ (80053c4 <xTaskIncrementTick+0x168>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800536c:	4914      	ldr	r1, [pc, #80]	@ (80053c0 <xTaskIncrementTick+0x164>)
 800536e:	4613      	mov	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	440b      	add	r3, r1
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d901      	bls.n	8005382 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800537e:	2301      	movs	r3, #1
 8005380:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005382:	4b11      	ldr	r3, [pc, #68]	@ (80053c8 <xTaskIncrementTick+0x16c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d007      	beq.n	800539a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800538a:	2301      	movs	r3, #1
 800538c:	617b      	str	r3, [r7, #20]
 800538e:	e004      	b.n	800539a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005390:	4b0e      	ldr	r3, [pc, #56]	@ (80053cc <xTaskIncrementTick+0x170>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	3301      	adds	r3, #1
 8005396:	4a0d      	ldr	r2, [pc, #52]	@ (80053cc <xTaskIncrementTick+0x170>)
 8005398:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800539a:	697b      	ldr	r3, [r7, #20]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3718      	adds	r7, #24
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	20000ec8 	.word	0x20000ec8
 80053a8:	20000ea4 	.word	0x20000ea4
 80053ac:	20000e58 	.word	0x20000e58
 80053b0:	20000e5c 	.word	0x20000e5c
 80053b4:	20000eb8 	.word	0x20000eb8
 80053b8:	20000ec0 	.word	0x20000ec0
 80053bc:	20000ea8 	.word	0x20000ea8
 80053c0:	200009d0 	.word	0x200009d0
 80053c4:	200009cc 	.word	0x200009cc
 80053c8:	20000eb4 	.word	0x20000eb4
 80053cc:	20000eb0 	.word	0x20000eb0

080053d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80053d6:	4b2b      	ldr	r3, [pc, #172]	@ (8005484 <vTaskSwitchContext+0xb4>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80053de:	4b2a      	ldr	r3, [pc, #168]	@ (8005488 <vTaskSwitchContext+0xb8>)
 80053e0:	2201      	movs	r2, #1
 80053e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80053e4:	e047      	b.n	8005476 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80053e6:	4b28      	ldr	r3, [pc, #160]	@ (8005488 <vTaskSwitchContext+0xb8>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053ec:	4b27      	ldr	r3, [pc, #156]	@ (800548c <vTaskSwitchContext+0xbc>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	60fb      	str	r3, [r7, #12]
 80053f2:	e011      	b.n	8005418 <vTaskSwitchContext+0x48>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10b      	bne.n	8005412 <vTaskSwitchContext+0x42>
	__asm volatile
 80053fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053fe:	f383 8811 	msr	BASEPRI, r3
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	f3bf 8f4f 	dsb	sy
 800540a:	607b      	str	r3, [r7, #4]
}
 800540c:	bf00      	nop
 800540e:	bf00      	nop
 8005410:	e7fd      	b.n	800540e <vTaskSwitchContext+0x3e>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	3b01      	subs	r3, #1
 8005416:	60fb      	str	r3, [r7, #12]
 8005418:	491d      	ldr	r1, [pc, #116]	@ (8005490 <vTaskSwitchContext+0xc0>)
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	4613      	mov	r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4413      	add	r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	440b      	add	r3, r1
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d0e3      	beq.n	80053f4 <vTaskSwitchContext+0x24>
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	4613      	mov	r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	4413      	add	r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4a16      	ldr	r2, [pc, #88]	@ (8005490 <vTaskSwitchContext+0xc0>)
 8005438:	4413      	add	r3, r2
 800543a:	60bb      	str	r3, [r7, #8]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	605a      	str	r2, [r3, #4]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	3308      	adds	r3, #8
 800544e:	429a      	cmp	r2, r3
 8005450:	d104      	bne.n	800545c <vTaskSwitchContext+0x8c>
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	605a      	str	r2, [r3, #4]
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	4a0c      	ldr	r2, [pc, #48]	@ (8005494 <vTaskSwitchContext+0xc4>)
 8005464:	6013      	str	r3, [r2, #0]
 8005466:	4a09      	ldr	r2, [pc, #36]	@ (800548c <vTaskSwitchContext+0xbc>)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800546c:	4b09      	ldr	r3, [pc, #36]	@ (8005494 <vTaskSwitchContext+0xc4>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	3354      	adds	r3, #84	@ 0x54
 8005472:	4a09      	ldr	r2, [pc, #36]	@ (8005498 <vTaskSwitchContext+0xc8>)
 8005474:	6013      	str	r3, [r2, #0]
}
 8005476:	bf00      	nop
 8005478:	3714      	adds	r7, #20
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	20000ec8 	.word	0x20000ec8
 8005488:	20000eb4 	.word	0x20000eb4
 800548c:	20000ea8 	.word	0x20000ea8
 8005490:	200009d0 	.word	0x200009d0
 8005494:	200009cc 	.word	0x200009cc
 8005498:	20000010 	.word	0x20000010

0800549c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10b      	bne.n	80054c4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80054ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b0:	f383 8811 	msr	BASEPRI, r3
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	60fb      	str	r3, [r7, #12]
}
 80054be:	bf00      	nop
 80054c0:	bf00      	nop
 80054c2:	e7fd      	b.n	80054c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054c4:	4b07      	ldr	r3, [pc, #28]	@ (80054e4 <vTaskPlaceOnEventList+0x48>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	3318      	adds	r3, #24
 80054ca:	4619      	mov	r1, r3
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f7fe fc2c 	bl	8003d2a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80054d2:	2101      	movs	r1, #1
 80054d4:	6838      	ldr	r0, [r7, #0]
 80054d6:	f000 fb97 	bl	8005c08 <prvAddCurrentTaskToDelayedList>
}
 80054da:	bf00      	nop
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	200009cc 	.word	0x200009cc

080054e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10b      	bne.n	8005512 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80054fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054fe:	f383 8811 	msr	BASEPRI, r3
 8005502:	f3bf 8f6f 	isb	sy
 8005506:	f3bf 8f4f 	dsb	sy
 800550a:	617b      	str	r3, [r7, #20]
}
 800550c:	bf00      	nop
 800550e:	bf00      	nop
 8005510:	e7fd      	b.n	800550e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005512:	4b0a      	ldr	r3, [pc, #40]	@ (800553c <vTaskPlaceOnEventListRestricted+0x54>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	3318      	adds	r3, #24
 8005518:	4619      	mov	r1, r3
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f7fe fbe1 	bl	8003ce2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d002      	beq.n	800552c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005526:	f04f 33ff 	mov.w	r3, #4294967295
 800552a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800552c:	6879      	ldr	r1, [r7, #4]
 800552e:	68b8      	ldr	r0, [r7, #8]
 8005530:	f000 fb6a 	bl	8005c08 <prvAddCurrentTaskToDelayedList>
	}
 8005534:	bf00      	nop
 8005536:	3718      	adds	r7, #24
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	200009cc 	.word	0x200009cc

08005540 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10b      	bne.n	800556e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800555a:	f383 8811 	msr	BASEPRI, r3
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f3bf 8f4f 	dsb	sy
 8005566:	60fb      	str	r3, [r7, #12]
}
 8005568:	bf00      	nop
 800556a:	bf00      	nop
 800556c:	e7fd      	b.n	800556a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	3318      	adds	r3, #24
 8005572:	4618      	mov	r0, r3
 8005574:	f7fe fc12 	bl	8003d9c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005578:	4b1d      	ldr	r3, [pc, #116]	@ (80055f0 <xTaskRemoveFromEventList+0xb0>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d11d      	bne.n	80055bc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	3304      	adds	r3, #4
 8005584:	4618      	mov	r0, r3
 8005586:	f7fe fc09 	bl	8003d9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800558e:	4b19      	ldr	r3, [pc, #100]	@ (80055f4 <xTaskRemoveFromEventList+0xb4>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	429a      	cmp	r2, r3
 8005594:	d903      	bls.n	800559e <xTaskRemoveFromEventList+0x5e>
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800559a:	4a16      	ldr	r2, [pc, #88]	@ (80055f4 <xTaskRemoveFromEventList+0xb4>)
 800559c:	6013      	str	r3, [r2, #0]
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055a2:	4613      	mov	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	4413      	add	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4a13      	ldr	r2, [pc, #76]	@ (80055f8 <xTaskRemoveFromEventList+0xb8>)
 80055ac:	441a      	add	r2, r3
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	3304      	adds	r3, #4
 80055b2:	4619      	mov	r1, r3
 80055b4:	4610      	mov	r0, r2
 80055b6:	f7fe fb94 	bl	8003ce2 <vListInsertEnd>
 80055ba:	e005      	b.n	80055c8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	3318      	adds	r3, #24
 80055c0:	4619      	mov	r1, r3
 80055c2:	480e      	ldr	r0, [pc, #56]	@ (80055fc <xTaskRemoveFromEventList+0xbc>)
 80055c4:	f7fe fb8d 	bl	8003ce2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005600 <xTaskRemoveFromEventList+0xc0>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d905      	bls.n	80055e2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80055d6:	2301      	movs	r3, #1
 80055d8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80055da:	4b0a      	ldr	r3, [pc, #40]	@ (8005604 <xTaskRemoveFromEventList+0xc4>)
 80055dc:	2201      	movs	r2, #1
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	e001      	b.n	80055e6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80055e2:	2300      	movs	r3, #0
 80055e4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80055e6:	697b      	ldr	r3, [r7, #20]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3718      	adds	r7, #24
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	20000ec8 	.word	0x20000ec8
 80055f4:	20000ea8 	.word	0x20000ea8
 80055f8:	200009d0 	.word	0x200009d0
 80055fc:	20000e60 	.word	0x20000e60
 8005600:	200009cc 	.word	0x200009cc
 8005604:	20000eb4 	.word	0x20000eb4

08005608 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005610:	4b06      	ldr	r3, [pc, #24]	@ (800562c <vTaskInternalSetTimeOutState+0x24>)
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005618:	4b05      	ldr	r3, [pc, #20]	@ (8005630 <vTaskInternalSetTimeOutState+0x28>)
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	605a      	str	r2, [r3, #4]
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr
 800562c:	20000eb8 	.word	0x20000eb8
 8005630:	20000ea4 	.word	0x20000ea4

08005634 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b088      	sub	sp, #32
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10b      	bne.n	800565c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005648:	f383 8811 	msr	BASEPRI, r3
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	f3bf 8f4f 	dsb	sy
 8005654:	613b      	str	r3, [r7, #16]
}
 8005656:	bf00      	nop
 8005658:	bf00      	nop
 800565a:	e7fd      	b.n	8005658 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10b      	bne.n	800567a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005666:	f383 8811 	msr	BASEPRI, r3
 800566a:	f3bf 8f6f 	isb	sy
 800566e:	f3bf 8f4f 	dsb	sy
 8005672:	60fb      	str	r3, [r7, #12]
}
 8005674:	bf00      	nop
 8005676:	bf00      	nop
 8005678:	e7fd      	b.n	8005676 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800567a:	f000 ffa5 	bl	80065c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800567e:	4b1d      	ldr	r3, [pc, #116]	@ (80056f4 <xTaskCheckForTimeOut+0xc0>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005696:	d102      	bne.n	800569e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005698:	2300      	movs	r3, #0
 800569a:	61fb      	str	r3, [r7, #28]
 800569c:	e023      	b.n	80056e6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	4b15      	ldr	r3, [pc, #84]	@ (80056f8 <xTaskCheckForTimeOut+0xc4>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d007      	beq.n	80056ba <xTaskCheckForTimeOut+0x86>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d302      	bcc.n	80056ba <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80056b4:	2301      	movs	r3, #1
 80056b6:	61fb      	str	r3, [r7, #28]
 80056b8:	e015      	b.n	80056e6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d20b      	bcs.n	80056dc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	1ad2      	subs	r2, r2, r3
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f7ff ff99 	bl	8005608 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80056d6:	2300      	movs	r3, #0
 80056d8:	61fb      	str	r3, [r7, #28]
 80056da:	e004      	b.n	80056e6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	2200      	movs	r2, #0
 80056e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80056e2:	2301      	movs	r3, #1
 80056e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80056e6:	f000 ffa1 	bl	800662c <vPortExitCritical>

	return xReturn;
 80056ea:	69fb      	ldr	r3, [r7, #28]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3720      	adds	r7, #32
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	20000ea4 	.word	0x20000ea4
 80056f8:	20000eb8 	.word	0x20000eb8

080056fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80056fc:	b480      	push	{r7}
 80056fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005700:	4b03      	ldr	r3, [pc, #12]	@ (8005710 <vTaskMissedYield+0x14>)
 8005702:	2201      	movs	r2, #1
 8005704:	601a      	str	r2, [r3, #0]
}
 8005706:	bf00      	nop
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	20000eb4 	.word	0x20000eb4

08005714 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800571c:	f000 f852 	bl	80057c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005720:	4b06      	ldr	r3, [pc, #24]	@ (800573c <prvIdleTask+0x28>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d9f9      	bls.n	800571c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005728:	4b05      	ldr	r3, [pc, #20]	@ (8005740 <prvIdleTask+0x2c>)
 800572a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	f3bf 8f4f 	dsb	sy
 8005734:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005738:	e7f0      	b.n	800571c <prvIdleTask+0x8>
 800573a:	bf00      	nop
 800573c:	200009d0 	.word	0x200009d0
 8005740:	e000ed04 	.word	0xe000ed04

08005744 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800574a:	2300      	movs	r3, #0
 800574c:	607b      	str	r3, [r7, #4]
 800574e:	e00c      	b.n	800576a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	4613      	mov	r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4a12      	ldr	r2, [pc, #72]	@ (80057a4 <prvInitialiseTaskLists+0x60>)
 800575c:	4413      	add	r3, r2
 800575e:	4618      	mov	r0, r3
 8005760:	f7fe fa92 	bl	8003c88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3301      	adds	r3, #1
 8005768:	607b      	str	r3, [r7, #4]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b37      	cmp	r3, #55	@ 0x37
 800576e:	d9ef      	bls.n	8005750 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005770:	480d      	ldr	r0, [pc, #52]	@ (80057a8 <prvInitialiseTaskLists+0x64>)
 8005772:	f7fe fa89 	bl	8003c88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005776:	480d      	ldr	r0, [pc, #52]	@ (80057ac <prvInitialiseTaskLists+0x68>)
 8005778:	f7fe fa86 	bl	8003c88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800577c:	480c      	ldr	r0, [pc, #48]	@ (80057b0 <prvInitialiseTaskLists+0x6c>)
 800577e:	f7fe fa83 	bl	8003c88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005782:	480c      	ldr	r0, [pc, #48]	@ (80057b4 <prvInitialiseTaskLists+0x70>)
 8005784:	f7fe fa80 	bl	8003c88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005788:	480b      	ldr	r0, [pc, #44]	@ (80057b8 <prvInitialiseTaskLists+0x74>)
 800578a:	f7fe fa7d 	bl	8003c88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800578e:	4b0b      	ldr	r3, [pc, #44]	@ (80057bc <prvInitialiseTaskLists+0x78>)
 8005790:	4a05      	ldr	r2, [pc, #20]	@ (80057a8 <prvInitialiseTaskLists+0x64>)
 8005792:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005794:	4b0a      	ldr	r3, [pc, #40]	@ (80057c0 <prvInitialiseTaskLists+0x7c>)
 8005796:	4a05      	ldr	r2, [pc, #20]	@ (80057ac <prvInitialiseTaskLists+0x68>)
 8005798:	601a      	str	r2, [r3, #0]
}
 800579a:	bf00      	nop
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	200009d0 	.word	0x200009d0
 80057a8:	20000e30 	.word	0x20000e30
 80057ac:	20000e44 	.word	0x20000e44
 80057b0:	20000e60 	.word	0x20000e60
 80057b4:	20000e74 	.word	0x20000e74
 80057b8:	20000e8c 	.word	0x20000e8c
 80057bc:	20000e58 	.word	0x20000e58
 80057c0:	20000e5c 	.word	0x20000e5c

080057c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057ca:	e019      	b.n	8005800 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80057cc:	f000 fefc 	bl	80065c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057d0:	4b10      	ldr	r3, [pc, #64]	@ (8005814 <prvCheckTasksWaitingTermination+0x50>)
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	3304      	adds	r3, #4
 80057dc:	4618      	mov	r0, r3
 80057de:	f7fe fadd 	bl	8003d9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80057e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005818 <prvCheckTasksWaitingTermination+0x54>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	3b01      	subs	r3, #1
 80057e8:	4a0b      	ldr	r2, [pc, #44]	@ (8005818 <prvCheckTasksWaitingTermination+0x54>)
 80057ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80057ec:	4b0b      	ldr	r3, [pc, #44]	@ (800581c <prvCheckTasksWaitingTermination+0x58>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	3b01      	subs	r3, #1
 80057f2:	4a0a      	ldr	r2, [pc, #40]	@ (800581c <prvCheckTasksWaitingTermination+0x58>)
 80057f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80057f6:	f000 ff19 	bl	800662c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f810 	bl	8005820 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005800:	4b06      	ldr	r3, [pc, #24]	@ (800581c <prvCheckTasksWaitingTermination+0x58>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1e1      	bne.n	80057cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005808:	bf00      	nop
 800580a:	bf00      	nop
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	20000e74 	.word	0x20000e74
 8005818:	20000ea0 	.word	0x20000ea0
 800581c:	20000e88 	.word	0x20000e88

08005820 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	3354      	adds	r3, #84	@ 0x54
 800582c:	4618      	mov	r0, r3
 800582e:	f001 fa17 	bl	8006c60 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005838:	2b00      	cmp	r3, #0
 800583a:	d108      	bne.n	800584e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005840:	4618      	mov	r0, r3
 8005842:	f001 f8b1 	bl	80069a8 <vPortFree>
				vPortFree( pxTCB );
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f001 f8ae 	bl	80069a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800584c:	e019      	b.n	8005882 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005854:	2b01      	cmp	r3, #1
 8005856:	d103      	bne.n	8005860 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f001 f8a5 	bl	80069a8 <vPortFree>
	}
 800585e:	e010      	b.n	8005882 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005866:	2b02      	cmp	r3, #2
 8005868:	d00b      	beq.n	8005882 <prvDeleteTCB+0x62>
	__asm volatile
 800586a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800586e:	f383 8811 	msr	BASEPRI, r3
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	f3bf 8f4f 	dsb	sy
 800587a:	60fb      	str	r3, [r7, #12]
}
 800587c:	bf00      	nop
 800587e:	bf00      	nop
 8005880:	e7fd      	b.n	800587e <prvDeleteTCB+0x5e>
	}
 8005882:	bf00      	nop
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
	...

0800588c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005892:	4b0c      	ldr	r3, [pc, #48]	@ (80058c4 <prvResetNextTaskUnblockTime+0x38>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d104      	bne.n	80058a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800589c:	4b0a      	ldr	r3, [pc, #40]	@ (80058c8 <prvResetNextTaskUnblockTime+0x3c>)
 800589e:	f04f 32ff 	mov.w	r2, #4294967295
 80058a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80058a4:	e008      	b.n	80058b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058a6:	4b07      	ldr	r3, [pc, #28]	@ (80058c4 <prvResetNextTaskUnblockTime+0x38>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	4a04      	ldr	r2, [pc, #16]	@ (80058c8 <prvResetNextTaskUnblockTime+0x3c>)
 80058b6:	6013      	str	r3, [r2, #0]
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr
 80058c4:	20000e58 	.word	0x20000e58
 80058c8:	20000ec0 	.word	0x20000ec0

080058cc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80058d2:	4b05      	ldr	r3, [pc, #20]	@ (80058e8 <xTaskGetCurrentTaskHandle+0x1c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	607b      	str	r3, [r7, #4]

		return xReturn;
 80058d8:	687b      	ldr	r3, [r7, #4]
	}
 80058da:	4618      	mov	r0, r3
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	200009cc 	.word	0x200009cc

080058ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80058f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005920 <xTaskGetSchedulerState+0x34>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d102      	bne.n	8005900 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80058fa:	2301      	movs	r3, #1
 80058fc:	607b      	str	r3, [r7, #4]
 80058fe:	e008      	b.n	8005912 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005900:	4b08      	ldr	r3, [pc, #32]	@ (8005924 <xTaskGetSchedulerState+0x38>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d102      	bne.n	800590e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005908:	2302      	movs	r3, #2
 800590a:	607b      	str	r3, [r7, #4]
 800590c:	e001      	b.n	8005912 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800590e:	2300      	movs	r3, #0
 8005910:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005912:	687b      	ldr	r3, [r7, #4]
	}
 8005914:	4618      	mov	r0, r3
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr
 8005920:	20000eac 	.word	0x20000eac
 8005924:	20000ec8 	.word	0x20000ec8

08005928 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005934:	2300      	movs	r3, #0
 8005936:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d051      	beq.n	80059e2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005942:	4b2a      	ldr	r3, [pc, #168]	@ (80059ec <xTaskPriorityInherit+0xc4>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005948:	429a      	cmp	r2, r3
 800594a:	d241      	bcs.n	80059d0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	2b00      	cmp	r3, #0
 8005952:	db06      	blt.n	8005962 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005954:	4b25      	ldr	r3, [pc, #148]	@ (80059ec <xTaskPriorityInherit+0xc4>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800595a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	6959      	ldr	r1, [r3, #20]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800596a:	4613      	mov	r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4413      	add	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4a1f      	ldr	r2, [pc, #124]	@ (80059f0 <xTaskPriorityInherit+0xc8>)
 8005974:	4413      	add	r3, r2
 8005976:	4299      	cmp	r1, r3
 8005978:	d122      	bne.n	80059c0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	3304      	adds	r3, #4
 800597e:	4618      	mov	r0, r3
 8005980:	f7fe fa0c 	bl	8003d9c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005984:	4b19      	ldr	r3, [pc, #100]	@ (80059ec <xTaskPriorityInherit+0xc4>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005992:	4b18      	ldr	r3, [pc, #96]	@ (80059f4 <xTaskPriorityInherit+0xcc>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	429a      	cmp	r2, r3
 8005998:	d903      	bls.n	80059a2 <xTaskPriorityInherit+0x7a>
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800599e:	4a15      	ldr	r2, [pc, #84]	@ (80059f4 <xTaskPriorityInherit+0xcc>)
 80059a0:	6013      	str	r3, [r2, #0]
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059a6:	4613      	mov	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4413      	add	r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4a10      	ldr	r2, [pc, #64]	@ (80059f0 <xTaskPriorityInherit+0xc8>)
 80059b0:	441a      	add	r2, r3
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	3304      	adds	r3, #4
 80059b6:	4619      	mov	r1, r3
 80059b8:	4610      	mov	r0, r2
 80059ba:	f7fe f992 	bl	8003ce2 <vListInsertEnd>
 80059be:	e004      	b.n	80059ca <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80059c0:	4b0a      	ldr	r3, [pc, #40]	@ (80059ec <xTaskPriorityInherit+0xc4>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80059ca:	2301      	movs	r3, #1
 80059cc:	60fb      	str	r3, [r7, #12]
 80059ce:	e008      	b.n	80059e2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80059d4:	4b05      	ldr	r3, [pc, #20]	@ (80059ec <xTaskPriorityInherit+0xc4>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059da:	429a      	cmp	r2, r3
 80059dc:	d201      	bcs.n	80059e2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80059de:	2301      	movs	r3, #1
 80059e0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80059e2:	68fb      	ldr	r3, [r7, #12]
	}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	200009cc 	.word	0x200009cc
 80059f0:	200009d0 	.word	0x200009d0
 80059f4:	20000ea8 	.word	0x20000ea8

080059f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005a04:	2300      	movs	r3, #0
 8005a06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d058      	beq.n	8005ac0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005a0e:	4b2f      	ldr	r3, [pc, #188]	@ (8005acc <xTaskPriorityDisinherit+0xd4>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d00b      	beq.n	8005a30 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a1c:	f383 8811 	msr	BASEPRI, r3
 8005a20:	f3bf 8f6f 	isb	sy
 8005a24:	f3bf 8f4f 	dsb	sy
 8005a28:	60fb      	str	r3, [r7, #12]
}
 8005a2a:	bf00      	nop
 8005a2c:	bf00      	nop
 8005a2e:	e7fd      	b.n	8005a2c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10b      	bne.n	8005a50 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a3c:	f383 8811 	msr	BASEPRI, r3
 8005a40:	f3bf 8f6f 	isb	sy
 8005a44:	f3bf 8f4f 	dsb	sy
 8005a48:	60bb      	str	r3, [r7, #8]
}
 8005a4a:	bf00      	nop
 8005a4c:	bf00      	nop
 8005a4e:	e7fd      	b.n	8005a4c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a54:	1e5a      	subs	r2, r3, #1
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d02c      	beq.n	8005ac0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d128      	bne.n	8005ac0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	3304      	adds	r3, #4
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7fe f992 	bl	8003d9c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a84:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a90:	4b0f      	ldr	r3, [pc, #60]	@ (8005ad0 <xTaskPriorityDisinherit+0xd8>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d903      	bls.n	8005aa0 <xTaskPriorityDisinherit+0xa8>
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a9c:	4a0c      	ldr	r2, [pc, #48]	@ (8005ad0 <xTaskPriorityDisinherit+0xd8>)
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	4a09      	ldr	r2, [pc, #36]	@ (8005ad4 <xTaskPriorityDisinherit+0xdc>)
 8005aae:	441a      	add	r2, r3
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	3304      	adds	r3, #4
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	4610      	mov	r0, r2
 8005ab8:	f7fe f913 	bl	8003ce2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005abc:	2301      	movs	r3, #1
 8005abe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ac0:	697b      	ldr	r3, [r7, #20]
	}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3718      	adds	r7, #24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	200009cc 	.word	0x200009cc
 8005ad0:	20000ea8 	.word	0x20000ea8
 8005ad4:	200009d0 	.word	0x200009d0

08005ad8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b088      	sub	sp, #32
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d06c      	beq.n	8005bca <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10b      	bne.n	8005b10 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005afc:	f383 8811 	msr	BASEPRI, r3
 8005b00:	f3bf 8f6f 	isb	sy
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	60fb      	str	r3, [r7, #12]
}
 8005b0a:	bf00      	nop
 8005b0c:	bf00      	nop
 8005b0e:	e7fd      	b.n	8005b0c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d902      	bls.n	8005b20 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	61fb      	str	r3, [r7, #28]
 8005b1e:	e002      	b.n	8005b26 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b24:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2a:	69fa      	ldr	r2, [r7, #28]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d04c      	beq.n	8005bca <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d147      	bne.n	8005bca <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005b3a:	4b26      	ldr	r3, [pc, #152]	@ (8005bd4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	69ba      	ldr	r2, [r7, #24]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d10b      	bne.n	8005b5c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b48:	f383 8811 	msr	BASEPRI, r3
 8005b4c:	f3bf 8f6f 	isb	sy
 8005b50:	f3bf 8f4f 	dsb	sy
 8005b54:	60bb      	str	r3, [r7, #8]
}
 8005b56:	bf00      	nop
 8005b58:	bf00      	nop
 8005b5a:	e7fd      	b.n	8005b58 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b60:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	69fa      	ldr	r2, [r7, #28]
 8005b66:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	db04      	blt.n	8005b7a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	6959      	ldr	r1, [r3, #20]
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	4613      	mov	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4413      	add	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4a13      	ldr	r2, [pc, #76]	@ (8005bd8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005b8a:	4413      	add	r3, r2
 8005b8c:	4299      	cmp	r1, r3
 8005b8e:	d11c      	bne.n	8005bca <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	3304      	adds	r3, #4
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7fe f901 	bl	8003d9c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8005bdc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d903      	bls.n	8005bae <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005baa:	4a0c      	ldr	r2, [pc, #48]	@ (8005bdc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005bac:	6013      	str	r3, [r2, #0]
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4a07      	ldr	r2, [pc, #28]	@ (8005bd8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005bbc:	441a      	add	r2, r3
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	4610      	mov	r0, r2
 8005bc6:	f7fe f88c 	bl	8003ce2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bca:	bf00      	nop
 8005bcc:	3720      	adds	r7, #32
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	200009cc 	.word	0x200009cc
 8005bd8:	200009d0 	.word	0x200009d0
 8005bdc:	20000ea8 	.word	0x20000ea8

08005be0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005be0:	b480      	push	{r7}
 8005be2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005be4:	4b07      	ldr	r3, [pc, #28]	@ (8005c04 <pvTaskIncrementMutexHeldCount+0x24>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d004      	beq.n	8005bf6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005bec:	4b05      	ldr	r3, [pc, #20]	@ (8005c04 <pvTaskIncrementMutexHeldCount+0x24>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005bf2:	3201      	adds	r2, #1
 8005bf4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8005bf6:	4b03      	ldr	r3, [pc, #12]	@ (8005c04 <pvTaskIncrementMutexHeldCount+0x24>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
	}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	200009cc 	.word	0x200009cc

08005c08 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c12:	4b21      	ldr	r3, [pc, #132]	@ (8005c98 <prvAddCurrentTaskToDelayedList+0x90>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c18:	4b20      	ldr	r3, [pc, #128]	@ (8005c9c <prvAddCurrentTaskToDelayedList+0x94>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	3304      	adds	r3, #4
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fe f8bc 	bl	8003d9c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c2a:	d10a      	bne.n	8005c42 <prvAddCurrentTaskToDelayedList+0x3a>
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d007      	beq.n	8005c42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c32:	4b1a      	ldr	r3, [pc, #104]	@ (8005c9c <prvAddCurrentTaskToDelayedList+0x94>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	3304      	adds	r3, #4
 8005c38:	4619      	mov	r1, r3
 8005c3a:	4819      	ldr	r0, [pc, #100]	@ (8005ca0 <prvAddCurrentTaskToDelayedList+0x98>)
 8005c3c:	f7fe f851 	bl	8003ce2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c40:	e026      	b.n	8005c90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4413      	add	r3, r2
 8005c48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c4a:	4b14      	ldr	r3, [pc, #80]	@ (8005c9c <prvAddCurrentTaskToDelayedList+0x94>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d209      	bcs.n	8005c6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c5a:	4b12      	ldr	r3, [pc, #72]	@ (8005ca4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8005c9c <prvAddCurrentTaskToDelayedList+0x94>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	3304      	adds	r3, #4
 8005c64:	4619      	mov	r1, r3
 8005c66:	4610      	mov	r0, r2
 8005c68:	f7fe f85f 	bl	8003d2a <vListInsert>
}
 8005c6c:	e010      	b.n	8005c90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ca8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	4b0a      	ldr	r3, [pc, #40]	@ (8005c9c <prvAddCurrentTaskToDelayedList+0x94>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	3304      	adds	r3, #4
 8005c78:	4619      	mov	r1, r3
 8005c7a:	4610      	mov	r0, r2
 8005c7c:	f7fe f855 	bl	8003d2a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c80:	4b0a      	ldr	r3, [pc, #40]	@ (8005cac <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d202      	bcs.n	8005c90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005c8a:	4a08      	ldr	r2, [pc, #32]	@ (8005cac <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	6013      	str	r3, [r2, #0]
}
 8005c90:	bf00      	nop
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	20000ea4 	.word	0x20000ea4
 8005c9c:	200009cc 	.word	0x200009cc
 8005ca0:	20000e8c 	.word	0x20000e8c
 8005ca4:	20000e5c 	.word	0x20000e5c
 8005ca8:	20000e58 	.word	0x20000e58
 8005cac:	20000ec0 	.word	0x20000ec0

08005cb0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b08a      	sub	sp, #40	@ 0x28
 8005cb4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005cba:	f000 fb13 	bl	80062e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005cbe:	4b1d      	ldr	r3, [pc, #116]	@ (8005d34 <xTimerCreateTimerTask+0x84>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d021      	beq.n	8005d0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005cce:	1d3a      	adds	r2, r7, #4
 8005cd0:	f107 0108 	add.w	r1, r7, #8
 8005cd4:	f107 030c 	add.w	r3, r7, #12
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7fd ffbb 	bl	8003c54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005cde:	6879      	ldr	r1, [r7, #4]
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	9202      	str	r2, [sp, #8]
 8005ce6:	9301      	str	r3, [sp, #4]
 8005ce8:	2302      	movs	r3, #2
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	2300      	movs	r3, #0
 8005cee:	460a      	mov	r2, r1
 8005cf0:	4911      	ldr	r1, [pc, #68]	@ (8005d38 <xTimerCreateTimerTask+0x88>)
 8005cf2:	4812      	ldr	r0, [pc, #72]	@ (8005d3c <xTimerCreateTimerTask+0x8c>)
 8005cf4:	f7fe ff92 	bl	8004c1c <xTaskCreateStatic>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	4a11      	ldr	r2, [pc, #68]	@ (8005d40 <xTimerCreateTimerTask+0x90>)
 8005cfc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005cfe:	4b10      	ldr	r3, [pc, #64]	@ (8005d40 <xTimerCreateTimerTask+0x90>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d001      	beq.n	8005d0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005d06:	2301      	movs	r3, #1
 8005d08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10b      	bne.n	8005d28 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d14:	f383 8811 	msr	BASEPRI, r3
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	613b      	str	r3, [r7, #16]
}
 8005d22:	bf00      	nop
 8005d24:	bf00      	nop
 8005d26:	e7fd      	b.n	8005d24 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005d28:	697b      	ldr	r3, [r7, #20]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3718      	adds	r7, #24
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	20000efc 	.word	0x20000efc
 8005d38:	08007670 	.word	0x08007670
 8005d3c:	08005e7d 	.word	0x08005e7d
 8005d40:	20000f00 	.word	0x20000f00

08005d44 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b08a      	sub	sp, #40	@ 0x28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
 8005d50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005d52:	2300      	movs	r3, #0
 8005d54:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d10b      	bne.n	8005d74 <xTimerGenericCommand+0x30>
	__asm volatile
 8005d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d60:	f383 8811 	msr	BASEPRI, r3
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	623b      	str	r3, [r7, #32]
}
 8005d6e:	bf00      	nop
 8005d70:	bf00      	nop
 8005d72:	e7fd      	b.n	8005d70 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005d74:	4b19      	ldr	r3, [pc, #100]	@ (8005ddc <xTimerGenericCommand+0x98>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d02a      	beq.n	8005dd2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	2b05      	cmp	r3, #5
 8005d8c:	dc18      	bgt.n	8005dc0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005d8e:	f7ff fdad 	bl	80058ec <xTaskGetSchedulerState>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d109      	bne.n	8005dac <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005d98:	4b10      	ldr	r3, [pc, #64]	@ (8005ddc <xTimerGenericCommand+0x98>)
 8005d9a:	6818      	ldr	r0, [r3, #0]
 8005d9c:	f107 0110 	add.w	r1, r7, #16
 8005da0:	2300      	movs	r3, #0
 8005da2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005da4:	f7fe fa22 	bl	80041ec <xQueueGenericSend>
 8005da8:	6278      	str	r0, [r7, #36]	@ 0x24
 8005daa:	e012      	b.n	8005dd2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005dac:	4b0b      	ldr	r3, [pc, #44]	@ (8005ddc <xTimerGenericCommand+0x98>)
 8005dae:	6818      	ldr	r0, [r3, #0]
 8005db0:	f107 0110 	add.w	r1, r7, #16
 8005db4:	2300      	movs	r3, #0
 8005db6:	2200      	movs	r2, #0
 8005db8:	f7fe fa18 	bl	80041ec <xQueueGenericSend>
 8005dbc:	6278      	str	r0, [r7, #36]	@ 0x24
 8005dbe:	e008      	b.n	8005dd2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005dc0:	4b06      	ldr	r3, [pc, #24]	@ (8005ddc <xTimerGenericCommand+0x98>)
 8005dc2:	6818      	ldr	r0, [r3, #0]
 8005dc4:	f107 0110 	add.w	r1, r7, #16
 8005dc8:	2300      	movs	r3, #0
 8005dca:	683a      	ldr	r2, [r7, #0]
 8005dcc:	f7fe fb10 	bl	80043f0 <xQueueGenericSendFromISR>
 8005dd0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3728      	adds	r7, #40	@ 0x28
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	20000efc 	.word	0x20000efc

08005de0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b088      	sub	sp, #32
 8005de4:	af02      	add	r7, sp, #8
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dea:	4b23      	ldr	r3, [pc, #140]	@ (8005e78 <prvProcessExpiredTimer+0x98>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	3304      	adds	r3, #4
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fd ffcf 	bl	8003d9c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e04:	f003 0304 	and.w	r3, r3, #4
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d023      	beq.n	8005e54 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	699a      	ldr	r2, [r3, #24]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	18d1      	adds	r1, r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	6978      	ldr	r0, [r7, #20]
 8005e1a:	f000 f8d5 	bl	8005fc8 <prvInsertTimerInActiveList>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d020      	beq.n	8005e66 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e24:	2300      	movs	r3, #0
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	2300      	movs	r3, #0
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	6978      	ldr	r0, [r7, #20]
 8005e30:	f7ff ff88 	bl	8005d44 <xTimerGenericCommand>
 8005e34:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d114      	bne.n	8005e66 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e40:	f383 8811 	msr	BASEPRI, r3
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	f3bf 8f4f 	dsb	sy
 8005e4c:	60fb      	str	r3, [r7, #12]
}
 8005e4e:	bf00      	nop
 8005e50:	bf00      	nop
 8005e52:	e7fd      	b.n	8005e50 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e5a:	f023 0301 	bic.w	r3, r3, #1
 8005e5e:	b2da      	uxtb	r2, r3
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	6978      	ldr	r0, [r7, #20]
 8005e6c:	4798      	blx	r3
}
 8005e6e:	bf00      	nop
 8005e70:	3718      	adds	r7, #24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	20000ef4 	.word	0x20000ef4

08005e7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e84:	f107 0308 	add.w	r3, r7, #8
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f000 f859 	bl	8005f40 <prvGetNextExpireTime>
 8005e8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	4619      	mov	r1, r3
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f000 f805 	bl	8005ea4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005e9a:	f000 f8d7 	bl	800604c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e9e:	bf00      	nop
 8005ea0:	e7f0      	b.n	8005e84 <prvTimerTask+0x8>
	...

08005ea4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005eae:	f7ff f919 	bl	80050e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005eb2:	f107 0308 	add.w	r3, r7, #8
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f000 f866 	bl	8005f88 <prvSampleTimeNow>
 8005ebc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d130      	bne.n	8005f26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10a      	bne.n	8005ee0 <prvProcessTimerOrBlockTask+0x3c>
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d806      	bhi.n	8005ee0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005ed2:	f7ff f915 	bl	8005100 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005ed6:	68f9      	ldr	r1, [r7, #12]
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f7ff ff81 	bl	8005de0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005ede:	e024      	b.n	8005f2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d008      	beq.n	8005ef8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005ee6:	4b13      	ldr	r3, [pc, #76]	@ (8005f34 <prvProcessTimerOrBlockTask+0x90>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <prvProcessTimerOrBlockTask+0x50>
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e000      	b.n	8005ef6 <prvProcessTimerOrBlockTask+0x52>
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8005f38 <prvProcessTimerOrBlockTask+0x94>)
 8005efa:	6818      	ldr	r0, [r3, #0]
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	4619      	mov	r1, r3
 8005f06:	f7fe fe55 	bl	8004bb4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005f0a:	f7ff f8f9 	bl	8005100 <xTaskResumeAll>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10a      	bne.n	8005f2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005f14:	4b09      	ldr	r3, [pc, #36]	@ (8005f3c <prvProcessTimerOrBlockTask+0x98>)
 8005f16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f1a:	601a      	str	r2, [r3, #0]
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	f3bf 8f6f 	isb	sy
}
 8005f24:	e001      	b.n	8005f2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005f26:	f7ff f8eb 	bl	8005100 <xTaskResumeAll>
}
 8005f2a:	bf00      	nop
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	20000ef8 	.word	0x20000ef8
 8005f38:	20000efc 	.word	0x20000efc
 8005f3c:	e000ed04 	.word	0xe000ed04

08005f40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f48:	4b0e      	ldr	r3, [pc, #56]	@ (8005f84 <prvGetNextExpireTime+0x44>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d101      	bne.n	8005f56 <prvGetNextExpireTime+0x16>
 8005f52:	2201      	movs	r2, #1
 8005f54:	e000      	b.n	8005f58 <prvGetNextExpireTime+0x18>
 8005f56:	2200      	movs	r2, #0
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d105      	bne.n	8005f70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f64:	4b07      	ldr	r3, [pc, #28]	@ (8005f84 <prvGetNextExpireTime+0x44>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	60fb      	str	r3, [r7, #12]
 8005f6e:	e001      	b.n	8005f74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005f70:	2300      	movs	r3, #0
 8005f72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005f74:	68fb      	ldr	r3, [r7, #12]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	20000ef4 	.word	0x20000ef4

08005f88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005f90:	f7ff f954 	bl	800523c <xTaskGetTickCount>
 8005f94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005f96:	4b0b      	ldr	r3, [pc, #44]	@ (8005fc4 <prvSampleTimeNow+0x3c>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d205      	bcs.n	8005fac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005fa0:	f000 f93a 	bl	8006218 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	601a      	str	r2, [r3, #0]
 8005faa:	e002      	b.n	8005fb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005fb2:	4a04      	ldr	r2, [pc, #16]	@ (8005fc4 <prvSampleTimeNow+0x3c>)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	20000f04 	.word	0x20000f04

08005fc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
 8005fd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d812      	bhi.n	8006014 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	1ad2      	subs	r2, r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d302      	bcc.n	8006002 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	617b      	str	r3, [r7, #20]
 8006000:	e01b      	b.n	800603a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006002:	4b10      	ldr	r3, [pc, #64]	@ (8006044 <prvInsertTimerInActiveList+0x7c>)
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	3304      	adds	r3, #4
 800600a:	4619      	mov	r1, r3
 800600c:	4610      	mov	r0, r2
 800600e:	f7fd fe8c 	bl	8003d2a <vListInsert>
 8006012:	e012      	b.n	800603a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	429a      	cmp	r2, r3
 800601a:	d206      	bcs.n	800602a <prvInsertTimerInActiveList+0x62>
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	429a      	cmp	r2, r3
 8006022:	d302      	bcc.n	800602a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006024:	2301      	movs	r3, #1
 8006026:	617b      	str	r3, [r7, #20]
 8006028:	e007      	b.n	800603a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800602a:	4b07      	ldr	r3, [pc, #28]	@ (8006048 <prvInsertTimerInActiveList+0x80>)
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	3304      	adds	r3, #4
 8006032:	4619      	mov	r1, r3
 8006034:	4610      	mov	r0, r2
 8006036:	f7fd fe78 	bl	8003d2a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800603a:	697b      	ldr	r3, [r7, #20]
}
 800603c:	4618      	mov	r0, r3
 800603e:	3718      	adds	r7, #24
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	20000ef8 	.word	0x20000ef8
 8006048:	20000ef4 	.word	0x20000ef4

0800604c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b08e      	sub	sp, #56	@ 0x38
 8006050:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006052:	e0ce      	b.n	80061f2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	da19      	bge.n	800608e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800605a:	1d3b      	adds	r3, r7, #4
 800605c:	3304      	adds	r3, #4
 800605e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10b      	bne.n	800607e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800606a:	f383 8811 	msr	BASEPRI, r3
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f3bf 8f4f 	dsb	sy
 8006076:	61fb      	str	r3, [r7, #28]
}
 8006078:	bf00      	nop
 800607a:	bf00      	nop
 800607c:	e7fd      	b.n	800607a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800607e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006084:	6850      	ldr	r0, [r2, #4]
 8006086:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006088:	6892      	ldr	r2, [r2, #8]
 800608a:	4611      	mov	r1, r2
 800608c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b00      	cmp	r3, #0
 8006092:	f2c0 80ae 	blt.w	80061f2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800609a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d004      	beq.n	80060ac <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a4:	3304      	adds	r3, #4
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7fd fe78 	bl	8003d9c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060ac:	463b      	mov	r3, r7
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7ff ff6a 	bl	8005f88 <prvSampleTimeNow>
 80060b4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2b09      	cmp	r3, #9
 80060ba:	f200 8097 	bhi.w	80061ec <prvProcessReceivedCommands+0x1a0>
 80060be:	a201      	add	r2, pc, #4	@ (adr r2, 80060c4 <prvProcessReceivedCommands+0x78>)
 80060c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c4:	080060ed 	.word	0x080060ed
 80060c8:	080060ed 	.word	0x080060ed
 80060cc:	080060ed 	.word	0x080060ed
 80060d0:	08006163 	.word	0x08006163
 80060d4:	08006177 	.word	0x08006177
 80060d8:	080061c3 	.word	0x080061c3
 80060dc:	080060ed 	.word	0x080060ed
 80060e0:	080060ed 	.word	0x080060ed
 80060e4:	08006163 	.word	0x08006163
 80060e8:	08006177 	.word	0x08006177
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80060ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80060f2:	f043 0301 	orr.w	r3, r3, #1
 80060f6:	b2da      	uxtb	r2, r3
 80060f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	18d1      	adds	r1, r2, r3
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800610a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800610c:	f7ff ff5c 	bl	8005fc8 <prvInsertTimerInActiveList>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d06c      	beq.n	80061f0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800611c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800611e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006120:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006124:	f003 0304 	and.w	r3, r3, #4
 8006128:	2b00      	cmp	r3, #0
 800612a:	d061      	beq.n	80061f0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	441a      	add	r2, r3
 8006134:	2300      	movs	r3, #0
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	2300      	movs	r3, #0
 800613a:	2100      	movs	r1, #0
 800613c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800613e:	f7ff fe01 	bl	8005d44 <xTimerGenericCommand>
 8006142:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006144:	6a3b      	ldr	r3, [r7, #32]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d152      	bne.n	80061f0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800614a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800614e:	f383 8811 	msr	BASEPRI, r3
 8006152:	f3bf 8f6f 	isb	sy
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	61bb      	str	r3, [r7, #24]
}
 800615c:	bf00      	nop
 800615e:	bf00      	nop
 8006160:	e7fd      	b.n	800615e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006164:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006168:	f023 0301 	bic.w	r3, r3, #1
 800616c:	b2da      	uxtb	r2, r3
 800616e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006170:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006174:	e03d      	b.n	80061f2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006178:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800617c:	f043 0301 	orr.w	r3, r3, #1
 8006180:	b2da      	uxtb	r2, r3
 8006182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006184:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800618c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800618e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d10b      	bne.n	80061ae <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800619a:	f383 8811 	msr	BASEPRI, r3
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	617b      	str	r3, [r7, #20]
}
 80061a8:	bf00      	nop
 80061aa:	bf00      	nop
 80061ac:	e7fd      	b.n	80061aa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80061ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b0:	699a      	ldr	r2, [r3, #24]
 80061b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b4:	18d1      	adds	r1, r2, r3
 80061b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061bc:	f7ff ff04 	bl	8005fc8 <prvInsertTimerInActiveList>
					break;
 80061c0:	e017      	b.n	80061f2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80061c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80061c8:	f003 0302 	and.w	r3, r3, #2
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d103      	bne.n	80061d8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80061d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061d2:	f000 fbe9 	bl	80069a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80061d6:	e00c      	b.n	80061f2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80061de:	f023 0301 	bic.w	r3, r3, #1
 80061e2:	b2da      	uxtb	r2, r3
 80061e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80061ea:	e002      	b.n	80061f2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80061ec:	bf00      	nop
 80061ee:	e000      	b.n	80061f2 <prvProcessReceivedCommands+0x1a6>
					break;
 80061f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061f2:	4b08      	ldr	r3, [pc, #32]	@ (8006214 <prvProcessReceivedCommands+0x1c8>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	1d39      	adds	r1, r7, #4
 80061f8:	2200      	movs	r2, #0
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7fe f996 	bl	800452c <xQueueReceive>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	f47f af26 	bne.w	8006054 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006208:	bf00      	nop
 800620a:	bf00      	nop
 800620c:	3730      	adds	r7, #48	@ 0x30
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	20000efc 	.word	0x20000efc

08006218 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b088      	sub	sp, #32
 800621c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800621e:	e049      	b.n	80062b4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006220:	4b2e      	ldr	r3, [pc, #184]	@ (80062dc <prvSwitchTimerLists+0xc4>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800622a:	4b2c      	ldr	r3, [pc, #176]	@ (80062dc <prvSwitchTimerLists+0xc4>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	3304      	adds	r3, #4
 8006238:	4618      	mov	r0, r3
 800623a:	f7fd fdaf 	bl	8003d9c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800624c:	f003 0304 	and.w	r3, r3, #4
 8006250:	2b00      	cmp	r3, #0
 8006252:	d02f      	beq.n	80062b4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	4413      	add	r3, r2
 800625c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	429a      	cmp	r2, r3
 8006264:	d90e      	bls.n	8006284 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006272:	4b1a      	ldr	r3, [pc, #104]	@ (80062dc <prvSwitchTimerLists+0xc4>)
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	3304      	adds	r3, #4
 800627a:	4619      	mov	r1, r3
 800627c:	4610      	mov	r0, r2
 800627e:	f7fd fd54 	bl	8003d2a <vListInsert>
 8006282:	e017      	b.n	80062b4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006284:	2300      	movs	r3, #0
 8006286:	9300      	str	r3, [sp, #0]
 8006288:	2300      	movs	r3, #0
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	2100      	movs	r1, #0
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f7ff fd58 	bl	8005d44 <xTimerGenericCommand>
 8006294:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10b      	bne.n	80062b4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800629c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a0:	f383 8811 	msr	BASEPRI, r3
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	603b      	str	r3, [r7, #0]
}
 80062ae:	bf00      	nop
 80062b0:	bf00      	nop
 80062b2:	e7fd      	b.n	80062b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80062b4:	4b09      	ldr	r3, [pc, #36]	@ (80062dc <prvSwitchTimerLists+0xc4>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1b0      	bne.n	8006220 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80062be:	4b07      	ldr	r3, [pc, #28]	@ (80062dc <prvSwitchTimerLists+0xc4>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80062c4:	4b06      	ldr	r3, [pc, #24]	@ (80062e0 <prvSwitchTimerLists+0xc8>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a04      	ldr	r2, [pc, #16]	@ (80062dc <prvSwitchTimerLists+0xc4>)
 80062ca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80062cc:	4a04      	ldr	r2, [pc, #16]	@ (80062e0 <prvSwitchTimerLists+0xc8>)
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	6013      	str	r3, [r2, #0]
}
 80062d2:	bf00      	nop
 80062d4:	3718      	adds	r7, #24
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	20000ef4 	.word	0x20000ef4
 80062e0:	20000ef8 	.word	0x20000ef8

080062e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80062ea:	f000 f96d 	bl	80065c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80062ee:	4b15      	ldr	r3, [pc, #84]	@ (8006344 <prvCheckForValidListAndQueue+0x60>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d120      	bne.n	8006338 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80062f6:	4814      	ldr	r0, [pc, #80]	@ (8006348 <prvCheckForValidListAndQueue+0x64>)
 80062f8:	f7fd fcc6 	bl	8003c88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80062fc:	4813      	ldr	r0, [pc, #76]	@ (800634c <prvCheckForValidListAndQueue+0x68>)
 80062fe:	f7fd fcc3 	bl	8003c88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006302:	4b13      	ldr	r3, [pc, #76]	@ (8006350 <prvCheckForValidListAndQueue+0x6c>)
 8006304:	4a10      	ldr	r2, [pc, #64]	@ (8006348 <prvCheckForValidListAndQueue+0x64>)
 8006306:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006308:	4b12      	ldr	r3, [pc, #72]	@ (8006354 <prvCheckForValidListAndQueue+0x70>)
 800630a:	4a10      	ldr	r2, [pc, #64]	@ (800634c <prvCheckForValidListAndQueue+0x68>)
 800630c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800630e:	2300      	movs	r3, #0
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	4b11      	ldr	r3, [pc, #68]	@ (8006358 <prvCheckForValidListAndQueue+0x74>)
 8006314:	4a11      	ldr	r2, [pc, #68]	@ (800635c <prvCheckForValidListAndQueue+0x78>)
 8006316:	2110      	movs	r1, #16
 8006318:	200a      	movs	r0, #10
 800631a:	f7fd fdd3 	bl	8003ec4 <xQueueGenericCreateStatic>
 800631e:	4603      	mov	r3, r0
 8006320:	4a08      	ldr	r2, [pc, #32]	@ (8006344 <prvCheckForValidListAndQueue+0x60>)
 8006322:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006324:	4b07      	ldr	r3, [pc, #28]	@ (8006344 <prvCheckForValidListAndQueue+0x60>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d005      	beq.n	8006338 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800632c:	4b05      	ldr	r3, [pc, #20]	@ (8006344 <prvCheckForValidListAndQueue+0x60>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	490b      	ldr	r1, [pc, #44]	@ (8006360 <prvCheckForValidListAndQueue+0x7c>)
 8006332:	4618      	mov	r0, r3
 8006334:	f7fe fc14 	bl	8004b60 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006338:	f000 f978 	bl	800662c <vPortExitCritical>
}
 800633c:	bf00      	nop
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	20000efc 	.word	0x20000efc
 8006348:	20000ecc 	.word	0x20000ecc
 800634c:	20000ee0 	.word	0x20000ee0
 8006350:	20000ef4 	.word	0x20000ef4
 8006354:	20000ef8 	.word	0x20000ef8
 8006358:	20000fa8 	.word	0x20000fa8
 800635c:	20000f08 	.word	0x20000f08
 8006360:	08007678 	.word	0x08007678

08006364 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	3b04      	subs	r3, #4
 8006374:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800637c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	3b04      	subs	r3, #4
 8006382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	f023 0201 	bic.w	r2, r3, #1
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	3b04      	subs	r3, #4
 8006392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006394:	4a0c      	ldr	r2, [pc, #48]	@ (80063c8 <pxPortInitialiseStack+0x64>)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3b14      	subs	r3, #20
 800639e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	3b04      	subs	r3, #4
 80063aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f06f 0202 	mvn.w	r2, #2
 80063b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	3b20      	subs	r3, #32
 80063b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80063ba:	68fb      	ldr	r3, [r7, #12]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	080063cd 	.word	0x080063cd

080063cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80063d2:	2300      	movs	r3, #0
 80063d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80063d6:	4b13      	ldr	r3, [pc, #76]	@ (8006424 <prvTaskExitError+0x58>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063de:	d00b      	beq.n	80063f8 <prvTaskExitError+0x2c>
	__asm volatile
 80063e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	60fb      	str	r3, [r7, #12]
}
 80063f2:	bf00      	nop
 80063f4:	bf00      	nop
 80063f6:	e7fd      	b.n	80063f4 <prvTaskExitError+0x28>
	__asm volatile
 80063f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063fc:	f383 8811 	msr	BASEPRI, r3
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	60bb      	str	r3, [r7, #8]
}
 800640a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800640c:	bf00      	nop
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d0fc      	beq.n	800640e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006414:	bf00      	nop
 8006416:	bf00      	nop
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	2000000c 	.word	0x2000000c
	...

08006430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006430:	4b07      	ldr	r3, [pc, #28]	@ (8006450 <pxCurrentTCBConst2>)
 8006432:	6819      	ldr	r1, [r3, #0]
 8006434:	6808      	ldr	r0, [r1, #0]
 8006436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800643a:	f380 8809 	msr	PSP, r0
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	f04f 0000 	mov.w	r0, #0
 8006446:	f380 8811 	msr	BASEPRI, r0
 800644a:	4770      	bx	lr
 800644c:	f3af 8000 	nop.w

08006450 <pxCurrentTCBConst2>:
 8006450:	200009cc 	.word	0x200009cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006454:	bf00      	nop
 8006456:	bf00      	nop

08006458 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006458:	4808      	ldr	r0, [pc, #32]	@ (800647c <prvPortStartFirstTask+0x24>)
 800645a:	6800      	ldr	r0, [r0, #0]
 800645c:	6800      	ldr	r0, [r0, #0]
 800645e:	f380 8808 	msr	MSP, r0
 8006462:	f04f 0000 	mov.w	r0, #0
 8006466:	f380 8814 	msr	CONTROL, r0
 800646a:	b662      	cpsie	i
 800646c:	b661      	cpsie	f
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	f3bf 8f6f 	isb	sy
 8006476:	df00      	svc	0
 8006478:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800647a:	bf00      	nop
 800647c:	e000ed08 	.word	0xe000ed08

08006480 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006486:	4b47      	ldr	r3, [pc, #284]	@ (80065a4 <xPortStartScheduler+0x124>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a47      	ldr	r2, [pc, #284]	@ (80065a8 <xPortStartScheduler+0x128>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d10b      	bne.n	80064a8 <xPortStartScheduler+0x28>
	__asm volatile
 8006490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006494:	f383 8811 	msr	BASEPRI, r3
 8006498:	f3bf 8f6f 	isb	sy
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	613b      	str	r3, [r7, #16]
}
 80064a2:	bf00      	nop
 80064a4:	bf00      	nop
 80064a6:	e7fd      	b.n	80064a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80064a8:	4b3e      	ldr	r3, [pc, #248]	@ (80065a4 <xPortStartScheduler+0x124>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a3f      	ldr	r2, [pc, #252]	@ (80065ac <xPortStartScheduler+0x12c>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d10b      	bne.n	80064ca <xPortStartScheduler+0x4a>
	__asm volatile
 80064b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b6:	f383 8811 	msr	BASEPRI, r3
 80064ba:	f3bf 8f6f 	isb	sy
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	60fb      	str	r3, [r7, #12]
}
 80064c4:	bf00      	nop
 80064c6:	bf00      	nop
 80064c8:	e7fd      	b.n	80064c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064ca:	4b39      	ldr	r3, [pc, #228]	@ (80065b0 <xPortStartScheduler+0x130>)
 80064cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	22ff      	movs	r2, #255	@ 0xff
 80064da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80064e4:	78fb      	ldrb	r3, [r7, #3]
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	4b31      	ldr	r3, [pc, #196]	@ (80065b4 <xPortStartScheduler+0x134>)
 80064f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80064f2:	4b31      	ldr	r3, [pc, #196]	@ (80065b8 <xPortStartScheduler+0x138>)
 80064f4:	2207      	movs	r2, #7
 80064f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064f8:	e009      	b.n	800650e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80064fa:	4b2f      	ldr	r3, [pc, #188]	@ (80065b8 <xPortStartScheduler+0x138>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	3b01      	subs	r3, #1
 8006500:	4a2d      	ldr	r2, [pc, #180]	@ (80065b8 <xPortStartScheduler+0x138>)
 8006502:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006504:	78fb      	ldrb	r3, [r7, #3]
 8006506:	b2db      	uxtb	r3, r3
 8006508:	005b      	lsls	r3, r3, #1
 800650a:	b2db      	uxtb	r3, r3
 800650c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800650e:	78fb      	ldrb	r3, [r7, #3]
 8006510:	b2db      	uxtb	r3, r3
 8006512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006516:	2b80      	cmp	r3, #128	@ 0x80
 8006518:	d0ef      	beq.n	80064fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800651a:	4b27      	ldr	r3, [pc, #156]	@ (80065b8 <xPortStartScheduler+0x138>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f1c3 0307 	rsb	r3, r3, #7
 8006522:	2b04      	cmp	r3, #4
 8006524:	d00b      	beq.n	800653e <xPortStartScheduler+0xbe>
	__asm volatile
 8006526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800652a:	f383 8811 	msr	BASEPRI, r3
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	60bb      	str	r3, [r7, #8]
}
 8006538:	bf00      	nop
 800653a:	bf00      	nop
 800653c:	e7fd      	b.n	800653a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800653e:	4b1e      	ldr	r3, [pc, #120]	@ (80065b8 <xPortStartScheduler+0x138>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	021b      	lsls	r3, r3, #8
 8006544:	4a1c      	ldr	r2, [pc, #112]	@ (80065b8 <xPortStartScheduler+0x138>)
 8006546:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006548:	4b1b      	ldr	r3, [pc, #108]	@ (80065b8 <xPortStartScheduler+0x138>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006550:	4a19      	ldr	r2, [pc, #100]	@ (80065b8 <xPortStartScheduler+0x138>)
 8006552:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	b2da      	uxtb	r2, r3
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800655c:	4b17      	ldr	r3, [pc, #92]	@ (80065bc <xPortStartScheduler+0x13c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a16      	ldr	r2, [pc, #88]	@ (80065bc <xPortStartScheduler+0x13c>)
 8006562:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006566:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006568:	4b14      	ldr	r3, [pc, #80]	@ (80065bc <xPortStartScheduler+0x13c>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a13      	ldr	r2, [pc, #76]	@ (80065bc <xPortStartScheduler+0x13c>)
 800656e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006572:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006574:	f000 f8da 	bl	800672c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006578:	4b11      	ldr	r3, [pc, #68]	@ (80065c0 <xPortStartScheduler+0x140>)
 800657a:	2200      	movs	r2, #0
 800657c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800657e:	f000 f8f9 	bl	8006774 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006582:	4b10      	ldr	r3, [pc, #64]	@ (80065c4 <xPortStartScheduler+0x144>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a0f      	ldr	r2, [pc, #60]	@ (80065c4 <xPortStartScheduler+0x144>)
 8006588:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800658c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800658e:	f7ff ff63 	bl	8006458 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006592:	f7fe ff1d 	bl	80053d0 <vTaskSwitchContext>
	prvTaskExitError();
 8006596:	f7ff ff19 	bl	80063cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3718      	adds	r7, #24
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	e000ed00 	.word	0xe000ed00
 80065a8:	410fc271 	.word	0x410fc271
 80065ac:	410fc270 	.word	0x410fc270
 80065b0:	e000e400 	.word	0xe000e400
 80065b4:	20000ff8 	.word	0x20000ff8
 80065b8:	20000ffc 	.word	0x20000ffc
 80065bc:	e000ed20 	.word	0xe000ed20
 80065c0:	2000000c 	.word	0x2000000c
 80065c4:	e000ef34 	.word	0xe000ef34

080065c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
	__asm volatile
 80065ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	607b      	str	r3, [r7, #4]
}
 80065e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80065e2:	4b10      	ldr	r3, [pc, #64]	@ (8006624 <vPortEnterCritical+0x5c>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	3301      	adds	r3, #1
 80065e8:	4a0e      	ldr	r2, [pc, #56]	@ (8006624 <vPortEnterCritical+0x5c>)
 80065ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80065ec:	4b0d      	ldr	r3, [pc, #52]	@ (8006624 <vPortEnterCritical+0x5c>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d110      	bne.n	8006616 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80065f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006628 <vPortEnterCritical+0x60>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00b      	beq.n	8006616 <vPortEnterCritical+0x4e>
	__asm volatile
 80065fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006602:	f383 8811 	msr	BASEPRI, r3
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	603b      	str	r3, [r7, #0]
}
 8006610:	bf00      	nop
 8006612:	bf00      	nop
 8006614:	e7fd      	b.n	8006612 <vPortEnterCritical+0x4a>
	}
}
 8006616:	bf00      	nop
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	2000000c 	.word	0x2000000c
 8006628:	e000ed04 	.word	0xe000ed04

0800662c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006632:	4b12      	ldr	r3, [pc, #72]	@ (800667c <vPortExitCritical+0x50>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10b      	bne.n	8006652 <vPortExitCritical+0x26>
	__asm volatile
 800663a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800663e:	f383 8811 	msr	BASEPRI, r3
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	f3bf 8f4f 	dsb	sy
 800664a:	607b      	str	r3, [r7, #4]
}
 800664c:	bf00      	nop
 800664e:	bf00      	nop
 8006650:	e7fd      	b.n	800664e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006652:	4b0a      	ldr	r3, [pc, #40]	@ (800667c <vPortExitCritical+0x50>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	3b01      	subs	r3, #1
 8006658:	4a08      	ldr	r2, [pc, #32]	@ (800667c <vPortExitCritical+0x50>)
 800665a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800665c:	4b07      	ldr	r3, [pc, #28]	@ (800667c <vPortExitCritical+0x50>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d105      	bne.n	8006670 <vPortExitCritical+0x44>
 8006664:	2300      	movs	r3, #0
 8006666:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	f383 8811 	msr	BASEPRI, r3
}
 800666e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr
 800667c:	2000000c 	.word	0x2000000c

08006680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006680:	f3ef 8009 	mrs	r0, PSP
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	4b15      	ldr	r3, [pc, #84]	@ (80066e0 <pxCurrentTCBConst>)
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	f01e 0f10 	tst.w	lr, #16
 8006690:	bf08      	it	eq
 8006692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800669a:	6010      	str	r0, [r2, #0]
 800669c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80066a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80066a4:	f380 8811 	msr	BASEPRI, r0
 80066a8:	f3bf 8f4f 	dsb	sy
 80066ac:	f3bf 8f6f 	isb	sy
 80066b0:	f7fe fe8e 	bl	80053d0 <vTaskSwitchContext>
 80066b4:	f04f 0000 	mov.w	r0, #0
 80066b8:	f380 8811 	msr	BASEPRI, r0
 80066bc:	bc09      	pop	{r0, r3}
 80066be:	6819      	ldr	r1, [r3, #0]
 80066c0:	6808      	ldr	r0, [r1, #0]
 80066c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c6:	f01e 0f10 	tst.w	lr, #16
 80066ca:	bf08      	it	eq
 80066cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80066d0:	f380 8809 	msr	PSP, r0
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	f3af 8000 	nop.w

080066e0 <pxCurrentTCBConst>:
 80066e0:	200009cc 	.word	0x200009cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80066e4:	bf00      	nop
 80066e6:	bf00      	nop

080066e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
	__asm volatile
 80066ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f2:	f383 8811 	msr	BASEPRI, r3
 80066f6:	f3bf 8f6f 	isb	sy
 80066fa:	f3bf 8f4f 	dsb	sy
 80066fe:	607b      	str	r3, [r7, #4]
}
 8006700:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006702:	f7fe fdab 	bl	800525c <xTaskIncrementTick>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d003      	beq.n	8006714 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800670c:	4b06      	ldr	r3, [pc, #24]	@ (8006728 <xPortSysTickHandler+0x40>)
 800670e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006712:	601a      	str	r2, [r3, #0]
 8006714:	2300      	movs	r3, #0
 8006716:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	f383 8811 	msr	BASEPRI, r3
}
 800671e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006720:	bf00      	nop
 8006722:	3708      	adds	r7, #8
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	e000ed04 	.word	0xe000ed04

0800672c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800672c:	b480      	push	{r7}
 800672e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006730:	4b0b      	ldr	r3, [pc, #44]	@ (8006760 <vPortSetupTimerInterrupt+0x34>)
 8006732:	2200      	movs	r2, #0
 8006734:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006736:	4b0b      	ldr	r3, [pc, #44]	@ (8006764 <vPortSetupTimerInterrupt+0x38>)
 8006738:	2200      	movs	r2, #0
 800673a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800673c:	4b0a      	ldr	r3, [pc, #40]	@ (8006768 <vPortSetupTimerInterrupt+0x3c>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a0a      	ldr	r2, [pc, #40]	@ (800676c <vPortSetupTimerInterrupt+0x40>)
 8006742:	fba2 2303 	umull	r2, r3, r2, r3
 8006746:	099b      	lsrs	r3, r3, #6
 8006748:	4a09      	ldr	r2, [pc, #36]	@ (8006770 <vPortSetupTimerInterrupt+0x44>)
 800674a:	3b01      	subs	r3, #1
 800674c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800674e:	4b04      	ldr	r3, [pc, #16]	@ (8006760 <vPortSetupTimerInterrupt+0x34>)
 8006750:	2207      	movs	r2, #7
 8006752:	601a      	str	r2, [r3, #0]
}
 8006754:	bf00      	nop
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	e000e010 	.word	0xe000e010
 8006764:	e000e018 	.word	0xe000e018
 8006768:	20000000 	.word	0x20000000
 800676c:	10624dd3 	.word	0x10624dd3
 8006770:	e000e014 	.word	0xe000e014

08006774 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006774:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006784 <vPortEnableVFP+0x10>
 8006778:	6801      	ldr	r1, [r0, #0]
 800677a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800677e:	6001      	str	r1, [r0, #0]
 8006780:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006782:	bf00      	nop
 8006784:	e000ed88 	.word	0xe000ed88

08006788 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800678e:	f3ef 8305 	mrs	r3, IPSR
 8006792:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2b0f      	cmp	r3, #15
 8006798:	d915      	bls.n	80067c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800679a:	4a18      	ldr	r2, [pc, #96]	@ (80067fc <vPortValidateInterruptPriority+0x74>)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	4413      	add	r3, r2
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80067a4:	4b16      	ldr	r3, [pc, #88]	@ (8006800 <vPortValidateInterruptPriority+0x78>)
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	7afa      	ldrb	r2, [r7, #11]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d20b      	bcs.n	80067c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80067ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	607b      	str	r3, [r7, #4]
}
 80067c0:	bf00      	nop
 80067c2:	bf00      	nop
 80067c4:	e7fd      	b.n	80067c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067c6:	4b0f      	ldr	r3, [pc, #60]	@ (8006804 <vPortValidateInterruptPriority+0x7c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80067ce:	4b0e      	ldr	r3, [pc, #56]	@ (8006808 <vPortValidateInterruptPriority+0x80>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d90b      	bls.n	80067ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80067d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067da:	f383 8811 	msr	BASEPRI, r3
 80067de:	f3bf 8f6f 	isb	sy
 80067e2:	f3bf 8f4f 	dsb	sy
 80067e6:	603b      	str	r3, [r7, #0]
}
 80067e8:	bf00      	nop
 80067ea:	bf00      	nop
 80067ec:	e7fd      	b.n	80067ea <vPortValidateInterruptPriority+0x62>
	}
 80067ee:	bf00      	nop
 80067f0:	3714      	adds	r7, #20
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	e000e3f0 	.word	0xe000e3f0
 8006800:	20000ff8 	.word	0x20000ff8
 8006804:	e000ed0c 	.word	0xe000ed0c
 8006808:	20000ffc 	.word	0x20000ffc

0800680c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b08a      	sub	sp, #40	@ 0x28
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006814:	2300      	movs	r3, #0
 8006816:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006818:	f7fe fc64 	bl	80050e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800681c:	4b5c      	ldr	r3, [pc, #368]	@ (8006990 <pvPortMalloc+0x184>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d101      	bne.n	8006828 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006824:	f000 f924 	bl	8006a70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006828:	4b5a      	ldr	r3, [pc, #360]	@ (8006994 <pvPortMalloc+0x188>)
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4013      	ands	r3, r2
 8006830:	2b00      	cmp	r3, #0
 8006832:	f040 8095 	bne.w	8006960 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d01e      	beq.n	800687a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800683c:	2208      	movs	r2, #8
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4413      	add	r3, r2
 8006842:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f003 0307 	and.w	r3, r3, #7
 800684a:	2b00      	cmp	r3, #0
 800684c:	d015      	beq.n	800687a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f023 0307 	bic.w	r3, r3, #7
 8006854:	3308      	adds	r3, #8
 8006856:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f003 0307 	and.w	r3, r3, #7
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00b      	beq.n	800687a <pvPortMalloc+0x6e>
	__asm volatile
 8006862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006866:	f383 8811 	msr	BASEPRI, r3
 800686a:	f3bf 8f6f 	isb	sy
 800686e:	f3bf 8f4f 	dsb	sy
 8006872:	617b      	str	r3, [r7, #20]
}
 8006874:	bf00      	nop
 8006876:	bf00      	nop
 8006878:	e7fd      	b.n	8006876 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d06f      	beq.n	8006960 <pvPortMalloc+0x154>
 8006880:	4b45      	ldr	r3, [pc, #276]	@ (8006998 <pvPortMalloc+0x18c>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	429a      	cmp	r2, r3
 8006888:	d86a      	bhi.n	8006960 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800688a:	4b44      	ldr	r3, [pc, #272]	@ (800699c <pvPortMalloc+0x190>)
 800688c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800688e:	4b43      	ldr	r3, [pc, #268]	@ (800699c <pvPortMalloc+0x190>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006894:	e004      	b.n	80068a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006898:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800689a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d903      	bls.n	80068b2 <pvPortMalloc+0xa6>
 80068aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1f1      	bne.n	8006896 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80068b2:	4b37      	ldr	r3, [pc, #220]	@ (8006990 <pvPortMalloc+0x184>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d051      	beq.n	8006960 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068bc:	6a3b      	ldr	r3, [r7, #32]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2208      	movs	r2, #8
 80068c2:	4413      	add	r3, r2
 80068c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	6a3b      	ldr	r3, [r7, #32]
 80068cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	1ad2      	subs	r2, r2, r3
 80068d6:	2308      	movs	r3, #8
 80068d8:	005b      	lsls	r3, r3, #1
 80068da:	429a      	cmp	r2, r3
 80068dc:	d920      	bls.n	8006920 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4413      	add	r3, r2
 80068e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	f003 0307 	and.w	r3, r3, #7
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00b      	beq.n	8006908 <pvPortMalloc+0xfc>
	__asm volatile
 80068f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f4:	f383 8811 	msr	BASEPRI, r3
 80068f8:	f3bf 8f6f 	isb	sy
 80068fc:	f3bf 8f4f 	dsb	sy
 8006900:	613b      	str	r3, [r7, #16]
}
 8006902:	bf00      	nop
 8006904:	bf00      	nop
 8006906:	e7fd      	b.n	8006904 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690a:	685a      	ldr	r2, [r3, #4]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	1ad2      	subs	r2, r2, r3
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800691a:	69b8      	ldr	r0, [r7, #24]
 800691c:	f000 f90a 	bl	8006b34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006920:	4b1d      	ldr	r3, [pc, #116]	@ (8006998 <pvPortMalloc+0x18c>)
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	4a1b      	ldr	r2, [pc, #108]	@ (8006998 <pvPortMalloc+0x18c>)
 800692c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800692e:	4b1a      	ldr	r3, [pc, #104]	@ (8006998 <pvPortMalloc+0x18c>)
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	4b1b      	ldr	r3, [pc, #108]	@ (80069a0 <pvPortMalloc+0x194>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	429a      	cmp	r2, r3
 8006938:	d203      	bcs.n	8006942 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800693a:	4b17      	ldr	r3, [pc, #92]	@ (8006998 <pvPortMalloc+0x18c>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a18      	ldr	r2, [pc, #96]	@ (80069a0 <pvPortMalloc+0x194>)
 8006940:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	4b13      	ldr	r3, [pc, #76]	@ (8006994 <pvPortMalloc+0x188>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	431a      	orrs	r2, r3
 800694c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800694e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006952:	2200      	movs	r2, #0
 8006954:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006956:	4b13      	ldr	r3, [pc, #76]	@ (80069a4 <pvPortMalloc+0x198>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	3301      	adds	r3, #1
 800695c:	4a11      	ldr	r2, [pc, #68]	@ (80069a4 <pvPortMalloc+0x198>)
 800695e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006960:	f7fe fbce 	bl	8005100 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	f003 0307 	and.w	r3, r3, #7
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00b      	beq.n	8006986 <pvPortMalloc+0x17a>
	__asm volatile
 800696e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	60fb      	str	r3, [r7, #12]
}
 8006980:	bf00      	nop
 8006982:	bf00      	nop
 8006984:	e7fd      	b.n	8006982 <pvPortMalloc+0x176>
	return pvReturn;
 8006986:	69fb      	ldr	r3, [r7, #28]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3728      	adds	r7, #40	@ 0x28
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	20004c08 	.word	0x20004c08
 8006994:	20004c1c 	.word	0x20004c1c
 8006998:	20004c0c 	.word	0x20004c0c
 800699c:	20004c00 	.word	0x20004c00
 80069a0:	20004c10 	.word	0x20004c10
 80069a4:	20004c14 	.word	0x20004c14

080069a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d04f      	beq.n	8006a5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069ba:	2308      	movs	r3, #8
 80069bc:	425b      	negs	r3, r3
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	4413      	add	r3, r2
 80069c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	4b25      	ldr	r3, [pc, #148]	@ (8006a64 <vPortFree+0xbc>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4013      	ands	r3, r2
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10b      	bne.n	80069ee <vPortFree+0x46>
	__asm volatile
 80069d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069da:	f383 8811 	msr	BASEPRI, r3
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	60fb      	str	r3, [r7, #12]
}
 80069e8:	bf00      	nop
 80069ea:	bf00      	nop
 80069ec:	e7fd      	b.n	80069ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00b      	beq.n	8006a0e <vPortFree+0x66>
	__asm volatile
 80069f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069fa:	f383 8811 	msr	BASEPRI, r3
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	f3bf 8f4f 	dsb	sy
 8006a06:	60bb      	str	r3, [r7, #8]
}
 8006a08:	bf00      	nop
 8006a0a:	bf00      	nop
 8006a0c:	e7fd      	b.n	8006a0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	4b14      	ldr	r3, [pc, #80]	@ (8006a64 <vPortFree+0xbc>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4013      	ands	r3, r2
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d01e      	beq.n	8006a5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d11a      	bne.n	8006a5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	685a      	ldr	r2, [r3, #4]
 8006a28:	4b0e      	ldr	r3, [pc, #56]	@ (8006a64 <vPortFree+0xbc>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	43db      	mvns	r3, r3
 8006a2e:	401a      	ands	r2, r3
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a34:	f7fe fb56 	bl	80050e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8006a68 <vPortFree+0xc0>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4413      	add	r3, r2
 8006a42:	4a09      	ldr	r2, [pc, #36]	@ (8006a68 <vPortFree+0xc0>)
 8006a44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a46:	6938      	ldr	r0, [r7, #16]
 8006a48:	f000 f874 	bl	8006b34 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006a4c:	4b07      	ldr	r3, [pc, #28]	@ (8006a6c <vPortFree+0xc4>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	3301      	adds	r3, #1
 8006a52:	4a06      	ldr	r2, [pc, #24]	@ (8006a6c <vPortFree+0xc4>)
 8006a54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006a56:	f7fe fb53 	bl	8005100 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a5a:	bf00      	nop
 8006a5c:	3718      	adds	r7, #24
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	20004c1c 	.word	0x20004c1c
 8006a68:	20004c0c 	.word	0x20004c0c
 8006a6c:	20004c18 	.word	0x20004c18

08006a70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a76:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006a7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a7c:	4b27      	ldr	r3, [pc, #156]	@ (8006b1c <prvHeapInit+0xac>)
 8006a7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f003 0307 	and.w	r3, r3, #7
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00c      	beq.n	8006aa4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	3307      	adds	r3, #7
 8006a8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f023 0307 	bic.w	r3, r3, #7
 8006a96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a98:	68ba      	ldr	r2, [r7, #8]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	4a1f      	ldr	r2, [pc, #124]	@ (8006b1c <prvHeapInit+0xac>)
 8006aa0:	4413      	add	r3, r2
 8006aa2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006aa8:	4a1d      	ldr	r2, [pc, #116]	@ (8006b20 <prvHeapInit+0xb0>)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006aae:	4b1c      	ldr	r3, [pc, #112]	@ (8006b20 <prvHeapInit+0xb0>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	68ba      	ldr	r2, [r7, #8]
 8006ab8:	4413      	add	r3, r2
 8006aba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006abc:	2208      	movs	r2, #8
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	1a9b      	subs	r3, r3, r2
 8006ac2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f023 0307 	bic.w	r3, r3, #7
 8006aca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	4a15      	ldr	r2, [pc, #84]	@ (8006b24 <prvHeapInit+0xb4>)
 8006ad0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ad2:	4b14      	ldr	r3, [pc, #80]	@ (8006b24 <prvHeapInit+0xb4>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006ada:	4b12      	ldr	r3, [pc, #72]	@ (8006b24 <prvHeapInit+0xb4>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	1ad2      	subs	r2, r2, r3
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006af0:	4b0c      	ldr	r3, [pc, #48]	@ (8006b24 <prvHeapInit+0xb4>)
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	4a0a      	ldr	r2, [pc, #40]	@ (8006b28 <prvHeapInit+0xb8>)
 8006afe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	4a09      	ldr	r2, [pc, #36]	@ (8006b2c <prvHeapInit+0xbc>)
 8006b06:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b08:	4b09      	ldr	r3, [pc, #36]	@ (8006b30 <prvHeapInit+0xc0>)
 8006b0a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006b0e:	601a      	str	r2, [r3, #0]
}
 8006b10:	bf00      	nop
 8006b12:	3714      	adds	r7, #20
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr
 8006b1c:	20001000 	.word	0x20001000
 8006b20:	20004c00 	.word	0x20004c00
 8006b24:	20004c08 	.word	0x20004c08
 8006b28:	20004c10 	.word	0x20004c10
 8006b2c:	20004c0c 	.word	0x20004c0c
 8006b30:	20004c1c 	.word	0x20004c1c

08006b34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b3c:	4b28      	ldr	r3, [pc, #160]	@ (8006be0 <prvInsertBlockIntoFreeList+0xac>)
 8006b3e:	60fb      	str	r3, [r7, #12]
 8006b40:	e002      	b.n	8006b48 <prvInsertBlockIntoFreeList+0x14>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	60fb      	str	r3, [r7, #12]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d8f7      	bhi.n	8006b42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d108      	bne.n	8006b76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	441a      	add	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	441a      	add	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d118      	bne.n	8006bbc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	4b15      	ldr	r3, [pc, #84]	@ (8006be4 <prvInsertBlockIntoFreeList+0xb0>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d00d      	beq.n	8006bb2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685a      	ldr	r2, [r3, #4]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	441a      	add	r2, r3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	601a      	str	r2, [r3, #0]
 8006bb0:	e008      	b.n	8006bc4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8006be4 <prvInsertBlockIntoFreeList+0xb0>)
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	601a      	str	r2, [r3, #0]
 8006bba:	e003      	b.n	8006bc4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d002      	beq.n	8006bd2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bd2:	bf00      	nop
 8006bd4:	3714      	adds	r7, #20
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	20004c00 	.word	0x20004c00
 8006be4:	20004c08 	.word	0x20004c08

08006be8 <sniprintf>:
 8006be8:	b40c      	push	{r2, r3}
 8006bea:	b530      	push	{r4, r5, lr}
 8006bec:	4b17      	ldr	r3, [pc, #92]	@ (8006c4c <sniprintf+0x64>)
 8006bee:	1e0c      	subs	r4, r1, #0
 8006bf0:	681d      	ldr	r5, [r3, #0]
 8006bf2:	b09d      	sub	sp, #116	@ 0x74
 8006bf4:	da08      	bge.n	8006c08 <sniprintf+0x20>
 8006bf6:	238b      	movs	r3, #139	@ 0x8b
 8006bf8:	602b      	str	r3, [r5, #0]
 8006bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8006bfe:	b01d      	add	sp, #116	@ 0x74
 8006c00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c04:	b002      	add	sp, #8
 8006c06:	4770      	bx	lr
 8006c08:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006c0c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006c10:	bf14      	ite	ne
 8006c12:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006c16:	4623      	moveq	r3, r4
 8006c18:	9304      	str	r3, [sp, #16]
 8006c1a:	9307      	str	r3, [sp, #28]
 8006c1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006c20:	9002      	str	r0, [sp, #8]
 8006c22:	9006      	str	r0, [sp, #24]
 8006c24:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006c28:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006c2a:	ab21      	add	r3, sp, #132	@ 0x84
 8006c2c:	a902      	add	r1, sp, #8
 8006c2e:	4628      	mov	r0, r5
 8006c30:	9301      	str	r3, [sp, #4]
 8006c32:	f000 f9f9 	bl	8007028 <_svfiprintf_r>
 8006c36:	1c43      	adds	r3, r0, #1
 8006c38:	bfbc      	itt	lt
 8006c3a:	238b      	movlt	r3, #139	@ 0x8b
 8006c3c:	602b      	strlt	r3, [r5, #0]
 8006c3e:	2c00      	cmp	r4, #0
 8006c40:	d0dd      	beq.n	8006bfe <sniprintf+0x16>
 8006c42:	9b02      	ldr	r3, [sp, #8]
 8006c44:	2200      	movs	r2, #0
 8006c46:	701a      	strb	r2, [r3, #0]
 8006c48:	e7d9      	b.n	8006bfe <sniprintf+0x16>
 8006c4a:	bf00      	nop
 8006c4c:	20000010 	.word	0x20000010

08006c50 <memset>:
 8006c50:	4402      	add	r2, r0
 8006c52:	4603      	mov	r3, r0
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d100      	bne.n	8006c5a <memset+0xa>
 8006c58:	4770      	bx	lr
 8006c5a:	f803 1b01 	strb.w	r1, [r3], #1
 8006c5e:	e7f9      	b.n	8006c54 <memset+0x4>

08006c60 <_reclaim_reent>:
 8006c60:	4b29      	ldr	r3, [pc, #164]	@ (8006d08 <_reclaim_reent+0xa8>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4283      	cmp	r3, r0
 8006c66:	b570      	push	{r4, r5, r6, lr}
 8006c68:	4604      	mov	r4, r0
 8006c6a:	d04b      	beq.n	8006d04 <_reclaim_reent+0xa4>
 8006c6c:	69c3      	ldr	r3, [r0, #28]
 8006c6e:	b1ab      	cbz	r3, 8006c9c <_reclaim_reent+0x3c>
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	b16b      	cbz	r3, 8006c90 <_reclaim_reent+0x30>
 8006c74:	2500      	movs	r5, #0
 8006c76:	69e3      	ldr	r3, [r4, #28]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	5959      	ldr	r1, [r3, r5]
 8006c7c:	2900      	cmp	r1, #0
 8006c7e:	d13b      	bne.n	8006cf8 <_reclaim_reent+0x98>
 8006c80:	3504      	adds	r5, #4
 8006c82:	2d80      	cmp	r5, #128	@ 0x80
 8006c84:	d1f7      	bne.n	8006c76 <_reclaim_reent+0x16>
 8006c86:	69e3      	ldr	r3, [r4, #28]
 8006c88:	4620      	mov	r0, r4
 8006c8a:	68d9      	ldr	r1, [r3, #12]
 8006c8c:	f000 f878 	bl	8006d80 <_free_r>
 8006c90:	69e3      	ldr	r3, [r4, #28]
 8006c92:	6819      	ldr	r1, [r3, #0]
 8006c94:	b111      	cbz	r1, 8006c9c <_reclaim_reent+0x3c>
 8006c96:	4620      	mov	r0, r4
 8006c98:	f000 f872 	bl	8006d80 <_free_r>
 8006c9c:	6961      	ldr	r1, [r4, #20]
 8006c9e:	b111      	cbz	r1, 8006ca6 <_reclaim_reent+0x46>
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f000 f86d 	bl	8006d80 <_free_r>
 8006ca6:	69e1      	ldr	r1, [r4, #28]
 8006ca8:	b111      	cbz	r1, 8006cb0 <_reclaim_reent+0x50>
 8006caa:	4620      	mov	r0, r4
 8006cac:	f000 f868 	bl	8006d80 <_free_r>
 8006cb0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006cb2:	b111      	cbz	r1, 8006cba <_reclaim_reent+0x5a>
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	f000 f863 	bl	8006d80 <_free_r>
 8006cba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006cbc:	b111      	cbz	r1, 8006cc4 <_reclaim_reent+0x64>
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	f000 f85e 	bl	8006d80 <_free_r>
 8006cc4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006cc6:	b111      	cbz	r1, 8006cce <_reclaim_reent+0x6e>
 8006cc8:	4620      	mov	r0, r4
 8006cca:	f000 f859 	bl	8006d80 <_free_r>
 8006cce:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006cd0:	b111      	cbz	r1, 8006cd8 <_reclaim_reent+0x78>
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	f000 f854 	bl	8006d80 <_free_r>
 8006cd8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006cda:	b111      	cbz	r1, 8006ce2 <_reclaim_reent+0x82>
 8006cdc:	4620      	mov	r0, r4
 8006cde:	f000 f84f 	bl	8006d80 <_free_r>
 8006ce2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006ce4:	b111      	cbz	r1, 8006cec <_reclaim_reent+0x8c>
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	f000 f84a 	bl	8006d80 <_free_r>
 8006cec:	6a23      	ldr	r3, [r4, #32]
 8006cee:	b14b      	cbz	r3, 8006d04 <_reclaim_reent+0xa4>
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006cf6:	4718      	bx	r3
 8006cf8:	680e      	ldr	r6, [r1, #0]
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	f000 f840 	bl	8006d80 <_free_r>
 8006d00:	4631      	mov	r1, r6
 8006d02:	e7bb      	b.n	8006c7c <_reclaim_reent+0x1c>
 8006d04:	bd70      	pop	{r4, r5, r6, pc}
 8006d06:	bf00      	nop
 8006d08:	20000010 	.word	0x20000010

08006d0c <__errno>:
 8006d0c:	4b01      	ldr	r3, [pc, #4]	@ (8006d14 <__errno+0x8>)
 8006d0e:	6818      	ldr	r0, [r3, #0]
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	20000010 	.word	0x20000010

08006d18 <__libc_init_array>:
 8006d18:	b570      	push	{r4, r5, r6, lr}
 8006d1a:	4d0d      	ldr	r5, [pc, #52]	@ (8006d50 <__libc_init_array+0x38>)
 8006d1c:	4c0d      	ldr	r4, [pc, #52]	@ (8006d54 <__libc_init_array+0x3c>)
 8006d1e:	1b64      	subs	r4, r4, r5
 8006d20:	10a4      	asrs	r4, r4, #2
 8006d22:	2600      	movs	r6, #0
 8006d24:	42a6      	cmp	r6, r4
 8006d26:	d109      	bne.n	8006d3c <__libc_init_array+0x24>
 8006d28:	4d0b      	ldr	r5, [pc, #44]	@ (8006d58 <__libc_init_array+0x40>)
 8006d2a:	4c0c      	ldr	r4, [pc, #48]	@ (8006d5c <__libc_init_array+0x44>)
 8006d2c:	f000 fc66 	bl	80075fc <_init>
 8006d30:	1b64      	subs	r4, r4, r5
 8006d32:	10a4      	asrs	r4, r4, #2
 8006d34:	2600      	movs	r6, #0
 8006d36:	42a6      	cmp	r6, r4
 8006d38:	d105      	bne.n	8006d46 <__libc_init_array+0x2e>
 8006d3a:	bd70      	pop	{r4, r5, r6, pc}
 8006d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d40:	4798      	blx	r3
 8006d42:	3601      	adds	r6, #1
 8006d44:	e7ee      	b.n	8006d24 <__libc_init_array+0xc>
 8006d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d4a:	4798      	blx	r3
 8006d4c:	3601      	adds	r6, #1
 8006d4e:	e7f2      	b.n	8006d36 <__libc_init_array+0x1e>
 8006d50:	08007774 	.word	0x08007774
 8006d54:	08007774 	.word	0x08007774
 8006d58:	08007774 	.word	0x08007774
 8006d5c:	08007778 	.word	0x08007778

08006d60 <__retarget_lock_acquire_recursive>:
 8006d60:	4770      	bx	lr

08006d62 <__retarget_lock_release_recursive>:
 8006d62:	4770      	bx	lr

08006d64 <memcpy>:
 8006d64:	440a      	add	r2, r1
 8006d66:	4291      	cmp	r1, r2
 8006d68:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d6c:	d100      	bne.n	8006d70 <memcpy+0xc>
 8006d6e:	4770      	bx	lr
 8006d70:	b510      	push	{r4, lr}
 8006d72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d7a:	4291      	cmp	r1, r2
 8006d7c:	d1f9      	bne.n	8006d72 <memcpy+0xe>
 8006d7e:	bd10      	pop	{r4, pc}

08006d80 <_free_r>:
 8006d80:	b538      	push	{r3, r4, r5, lr}
 8006d82:	4605      	mov	r5, r0
 8006d84:	2900      	cmp	r1, #0
 8006d86:	d041      	beq.n	8006e0c <_free_r+0x8c>
 8006d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d8c:	1f0c      	subs	r4, r1, #4
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	bfb8      	it	lt
 8006d92:	18e4      	addlt	r4, r4, r3
 8006d94:	f000 f8e0 	bl	8006f58 <__malloc_lock>
 8006d98:	4a1d      	ldr	r2, [pc, #116]	@ (8006e10 <_free_r+0x90>)
 8006d9a:	6813      	ldr	r3, [r2, #0]
 8006d9c:	b933      	cbnz	r3, 8006dac <_free_r+0x2c>
 8006d9e:	6063      	str	r3, [r4, #4]
 8006da0:	6014      	str	r4, [r2, #0]
 8006da2:	4628      	mov	r0, r5
 8006da4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006da8:	f000 b8dc 	b.w	8006f64 <__malloc_unlock>
 8006dac:	42a3      	cmp	r3, r4
 8006dae:	d908      	bls.n	8006dc2 <_free_r+0x42>
 8006db0:	6820      	ldr	r0, [r4, #0]
 8006db2:	1821      	adds	r1, r4, r0
 8006db4:	428b      	cmp	r3, r1
 8006db6:	bf01      	itttt	eq
 8006db8:	6819      	ldreq	r1, [r3, #0]
 8006dba:	685b      	ldreq	r3, [r3, #4]
 8006dbc:	1809      	addeq	r1, r1, r0
 8006dbe:	6021      	streq	r1, [r4, #0]
 8006dc0:	e7ed      	b.n	8006d9e <_free_r+0x1e>
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	b10b      	cbz	r3, 8006dcc <_free_r+0x4c>
 8006dc8:	42a3      	cmp	r3, r4
 8006dca:	d9fa      	bls.n	8006dc2 <_free_r+0x42>
 8006dcc:	6811      	ldr	r1, [r2, #0]
 8006dce:	1850      	adds	r0, r2, r1
 8006dd0:	42a0      	cmp	r0, r4
 8006dd2:	d10b      	bne.n	8006dec <_free_r+0x6c>
 8006dd4:	6820      	ldr	r0, [r4, #0]
 8006dd6:	4401      	add	r1, r0
 8006dd8:	1850      	adds	r0, r2, r1
 8006dda:	4283      	cmp	r3, r0
 8006ddc:	6011      	str	r1, [r2, #0]
 8006dde:	d1e0      	bne.n	8006da2 <_free_r+0x22>
 8006de0:	6818      	ldr	r0, [r3, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	6053      	str	r3, [r2, #4]
 8006de6:	4408      	add	r0, r1
 8006de8:	6010      	str	r0, [r2, #0]
 8006dea:	e7da      	b.n	8006da2 <_free_r+0x22>
 8006dec:	d902      	bls.n	8006df4 <_free_r+0x74>
 8006dee:	230c      	movs	r3, #12
 8006df0:	602b      	str	r3, [r5, #0]
 8006df2:	e7d6      	b.n	8006da2 <_free_r+0x22>
 8006df4:	6820      	ldr	r0, [r4, #0]
 8006df6:	1821      	adds	r1, r4, r0
 8006df8:	428b      	cmp	r3, r1
 8006dfa:	bf04      	itt	eq
 8006dfc:	6819      	ldreq	r1, [r3, #0]
 8006dfe:	685b      	ldreq	r3, [r3, #4]
 8006e00:	6063      	str	r3, [r4, #4]
 8006e02:	bf04      	itt	eq
 8006e04:	1809      	addeq	r1, r1, r0
 8006e06:	6021      	streq	r1, [r4, #0]
 8006e08:	6054      	str	r4, [r2, #4]
 8006e0a:	e7ca      	b.n	8006da2 <_free_r+0x22>
 8006e0c:	bd38      	pop	{r3, r4, r5, pc}
 8006e0e:	bf00      	nop
 8006e10:	20004d64 	.word	0x20004d64

08006e14 <sbrk_aligned>:
 8006e14:	b570      	push	{r4, r5, r6, lr}
 8006e16:	4e0f      	ldr	r6, [pc, #60]	@ (8006e54 <sbrk_aligned+0x40>)
 8006e18:	460c      	mov	r4, r1
 8006e1a:	6831      	ldr	r1, [r6, #0]
 8006e1c:	4605      	mov	r5, r0
 8006e1e:	b911      	cbnz	r1, 8006e26 <sbrk_aligned+0x12>
 8006e20:	f000 fba6 	bl	8007570 <_sbrk_r>
 8006e24:	6030      	str	r0, [r6, #0]
 8006e26:	4621      	mov	r1, r4
 8006e28:	4628      	mov	r0, r5
 8006e2a:	f000 fba1 	bl	8007570 <_sbrk_r>
 8006e2e:	1c43      	adds	r3, r0, #1
 8006e30:	d103      	bne.n	8006e3a <sbrk_aligned+0x26>
 8006e32:	f04f 34ff 	mov.w	r4, #4294967295
 8006e36:	4620      	mov	r0, r4
 8006e38:	bd70      	pop	{r4, r5, r6, pc}
 8006e3a:	1cc4      	adds	r4, r0, #3
 8006e3c:	f024 0403 	bic.w	r4, r4, #3
 8006e40:	42a0      	cmp	r0, r4
 8006e42:	d0f8      	beq.n	8006e36 <sbrk_aligned+0x22>
 8006e44:	1a21      	subs	r1, r4, r0
 8006e46:	4628      	mov	r0, r5
 8006e48:	f000 fb92 	bl	8007570 <_sbrk_r>
 8006e4c:	3001      	adds	r0, #1
 8006e4e:	d1f2      	bne.n	8006e36 <sbrk_aligned+0x22>
 8006e50:	e7ef      	b.n	8006e32 <sbrk_aligned+0x1e>
 8006e52:	bf00      	nop
 8006e54:	20004d60 	.word	0x20004d60

08006e58 <_malloc_r>:
 8006e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e5c:	1ccd      	adds	r5, r1, #3
 8006e5e:	f025 0503 	bic.w	r5, r5, #3
 8006e62:	3508      	adds	r5, #8
 8006e64:	2d0c      	cmp	r5, #12
 8006e66:	bf38      	it	cc
 8006e68:	250c      	movcc	r5, #12
 8006e6a:	2d00      	cmp	r5, #0
 8006e6c:	4606      	mov	r6, r0
 8006e6e:	db01      	blt.n	8006e74 <_malloc_r+0x1c>
 8006e70:	42a9      	cmp	r1, r5
 8006e72:	d904      	bls.n	8006e7e <_malloc_r+0x26>
 8006e74:	230c      	movs	r3, #12
 8006e76:	6033      	str	r3, [r6, #0]
 8006e78:	2000      	movs	r0, #0
 8006e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f54 <_malloc_r+0xfc>
 8006e82:	f000 f869 	bl	8006f58 <__malloc_lock>
 8006e86:	f8d8 3000 	ldr.w	r3, [r8]
 8006e8a:	461c      	mov	r4, r3
 8006e8c:	bb44      	cbnz	r4, 8006ee0 <_malloc_r+0x88>
 8006e8e:	4629      	mov	r1, r5
 8006e90:	4630      	mov	r0, r6
 8006e92:	f7ff ffbf 	bl	8006e14 <sbrk_aligned>
 8006e96:	1c43      	adds	r3, r0, #1
 8006e98:	4604      	mov	r4, r0
 8006e9a:	d158      	bne.n	8006f4e <_malloc_r+0xf6>
 8006e9c:	f8d8 4000 	ldr.w	r4, [r8]
 8006ea0:	4627      	mov	r7, r4
 8006ea2:	2f00      	cmp	r7, #0
 8006ea4:	d143      	bne.n	8006f2e <_malloc_r+0xd6>
 8006ea6:	2c00      	cmp	r4, #0
 8006ea8:	d04b      	beq.n	8006f42 <_malloc_r+0xea>
 8006eaa:	6823      	ldr	r3, [r4, #0]
 8006eac:	4639      	mov	r1, r7
 8006eae:	4630      	mov	r0, r6
 8006eb0:	eb04 0903 	add.w	r9, r4, r3
 8006eb4:	f000 fb5c 	bl	8007570 <_sbrk_r>
 8006eb8:	4581      	cmp	r9, r0
 8006eba:	d142      	bne.n	8006f42 <_malloc_r+0xea>
 8006ebc:	6821      	ldr	r1, [r4, #0]
 8006ebe:	1a6d      	subs	r5, r5, r1
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	4630      	mov	r0, r6
 8006ec4:	f7ff ffa6 	bl	8006e14 <sbrk_aligned>
 8006ec8:	3001      	adds	r0, #1
 8006eca:	d03a      	beq.n	8006f42 <_malloc_r+0xea>
 8006ecc:	6823      	ldr	r3, [r4, #0]
 8006ece:	442b      	add	r3, r5
 8006ed0:	6023      	str	r3, [r4, #0]
 8006ed2:	f8d8 3000 	ldr.w	r3, [r8]
 8006ed6:	685a      	ldr	r2, [r3, #4]
 8006ed8:	bb62      	cbnz	r2, 8006f34 <_malloc_r+0xdc>
 8006eda:	f8c8 7000 	str.w	r7, [r8]
 8006ede:	e00f      	b.n	8006f00 <_malloc_r+0xa8>
 8006ee0:	6822      	ldr	r2, [r4, #0]
 8006ee2:	1b52      	subs	r2, r2, r5
 8006ee4:	d420      	bmi.n	8006f28 <_malloc_r+0xd0>
 8006ee6:	2a0b      	cmp	r2, #11
 8006ee8:	d917      	bls.n	8006f1a <_malloc_r+0xc2>
 8006eea:	1961      	adds	r1, r4, r5
 8006eec:	42a3      	cmp	r3, r4
 8006eee:	6025      	str	r5, [r4, #0]
 8006ef0:	bf18      	it	ne
 8006ef2:	6059      	strne	r1, [r3, #4]
 8006ef4:	6863      	ldr	r3, [r4, #4]
 8006ef6:	bf08      	it	eq
 8006ef8:	f8c8 1000 	streq.w	r1, [r8]
 8006efc:	5162      	str	r2, [r4, r5]
 8006efe:	604b      	str	r3, [r1, #4]
 8006f00:	4630      	mov	r0, r6
 8006f02:	f000 f82f 	bl	8006f64 <__malloc_unlock>
 8006f06:	f104 000b 	add.w	r0, r4, #11
 8006f0a:	1d23      	adds	r3, r4, #4
 8006f0c:	f020 0007 	bic.w	r0, r0, #7
 8006f10:	1ac2      	subs	r2, r0, r3
 8006f12:	bf1c      	itt	ne
 8006f14:	1a1b      	subne	r3, r3, r0
 8006f16:	50a3      	strne	r3, [r4, r2]
 8006f18:	e7af      	b.n	8006e7a <_malloc_r+0x22>
 8006f1a:	6862      	ldr	r2, [r4, #4]
 8006f1c:	42a3      	cmp	r3, r4
 8006f1e:	bf0c      	ite	eq
 8006f20:	f8c8 2000 	streq.w	r2, [r8]
 8006f24:	605a      	strne	r2, [r3, #4]
 8006f26:	e7eb      	b.n	8006f00 <_malloc_r+0xa8>
 8006f28:	4623      	mov	r3, r4
 8006f2a:	6864      	ldr	r4, [r4, #4]
 8006f2c:	e7ae      	b.n	8006e8c <_malloc_r+0x34>
 8006f2e:	463c      	mov	r4, r7
 8006f30:	687f      	ldr	r7, [r7, #4]
 8006f32:	e7b6      	b.n	8006ea2 <_malloc_r+0x4a>
 8006f34:	461a      	mov	r2, r3
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	42a3      	cmp	r3, r4
 8006f3a:	d1fb      	bne.n	8006f34 <_malloc_r+0xdc>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	6053      	str	r3, [r2, #4]
 8006f40:	e7de      	b.n	8006f00 <_malloc_r+0xa8>
 8006f42:	230c      	movs	r3, #12
 8006f44:	6033      	str	r3, [r6, #0]
 8006f46:	4630      	mov	r0, r6
 8006f48:	f000 f80c 	bl	8006f64 <__malloc_unlock>
 8006f4c:	e794      	b.n	8006e78 <_malloc_r+0x20>
 8006f4e:	6005      	str	r5, [r0, #0]
 8006f50:	e7d6      	b.n	8006f00 <_malloc_r+0xa8>
 8006f52:	bf00      	nop
 8006f54:	20004d64 	.word	0x20004d64

08006f58 <__malloc_lock>:
 8006f58:	4801      	ldr	r0, [pc, #4]	@ (8006f60 <__malloc_lock+0x8>)
 8006f5a:	f7ff bf01 	b.w	8006d60 <__retarget_lock_acquire_recursive>
 8006f5e:	bf00      	nop
 8006f60:	20004d5c 	.word	0x20004d5c

08006f64 <__malloc_unlock>:
 8006f64:	4801      	ldr	r0, [pc, #4]	@ (8006f6c <__malloc_unlock+0x8>)
 8006f66:	f7ff befc 	b.w	8006d62 <__retarget_lock_release_recursive>
 8006f6a:	bf00      	nop
 8006f6c:	20004d5c 	.word	0x20004d5c

08006f70 <__ssputs_r>:
 8006f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f74:	688e      	ldr	r6, [r1, #8]
 8006f76:	461f      	mov	r7, r3
 8006f78:	42be      	cmp	r6, r7
 8006f7a:	680b      	ldr	r3, [r1, #0]
 8006f7c:	4682      	mov	sl, r0
 8006f7e:	460c      	mov	r4, r1
 8006f80:	4690      	mov	r8, r2
 8006f82:	d82d      	bhi.n	8006fe0 <__ssputs_r+0x70>
 8006f84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006f8c:	d026      	beq.n	8006fdc <__ssputs_r+0x6c>
 8006f8e:	6965      	ldr	r5, [r4, #20]
 8006f90:	6909      	ldr	r1, [r1, #16]
 8006f92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f96:	eba3 0901 	sub.w	r9, r3, r1
 8006f9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f9e:	1c7b      	adds	r3, r7, #1
 8006fa0:	444b      	add	r3, r9
 8006fa2:	106d      	asrs	r5, r5, #1
 8006fa4:	429d      	cmp	r5, r3
 8006fa6:	bf38      	it	cc
 8006fa8:	461d      	movcc	r5, r3
 8006faa:	0553      	lsls	r3, r2, #21
 8006fac:	d527      	bpl.n	8006ffe <__ssputs_r+0x8e>
 8006fae:	4629      	mov	r1, r5
 8006fb0:	f7ff ff52 	bl	8006e58 <_malloc_r>
 8006fb4:	4606      	mov	r6, r0
 8006fb6:	b360      	cbz	r0, 8007012 <__ssputs_r+0xa2>
 8006fb8:	6921      	ldr	r1, [r4, #16]
 8006fba:	464a      	mov	r2, r9
 8006fbc:	f7ff fed2 	bl	8006d64 <memcpy>
 8006fc0:	89a3      	ldrh	r3, [r4, #12]
 8006fc2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006fc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fca:	81a3      	strh	r3, [r4, #12]
 8006fcc:	6126      	str	r6, [r4, #16]
 8006fce:	6165      	str	r5, [r4, #20]
 8006fd0:	444e      	add	r6, r9
 8006fd2:	eba5 0509 	sub.w	r5, r5, r9
 8006fd6:	6026      	str	r6, [r4, #0]
 8006fd8:	60a5      	str	r5, [r4, #8]
 8006fda:	463e      	mov	r6, r7
 8006fdc:	42be      	cmp	r6, r7
 8006fde:	d900      	bls.n	8006fe2 <__ssputs_r+0x72>
 8006fe0:	463e      	mov	r6, r7
 8006fe2:	6820      	ldr	r0, [r4, #0]
 8006fe4:	4632      	mov	r2, r6
 8006fe6:	4641      	mov	r1, r8
 8006fe8:	f000 faa8 	bl	800753c <memmove>
 8006fec:	68a3      	ldr	r3, [r4, #8]
 8006fee:	1b9b      	subs	r3, r3, r6
 8006ff0:	60a3      	str	r3, [r4, #8]
 8006ff2:	6823      	ldr	r3, [r4, #0]
 8006ff4:	4433      	add	r3, r6
 8006ff6:	6023      	str	r3, [r4, #0]
 8006ff8:	2000      	movs	r0, #0
 8006ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ffe:	462a      	mov	r2, r5
 8007000:	f000 fac6 	bl	8007590 <_realloc_r>
 8007004:	4606      	mov	r6, r0
 8007006:	2800      	cmp	r0, #0
 8007008:	d1e0      	bne.n	8006fcc <__ssputs_r+0x5c>
 800700a:	6921      	ldr	r1, [r4, #16]
 800700c:	4650      	mov	r0, sl
 800700e:	f7ff feb7 	bl	8006d80 <_free_r>
 8007012:	230c      	movs	r3, #12
 8007014:	f8ca 3000 	str.w	r3, [sl]
 8007018:	89a3      	ldrh	r3, [r4, #12]
 800701a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800701e:	81a3      	strh	r3, [r4, #12]
 8007020:	f04f 30ff 	mov.w	r0, #4294967295
 8007024:	e7e9      	b.n	8006ffa <__ssputs_r+0x8a>
	...

08007028 <_svfiprintf_r>:
 8007028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800702c:	4698      	mov	r8, r3
 800702e:	898b      	ldrh	r3, [r1, #12]
 8007030:	061b      	lsls	r3, r3, #24
 8007032:	b09d      	sub	sp, #116	@ 0x74
 8007034:	4607      	mov	r7, r0
 8007036:	460d      	mov	r5, r1
 8007038:	4614      	mov	r4, r2
 800703a:	d510      	bpl.n	800705e <_svfiprintf_r+0x36>
 800703c:	690b      	ldr	r3, [r1, #16]
 800703e:	b973      	cbnz	r3, 800705e <_svfiprintf_r+0x36>
 8007040:	2140      	movs	r1, #64	@ 0x40
 8007042:	f7ff ff09 	bl	8006e58 <_malloc_r>
 8007046:	6028      	str	r0, [r5, #0]
 8007048:	6128      	str	r0, [r5, #16]
 800704a:	b930      	cbnz	r0, 800705a <_svfiprintf_r+0x32>
 800704c:	230c      	movs	r3, #12
 800704e:	603b      	str	r3, [r7, #0]
 8007050:	f04f 30ff 	mov.w	r0, #4294967295
 8007054:	b01d      	add	sp, #116	@ 0x74
 8007056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800705a:	2340      	movs	r3, #64	@ 0x40
 800705c:	616b      	str	r3, [r5, #20]
 800705e:	2300      	movs	r3, #0
 8007060:	9309      	str	r3, [sp, #36]	@ 0x24
 8007062:	2320      	movs	r3, #32
 8007064:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007068:	f8cd 800c 	str.w	r8, [sp, #12]
 800706c:	2330      	movs	r3, #48	@ 0x30
 800706e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800720c <_svfiprintf_r+0x1e4>
 8007072:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007076:	f04f 0901 	mov.w	r9, #1
 800707a:	4623      	mov	r3, r4
 800707c:	469a      	mov	sl, r3
 800707e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007082:	b10a      	cbz	r2, 8007088 <_svfiprintf_r+0x60>
 8007084:	2a25      	cmp	r2, #37	@ 0x25
 8007086:	d1f9      	bne.n	800707c <_svfiprintf_r+0x54>
 8007088:	ebba 0b04 	subs.w	fp, sl, r4
 800708c:	d00b      	beq.n	80070a6 <_svfiprintf_r+0x7e>
 800708e:	465b      	mov	r3, fp
 8007090:	4622      	mov	r2, r4
 8007092:	4629      	mov	r1, r5
 8007094:	4638      	mov	r0, r7
 8007096:	f7ff ff6b 	bl	8006f70 <__ssputs_r>
 800709a:	3001      	adds	r0, #1
 800709c:	f000 80a7 	beq.w	80071ee <_svfiprintf_r+0x1c6>
 80070a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070a2:	445a      	add	r2, fp
 80070a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80070a6:	f89a 3000 	ldrb.w	r3, [sl]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f000 809f 	beq.w	80071ee <_svfiprintf_r+0x1c6>
 80070b0:	2300      	movs	r3, #0
 80070b2:	f04f 32ff 	mov.w	r2, #4294967295
 80070b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070ba:	f10a 0a01 	add.w	sl, sl, #1
 80070be:	9304      	str	r3, [sp, #16]
 80070c0:	9307      	str	r3, [sp, #28]
 80070c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80070c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80070c8:	4654      	mov	r4, sl
 80070ca:	2205      	movs	r2, #5
 80070cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070d0:	484e      	ldr	r0, [pc, #312]	@ (800720c <_svfiprintf_r+0x1e4>)
 80070d2:	f7f9 f87d 	bl	80001d0 <memchr>
 80070d6:	9a04      	ldr	r2, [sp, #16]
 80070d8:	b9d8      	cbnz	r0, 8007112 <_svfiprintf_r+0xea>
 80070da:	06d0      	lsls	r0, r2, #27
 80070dc:	bf44      	itt	mi
 80070de:	2320      	movmi	r3, #32
 80070e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070e4:	0711      	lsls	r1, r2, #28
 80070e6:	bf44      	itt	mi
 80070e8:	232b      	movmi	r3, #43	@ 0x2b
 80070ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070ee:	f89a 3000 	ldrb.w	r3, [sl]
 80070f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80070f4:	d015      	beq.n	8007122 <_svfiprintf_r+0xfa>
 80070f6:	9a07      	ldr	r2, [sp, #28]
 80070f8:	4654      	mov	r4, sl
 80070fa:	2000      	movs	r0, #0
 80070fc:	f04f 0c0a 	mov.w	ip, #10
 8007100:	4621      	mov	r1, r4
 8007102:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007106:	3b30      	subs	r3, #48	@ 0x30
 8007108:	2b09      	cmp	r3, #9
 800710a:	d94b      	bls.n	80071a4 <_svfiprintf_r+0x17c>
 800710c:	b1b0      	cbz	r0, 800713c <_svfiprintf_r+0x114>
 800710e:	9207      	str	r2, [sp, #28]
 8007110:	e014      	b.n	800713c <_svfiprintf_r+0x114>
 8007112:	eba0 0308 	sub.w	r3, r0, r8
 8007116:	fa09 f303 	lsl.w	r3, r9, r3
 800711a:	4313      	orrs	r3, r2
 800711c:	9304      	str	r3, [sp, #16]
 800711e:	46a2      	mov	sl, r4
 8007120:	e7d2      	b.n	80070c8 <_svfiprintf_r+0xa0>
 8007122:	9b03      	ldr	r3, [sp, #12]
 8007124:	1d19      	adds	r1, r3, #4
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	9103      	str	r1, [sp, #12]
 800712a:	2b00      	cmp	r3, #0
 800712c:	bfbb      	ittet	lt
 800712e:	425b      	neglt	r3, r3
 8007130:	f042 0202 	orrlt.w	r2, r2, #2
 8007134:	9307      	strge	r3, [sp, #28]
 8007136:	9307      	strlt	r3, [sp, #28]
 8007138:	bfb8      	it	lt
 800713a:	9204      	strlt	r2, [sp, #16]
 800713c:	7823      	ldrb	r3, [r4, #0]
 800713e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007140:	d10a      	bne.n	8007158 <_svfiprintf_r+0x130>
 8007142:	7863      	ldrb	r3, [r4, #1]
 8007144:	2b2a      	cmp	r3, #42	@ 0x2a
 8007146:	d132      	bne.n	80071ae <_svfiprintf_r+0x186>
 8007148:	9b03      	ldr	r3, [sp, #12]
 800714a:	1d1a      	adds	r2, r3, #4
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	9203      	str	r2, [sp, #12]
 8007150:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007154:	3402      	adds	r4, #2
 8007156:	9305      	str	r3, [sp, #20]
 8007158:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800721c <_svfiprintf_r+0x1f4>
 800715c:	7821      	ldrb	r1, [r4, #0]
 800715e:	2203      	movs	r2, #3
 8007160:	4650      	mov	r0, sl
 8007162:	f7f9 f835 	bl	80001d0 <memchr>
 8007166:	b138      	cbz	r0, 8007178 <_svfiprintf_r+0x150>
 8007168:	9b04      	ldr	r3, [sp, #16]
 800716a:	eba0 000a 	sub.w	r0, r0, sl
 800716e:	2240      	movs	r2, #64	@ 0x40
 8007170:	4082      	lsls	r2, r0
 8007172:	4313      	orrs	r3, r2
 8007174:	3401      	adds	r4, #1
 8007176:	9304      	str	r3, [sp, #16]
 8007178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800717c:	4824      	ldr	r0, [pc, #144]	@ (8007210 <_svfiprintf_r+0x1e8>)
 800717e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007182:	2206      	movs	r2, #6
 8007184:	f7f9 f824 	bl	80001d0 <memchr>
 8007188:	2800      	cmp	r0, #0
 800718a:	d036      	beq.n	80071fa <_svfiprintf_r+0x1d2>
 800718c:	4b21      	ldr	r3, [pc, #132]	@ (8007214 <_svfiprintf_r+0x1ec>)
 800718e:	bb1b      	cbnz	r3, 80071d8 <_svfiprintf_r+0x1b0>
 8007190:	9b03      	ldr	r3, [sp, #12]
 8007192:	3307      	adds	r3, #7
 8007194:	f023 0307 	bic.w	r3, r3, #7
 8007198:	3308      	adds	r3, #8
 800719a:	9303      	str	r3, [sp, #12]
 800719c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800719e:	4433      	add	r3, r6
 80071a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80071a2:	e76a      	b.n	800707a <_svfiprintf_r+0x52>
 80071a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80071a8:	460c      	mov	r4, r1
 80071aa:	2001      	movs	r0, #1
 80071ac:	e7a8      	b.n	8007100 <_svfiprintf_r+0xd8>
 80071ae:	2300      	movs	r3, #0
 80071b0:	3401      	adds	r4, #1
 80071b2:	9305      	str	r3, [sp, #20]
 80071b4:	4619      	mov	r1, r3
 80071b6:	f04f 0c0a 	mov.w	ip, #10
 80071ba:	4620      	mov	r0, r4
 80071bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071c0:	3a30      	subs	r2, #48	@ 0x30
 80071c2:	2a09      	cmp	r2, #9
 80071c4:	d903      	bls.n	80071ce <_svfiprintf_r+0x1a6>
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d0c6      	beq.n	8007158 <_svfiprintf_r+0x130>
 80071ca:	9105      	str	r1, [sp, #20]
 80071cc:	e7c4      	b.n	8007158 <_svfiprintf_r+0x130>
 80071ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80071d2:	4604      	mov	r4, r0
 80071d4:	2301      	movs	r3, #1
 80071d6:	e7f0      	b.n	80071ba <_svfiprintf_r+0x192>
 80071d8:	ab03      	add	r3, sp, #12
 80071da:	9300      	str	r3, [sp, #0]
 80071dc:	462a      	mov	r2, r5
 80071de:	4b0e      	ldr	r3, [pc, #56]	@ (8007218 <_svfiprintf_r+0x1f0>)
 80071e0:	a904      	add	r1, sp, #16
 80071e2:	4638      	mov	r0, r7
 80071e4:	f3af 8000 	nop.w
 80071e8:	1c42      	adds	r2, r0, #1
 80071ea:	4606      	mov	r6, r0
 80071ec:	d1d6      	bne.n	800719c <_svfiprintf_r+0x174>
 80071ee:	89ab      	ldrh	r3, [r5, #12]
 80071f0:	065b      	lsls	r3, r3, #25
 80071f2:	f53f af2d 	bmi.w	8007050 <_svfiprintf_r+0x28>
 80071f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80071f8:	e72c      	b.n	8007054 <_svfiprintf_r+0x2c>
 80071fa:	ab03      	add	r3, sp, #12
 80071fc:	9300      	str	r3, [sp, #0]
 80071fe:	462a      	mov	r2, r5
 8007200:	4b05      	ldr	r3, [pc, #20]	@ (8007218 <_svfiprintf_r+0x1f0>)
 8007202:	a904      	add	r1, sp, #16
 8007204:	4638      	mov	r0, r7
 8007206:	f000 f879 	bl	80072fc <_printf_i>
 800720a:	e7ed      	b.n	80071e8 <_svfiprintf_r+0x1c0>
 800720c:	08007738 	.word	0x08007738
 8007210:	08007742 	.word	0x08007742
 8007214:	00000000 	.word	0x00000000
 8007218:	08006f71 	.word	0x08006f71
 800721c:	0800773e 	.word	0x0800773e

08007220 <_printf_common>:
 8007220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007224:	4616      	mov	r6, r2
 8007226:	4698      	mov	r8, r3
 8007228:	688a      	ldr	r2, [r1, #8]
 800722a:	690b      	ldr	r3, [r1, #16]
 800722c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007230:	4293      	cmp	r3, r2
 8007232:	bfb8      	it	lt
 8007234:	4613      	movlt	r3, r2
 8007236:	6033      	str	r3, [r6, #0]
 8007238:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800723c:	4607      	mov	r7, r0
 800723e:	460c      	mov	r4, r1
 8007240:	b10a      	cbz	r2, 8007246 <_printf_common+0x26>
 8007242:	3301      	adds	r3, #1
 8007244:	6033      	str	r3, [r6, #0]
 8007246:	6823      	ldr	r3, [r4, #0]
 8007248:	0699      	lsls	r1, r3, #26
 800724a:	bf42      	ittt	mi
 800724c:	6833      	ldrmi	r3, [r6, #0]
 800724e:	3302      	addmi	r3, #2
 8007250:	6033      	strmi	r3, [r6, #0]
 8007252:	6825      	ldr	r5, [r4, #0]
 8007254:	f015 0506 	ands.w	r5, r5, #6
 8007258:	d106      	bne.n	8007268 <_printf_common+0x48>
 800725a:	f104 0a19 	add.w	sl, r4, #25
 800725e:	68e3      	ldr	r3, [r4, #12]
 8007260:	6832      	ldr	r2, [r6, #0]
 8007262:	1a9b      	subs	r3, r3, r2
 8007264:	42ab      	cmp	r3, r5
 8007266:	dc26      	bgt.n	80072b6 <_printf_common+0x96>
 8007268:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800726c:	6822      	ldr	r2, [r4, #0]
 800726e:	3b00      	subs	r3, #0
 8007270:	bf18      	it	ne
 8007272:	2301      	movne	r3, #1
 8007274:	0692      	lsls	r2, r2, #26
 8007276:	d42b      	bmi.n	80072d0 <_printf_common+0xb0>
 8007278:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800727c:	4641      	mov	r1, r8
 800727e:	4638      	mov	r0, r7
 8007280:	47c8      	blx	r9
 8007282:	3001      	adds	r0, #1
 8007284:	d01e      	beq.n	80072c4 <_printf_common+0xa4>
 8007286:	6823      	ldr	r3, [r4, #0]
 8007288:	6922      	ldr	r2, [r4, #16]
 800728a:	f003 0306 	and.w	r3, r3, #6
 800728e:	2b04      	cmp	r3, #4
 8007290:	bf02      	ittt	eq
 8007292:	68e5      	ldreq	r5, [r4, #12]
 8007294:	6833      	ldreq	r3, [r6, #0]
 8007296:	1aed      	subeq	r5, r5, r3
 8007298:	68a3      	ldr	r3, [r4, #8]
 800729a:	bf0c      	ite	eq
 800729c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072a0:	2500      	movne	r5, #0
 80072a2:	4293      	cmp	r3, r2
 80072a4:	bfc4      	itt	gt
 80072a6:	1a9b      	subgt	r3, r3, r2
 80072a8:	18ed      	addgt	r5, r5, r3
 80072aa:	2600      	movs	r6, #0
 80072ac:	341a      	adds	r4, #26
 80072ae:	42b5      	cmp	r5, r6
 80072b0:	d11a      	bne.n	80072e8 <_printf_common+0xc8>
 80072b2:	2000      	movs	r0, #0
 80072b4:	e008      	b.n	80072c8 <_printf_common+0xa8>
 80072b6:	2301      	movs	r3, #1
 80072b8:	4652      	mov	r2, sl
 80072ba:	4641      	mov	r1, r8
 80072bc:	4638      	mov	r0, r7
 80072be:	47c8      	blx	r9
 80072c0:	3001      	adds	r0, #1
 80072c2:	d103      	bne.n	80072cc <_printf_common+0xac>
 80072c4:	f04f 30ff 	mov.w	r0, #4294967295
 80072c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072cc:	3501      	adds	r5, #1
 80072ce:	e7c6      	b.n	800725e <_printf_common+0x3e>
 80072d0:	18e1      	adds	r1, r4, r3
 80072d2:	1c5a      	adds	r2, r3, #1
 80072d4:	2030      	movs	r0, #48	@ 0x30
 80072d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80072da:	4422      	add	r2, r4
 80072dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80072e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80072e4:	3302      	adds	r3, #2
 80072e6:	e7c7      	b.n	8007278 <_printf_common+0x58>
 80072e8:	2301      	movs	r3, #1
 80072ea:	4622      	mov	r2, r4
 80072ec:	4641      	mov	r1, r8
 80072ee:	4638      	mov	r0, r7
 80072f0:	47c8      	blx	r9
 80072f2:	3001      	adds	r0, #1
 80072f4:	d0e6      	beq.n	80072c4 <_printf_common+0xa4>
 80072f6:	3601      	adds	r6, #1
 80072f8:	e7d9      	b.n	80072ae <_printf_common+0x8e>
	...

080072fc <_printf_i>:
 80072fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007300:	7e0f      	ldrb	r7, [r1, #24]
 8007302:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007304:	2f78      	cmp	r7, #120	@ 0x78
 8007306:	4691      	mov	r9, r2
 8007308:	4680      	mov	r8, r0
 800730a:	460c      	mov	r4, r1
 800730c:	469a      	mov	sl, r3
 800730e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007312:	d807      	bhi.n	8007324 <_printf_i+0x28>
 8007314:	2f62      	cmp	r7, #98	@ 0x62
 8007316:	d80a      	bhi.n	800732e <_printf_i+0x32>
 8007318:	2f00      	cmp	r7, #0
 800731a:	f000 80d2 	beq.w	80074c2 <_printf_i+0x1c6>
 800731e:	2f58      	cmp	r7, #88	@ 0x58
 8007320:	f000 80b9 	beq.w	8007496 <_printf_i+0x19a>
 8007324:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007328:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800732c:	e03a      	b.n	80073a4 <_printf_i+0xa8>
 800732e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007332:	2b15      	cmp	r3, #21
 8007334:	d8f6      	bhi.n	8007324 <_printf_i+0x28>
 8007336:	a101      	add	r1, pc, #4	@ (adr r1, 800733c <_printf_i+0x40>)
 8007338:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800733c:	08007395 	.word	0x08007395
 8007340:	080073a9 	.word	0x080073a9
 8007344:	08007325 	.word	0x08007325
 8007348:	08007325 	.word	0x08007325
 800734c:	08007325 	.word	0x08007325
 8007350:	08007325 	.word	0x08007325
 8007354:	080073a9 	.word	0x080073a9
 8007358:	08007325 	.word	0x08007325
 800735c:	08007325 	.word	0x08007325
 8007360:	08007325 	.word	0x08007325
 8007364:	08007325 	.word	0x08007325
 8007368:	080074a9 	.word	0x080074a9
 800736c:	080073d3 	.word	0x080073d3
 8007370:	08007463 	.word	0x08007463
 8007374:	08007325 	.word	0x08007325
 8007378:	08007325 	.word	0x08007325
 800737c:	080074cb 	.word	0x080074cb
 8007380:	08007325 	.word	0x08007325
 8007384:	080073d3 	.word	0x080073d3
 8007388:	08007325 	.word	0x08007325
 800738c:	08007325 	.word	0x08007325
 8007390:	0800746b 	.word	0x0800746b
 8007394:	6833      	ldr	r3, [r6, #0]
 8007396:	1d1a      	adds	r2, r3, #4
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6032      	str	r2, [r6, #0]
 800739c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80073a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80073a4:	2301      	movs	r3, #1
 80073a6:	e09d      	b.n	80074e4 <_printf_i+0x1e8>
 80073a8:	6833      	ldr	r3, [r6, #0]
 80073aa:	6820      	ldr	r0, [r4, #0]
 80073ac:	1d19      	adds	r1, r3, #4
 80073ae:	6031      	str	r1, [r6, #0]
 80073b0:	0606      	lsls	r6, r0, #24
 80073b2:	d501      	bpl.n	80073b8 <_printf_i+0xbc>
 80073b4:	681d      	ldr	r5, [r3, #0]
 80073b6:	e003      	b.n	80073c0 <_printf_i+0xc4>
 80073b8:	0645      	lsls	r5, r0, #25
 80073ba:	d5fb      	bpl.n	80073b4 <_printf_i+0xb8>
 80073bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80073c0:	2d00      	cmp	r5, #0
 80073c2:	da03      	bge.n	80073cc <_printf_i+0xd0>
 80073c4:	232d      	movs	r3, #45	@ 0x2d
 80073c6:	426d      	negs	r5, r5
 80073c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073cc:	4859      	ldr	r0, [pc, #356]	@ (8007534 <_printf_i+0x238>)
 80073ce:	230a      	movs	r3, #10
 80073d0:	e011      	b.n	80073f6 <_printf_i+0xfa>
 80073d2:	6821      	ldr	r1, [r4, #0]
 80073d4:	6833      	ldr	r3, [r6, #0]
 80073d6:	0608      	lsls	r0, r1, #24
 80073d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80073dc:	d402      	bmi.n	80073e4 <_printf_i+0xe8>
 80073de:	0649      	lsls	r1, r1, #25
 80073e0:	bf48      	it	mi
 80073e2:	b2ad      	uxthmi	r5, r5
 80073e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80073e6:	4853      	ldr	r0, [pc, #332]	@ (8007534 <_printf_i+0x238>)
 80073e8:	6033      	str	r3, [r6, #0]
 80073ea:	bf14      	ite	ne
 80073ec:	230a      	movne	r3, #10
 80073ee:	2308      	moveq	r3, #8
 80073f0:	2100      	movs	r1, #0
 80073f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80073f6:	6866      	ldr	r6, [r4, #4]
 80073f8:	60a6      	str	r6, [r4, #8]
 80073fa:	2e00      	cmp	r6, #0
 80073fc:	bfa2      	ittt	ge
 80073fe:	6821      	ldrge	r1, [r4, #0]
 8007400:	f021 0104 	bicge.w	r1, r1, #4
 8007404:	6021      	strge	r1, [r4, #0]
 8007406:	b90d      	cbnz	r5, 800740c <_printf_i+0x110>
 8007408:	2e00      	cmp	r6, #0
 800740a:	d04b      	beq.n	80074a4 <_printf_i+0x1a8>
 800740c:	4616      	mov	r6, r2
 800740e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007412:	fb03 5711 	mls	r7, r3, r1, r5
 8007416:	5dc7      	ldrb	r7, [r0, r7]
 8007418:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800741c:	462f      	mov	r7, r5
 800741e:	42bb      	cmp	r3, r7
 8007420:	460d      	mov	r5, r1
 8007422:	d9f4      	bls.n	800740e <_printf_i+0x112>
 8007424:	2b08      	cmp	r3, #8
 8007426:	d10b      	bne.n	8007440 <_printf_i+0x144>
 8007428:	6823      	ldr	r3, [r4, #0]
 800742a:	07df      	lsls	r7, r3, #31
 800742c:	d508      	bpl.n	8007440 <_printf_i+0x144>
 800742e:	6923      	ldr	r3, [r4, #16]
 8007430:	6861      	ldr	r1, [r4, #4]
 8007432:	4299      	cmp	r1, r3
 8007434:	bfde      	ittt	le
 8007436:	2330      	movle	r3, #48	@ 0x30
 8007438:	f806 3c01 	strble.w	r3, [r6, #-1]
 800743c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007440:	1b92      	subs	r2, r2, r6
 8007442:	6122      	str	r2, [r4, #16]
 8007444:	f8cd a000 	str.w	sl, [sp]
 8007448:	464b      	mov	r3, r9
 800744a:	aa03      	add	r2, sp, #12
 800744c:	4621      	mov	r1, r4
 800744e:	4640      	mov	r0, r8
 8007450:	f7ff fee6 	bl	8007220 <_printf_common>
 8007454:	3001      	adds	r0, #1
 8007456:	d14a      	bne.n	80074ee <_printf_i+0x1f2>
 8007458:	f04f 30ff 	mov.w	r0, #4294967295
 800745c:	b004      	add	sp, #16
 800745e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007462:	6823      	ldr	r3, [r4, #0]
 8007464:	f043 0320 	orr.w	r3, r3, #32
 8007468:	6023      	str	r3, [r4, #0]
 800746a:	4833      	ldr	r0, [pc, #204]	@ (8007538 <_printf_i+0x23c>)
 800746c:	2778      	movs	r7, #120	@ 0x78
 800746e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	6831      	ldr	r1, [r6, #0]
 8007476:	061f      	lsls	r7, r3, #24
 8007478:	f851 5b04 	ldr.w	r5, [r1], #4
 800747c:	d402      	bmi.n	8007484 <_printf_i+0x188>
 800747e:	065f      	lsls	r7, r3, #25
 8007480:	bf48      	it	mi
 8007482:	b2ad      	uxthmi	r5, r5
 8007484:	6031      	str	r1, [r6, #0]
 8007486:	07d9      	lsls	r1, r3, #31
 8007488:	bf44      	itt	mi
 800748a:	f043 0320 	orrmi.w	r3, r3, #32
 800748e:	6023      	strmi	r3, [r4, #0]
 8007490:	b11d      	cbz	r5, 800749a <_printf_i+0x19e>
 8007492:	2310      	movs	r3, #16
 8007494:	e7ac      	b.n	80073f0 <_printf_i+0xf4>
 8007496:	4827      	ldr	r0, [pc, #156]	@ (8007534 <_printf_i+0x238>)
 8007498:	e7e9      	b.n	800746e <_printf_i+0x172>
 800749a:	6823      	ldr	r3, [r4, #0]
 800749c:	f023 0320 	bic.w	r3, r3, #32
 80074a0:	6023      	str	r3, [r4, #0]
 80074a2:	e7f6      	b.n	8007492 <_printf_i+0x196>
 80074a4:	4616      	mov	r6, r2
 80074a6:	e7bd      	b.n	8007424 <_printf_i+0x128>
 80074a8:	6833      	ldr	r3, [r6, #0]
 80074aa:	6825      	ldr	r5, [r4, #0]
 80074ac:	6961      	ldr	r1, [r4, #20]
 80074ae:	1d18      	adds	r0, r3, #4
 80074b0:	6030      	str	r0, [r6, #0]
 80074b2:	062e      	lsls	r6, r5, #24
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	d501      	bpl.n	80074bc <_printf_i+0x1c0>
 80074b8:	6019      	str	r1, [r3, #0]
 80074ba:	e002      	b.n	80074c2 <_printf_i+0x1c6>
 80074bc:	0668      	lsls	r0, r5, #25
 80074be:	d5fb      	bpl.n	80074b8 <_printf_i+0x1bc>
 80074c0:	8019      	strh	r1, [r3, #0]
 80074c2:	2300      	movs	r3, #0
 80074c4:	6123      	str	r3, [r4, #16]
 80074c6:	4616      	mov	r6, r2
 80074c8:	e7bc      	b.n	8007444 <_printf_i+0x148>
 80074ca:	6833      	ldr	r3, [r6, #0]
 80074cc:	1d1a      	adds	r2, r3, #4
 80074ce:	6032      	str	r2, [r6, #0]
 80074d0:	681e      	ldr	r6, [r3, #0]
 80074d2:	6862      	ldr	r2, [r4, #4]
 80074d4:	2100      	movs	r1, #0
 80074d6:	4630      	mov	r0, r6
 80074d8:	f7f8 fe7a 	bl	80001d0 <memchr>
 80074dc:	b108      	cbz	r0, 80074e2 <_printf_i+0x1e6>
 80074de:	1b80      	subs	r0, r0, r6
 80074e0:	6060      	str	r0, [r4, #4]
 80074e2:	6863      	ldr	r3, [r4, #4]
 80074e4:	6123      	str	r3, [r4, #16]
 80074e6:	2300      	movs	r3, #0
 80074e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074ec:	e7aa      	b.n	8007444 <_printf_i+0x148>
 80074ee:	6923      	ldr	r3, [r4, #16]
 80074f0:	4632      	mov	r2, r6
 80074f2:	4649      	mov	r1, r9
 80074f4:	4640      	mov	r0, r8
 80074f6:	47d0      	blx	sl
 80074f8:	3001      	adds	r0, #1
 80074fa:	d0ad      	beq.n	8007458 <_printf_i+0x15c>
 80074fc:	6823      	ldr	r3, [r4, #0]
 80074fe:	079b      	lsls	r3, r3, #30
 8007500:	d413      	bmi.n	800752a <_printf_i+0x22e>
 8007502:	68e0      	ldr	r0, [r4, #12]
 8007504:	9b03      	ldr	r3, [sp, #12]
 8007506:	4298      	cmp	r0, r3
 8007508:	bfb8      	it	lt
 800750a:	4618      	movlt	r0, r3
 800750c:	e7a6      	b.n	800745c <_printf_i+0x160>
 800750e:	2301      	movs	r3, #1
 8007510:	4632      	mov	r2, r6
 8007512:	4649      	mov	r1, r9
 8007514:	4640      	mov	r0, r8
 8007516:	47d0      	blx	sl
 8007518:	3001      	adds	r0, #1
 800751a:	d09d      	beq.n	8007458 <_printf_i+0x15c>
 800751c:	3501      	adds	r5, #1
 800751e:	68e3      	ldr	r3, [r4, #12]
 8007520:	9903      	ldr	r1, [sp, #12]
 8007522:	1a5b      	subs	r3, r3, r1
 8007524:	42ab      	cmp	r3, r5
 8007526:	dcf2      	bgt.n	800750e <_printf_i+0x212>
 8007528:	e7eb      	b.n	8007502 <_printf_i+0x206>
 800752a:	2500      	movs	r5, #0
 800752c:	f104 0619 	add.w	r6, r4, #25
 8007530:	e7f5      	b.n	800751e <_printf_i+0x222>
 8007532:	bf00      	nop
 8007534:	08007749 	.word	0x08007749
 8007538:	0800775a 	.word	0x0800775a

0800753c <memmove>:
 800753c:	4288      	cmp	r0, r1
 800753e:	b510      	push	{r4, lr}
 8007540:	eb01 0402 	add.w	r4, r1, r2
 8007544:	d902      	bls.n	800754c <memmove+0x10>
 8007546:	4284      	cmp	r4, r0
 8007548:	4623      	mov	r3, r4
 800754a:	d807      	bhi.n	800755c <memmove+0x20>
 800754c:	1e43      	subs	r3, r0, #1
 800754e:	42a1      	cmp	r1, r4
 8007550:	d008      	beq.n	8007564 <memmove+0x28>
 8007552:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007556:	f803 2f01 	strb.w	r2, [r3, #1]!
 800755a:	e7f8      	b.n	800754e <memmove+0x12>
 800755c:	4402      	add	r2, r0
 800755e:	4601      	mov	r1, r0
 8007560:	428a      	cmp	r2, r1
 8007562:	d100      	bne.n	8007566 <memmove+0x2a>
 8007564:	bd10      	pop	{r4, pc}
 8007566:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800756a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800756e:	e7f7      	b.n	8007560 <memmove+0x24>

08007570 <_sbrk_r>:
 8007570:	b538      	push	{r3, r4, r5, lr}
 8007572:	4d06      	ldr	r5, [pc, #24]	@ (800758c <_sbrk_r+0x1c>)
 8007574:	2300      	movs	r3, #0
 8007576:	4604      	mov	r4, r0
 8007578:	4608      	mov	r0, r1
 800757a:	602b      	str	r3, [r5, #0]
 800757c:	f7f9 fd4e 	bl	800101c <_sbrk>
 8007580:	1c43      	adds	r3, r0, #1
 8007582:	d102      	bne.n	800758a <_sbrk_r+0x1a>
 8007584:	682b      	ldr	r3, [r5, #0]
 8007586:	b103      	cbz	r3, 800758a <_sbrk_r+0x1a>
 8007588:	6023      	str	r3, [r4, #0]
 800758a:	bd38      	pop	{r3, r4, r5, pc}
 800758c:	20004d58 	.word	0x20004d58

08007590 <_realloc_r>:
 8007590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007594:	4680      	mov	r8, r0
 8007596:	4615      	mov	r5, r2
 8007598:	460c      	mov	r4, r1
 800759a:	b921      	cbnz	r1, 80075a6 <_realloc_r+0x16>
 800759c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075a0:	4611      	mov	r1, r2
 80075a2:	f7ff bc59 	b.w	8006e58 <_malloc_r>
 80075a6:	b92a      	cbnz	r2, 80075b4 <_realloc_r+0x24>
 80075a8:	f7ff fbea 	bl	8006d80 <_free_r>
 80075ac:	2400      	movs	r4, #0
 80075ae:	4620      	mov	r0, r4
 80075b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075b4:	f000 f81a 	bl	80075ec <_malloc_usable_size_r>
 80075b8:	4285      	cmp	r5, r0
 80075ba:	4606      	mov	r6, r0
 80075bc:	d802      	bhi.n	80075c4 <_realloc_r+0x34>
 80075be:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80075c2:	d8f4      	bhi.n	80075ae <_realloc_r+0x1e>
 80075c4:	4629      	mov	r1, r5
 80075c6:	4640      	mov	r0, r8
 80075c8:	f7ff fc46 	bl	8006e58 <_malloc_r>
 80075cc:	4607      	mov	r7, r0
 80075ce:	2800      	cmp	r0, #0
 80075d0:	d0ec      	beq.n	80075ac <_realloc_r+0x1c>
 80075d2:	42b5      	cmp	r5, r6
 80075d4:	462a      	mov	r2, r5
 80075d6:	4621      	mov	r1, r4
 80075d8:	bf28      	it	cs
 80075da:	4632      	movcs	r2, r6
 80075dc:	f7ff fbc2 	bl	8006d64 <memcpy>
 80075e0:	4621      	mov	r1, r4
 80075e2:	4640      	mov	r0, r8
 80075e4:	f7ff fbcc 	bl	8006d80 <_free_r>
 80075e8:	463c      	mov	r4, r7
 80075ea:	e7e0      	b.n	80075ae <_realloc_r+0x1e>

080075ec <_malloc_usable_size_r>:
 80075ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075f0:	1f18      	subs	r0, r3, #4
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	bfbc      	itt	lt
 80075f6:	580b      	ldrlt	r3, [r1, r0]
 80075f8:	18c0      	addlt	r0, r0, r3
 80075fa:	4770      	bx	lr

080075fc <_init>:
 80075fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075fe:	bf00      	nop
 8007600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007602:	bc08      	pop	{r3}
 8007604:	469e      	mov	lr, r3
 8007606:	4770      	bx	lr

08007608 <_fini>:
 8007608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800760a:	bf00      	nop
 800760c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800760e:	bc08      	pop	{r3}
 8007610:	469e      	mov	lr, r3
 8007612:	4770      	bx	lr
