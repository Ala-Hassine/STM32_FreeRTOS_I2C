
STM32_FreeRTOS_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000278c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002914  08002914  00003914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800292c  0800292c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  0800292c  0800292c  0000392c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002934  08002934  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002934  08002934  00003934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002938  08002938  00003938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800293c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          00000194  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001a0  200001a0  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d00a  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d3a  00000000  00000000  00011046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d60  00000000  00000000  00012d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a7f  00000000  00000000  00013ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021820  00000000  00000000  0001455f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ffc0  00000000  00000000  00035d7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3e65  00000000  00000000  00045d3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00119ba4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003920  00000000  00000000  00119be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  0011d508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080028fc 	.word	0x080028fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080028fc 	.word	0x080028fc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fbc8 	bl	8000c50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f80c 	bl	80004dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f980 	bl	80007c8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004c8:	f000 f872 	bl	80005b0 <MX_ADC1_Init>
  MX_ADC2_Init();
 80004cc:	f000 f8c4 	bl	8000658 <MX_ADC2_Init>
  MX_I2C2_Init();
 80004d0:	f000 f916 	bl	8000700 <MX_I2C2_Init>
  MX_TIM6_Init();
 80004d4:	f000 f942 	bl	800075c <MX_TIM6_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004d8:	bf00      	nop
 80004da:	e7fd      	b.n	80004d8 <main+0x20>

080004dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b094      	sub	sp, #80	@ 0x50
 80004e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e2:	f107 0320 	add.w	r3, r7, #32
 80004e6:	2230      	movs	r2, #48	@ 0x30
 80004e8:	2100      	movs	r1, #0
 80004ea:	4618      	mov	r0, r3
 80004ec:	f002 f9da 	bl	80028a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f0:	f107 030c 	add.w	r3, r7, #12
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000500:	2300      	movs	r3, #0
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	4b28      	ldr	r3, [pc, #160]	@ (80005a8 <SystemClock_Config+0xcc>)
 8000506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000508:	4a27      	ldr	r2, [pc, #156]	@ (80005a8 <SystemClock_Config+0xcc>)
 800050a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800050e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000510:	4b25      	ldr	r3, [pc, #148]	@ (80005a8 <SystemClock_Config+0xcc>)
 8000512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000514:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800051c:	2300      	movs	r3, #0
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	4b22      	ldr	r3, [pc, #136]	@ (80005ac <SystemClock_Config+0xd0>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a21      	ldr	r2, [pc, #132]	@ (80005ac <SystemClock_Config+0xd0>)
 8000526:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800052a:	6013      	str	r3, [r2, #0]
 800052c:	4b1f      	ldr	r3, [pc, #124]	@ (80005ac <SystemClock_Config+0xd0>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000538:	2301      	movs	r3, #1
 800053a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800053c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000540:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000542:	2302      	movs	r3, #2
 8000544:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000546:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800054a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800054c:	2304      	movs	r3, #4
 800054e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000550:	2348      	movs	r3, #72	@ 0x48
 8000552:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000554:	2302      	movs	r3, #2
 8000556:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000558:	2307      	movs	r3, #7
 800055a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055c:	f107 0320 	add.w	r3, r7, #32
 8000560:	4618      	mov	r0, r3
 8000562:	f001 f9db 	bl	800191c <HAL_RCC_OscConfig>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800056c:	f000 f971 	bl	8000852 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000570:	230f      	movs	r3, #15
 8000572:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000574:	2302      	movs	r3, #2
 8000576:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800057c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000580:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000582:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000586:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	2102      	movs	r1, #2
 800058e:	4618      	mov	r0, r3
 8000590:	f001 fc3c 	bl	8001e0c <HAL_RCC_ClockConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800059a:	f000 f95a 	bl	8000852 <Error_Handler>
  }
}
 800059e:	bf00      	nop
 80005a0:	3750      	adds	r7, #80	@ 0x50
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40023800 	.word	0x40023800
 80005ac:	40007000 	.word	0x40007000

080005b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005b6:	463b      	mov	r3, r7
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005c2:	4b22      	ldr	r3, [pc, #136]	@ (800064c <MX_ADC1_Init+0x9c>)
 80005c4:	4a22      	ldr	r2, [pc, #136]	@ (8000650 <MX_ADC1_Init+0xa0>)
 80005c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005c8:	4b20      	ldr	r3, [pc, #128]	@ (800064c <MX_ADC1_Init+0x9c>)
 80005ca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80005d0:	4b1e      	ldr	r3, [pc, #120]	@ (800064c <MX_ADC1_Init+0x9c>)
 80005d2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80005d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005d8:	4b1c      	ldr	r3, [pc, #112]	@ (800064c <MX_ADC1_Init+0x9c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005de:	4b1b      	ldr	r3, [pc, #108]	@ (800064c <MX_ADC1_Init+0x9c>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005e4:	4b19      	ldr	r3, [pc, #100]	@ (800064c <MX_ADC1_Init+0x9c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ec:	4b17      	ldr	r3, [pc, #92]	@ (800064c <MX_ADC1_Init+0x9c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f2:	4b16      	ldr	r3, [pc, #88]	@ (800064c <MX_ADC1_Init+0x9c>)
 80005f4:	4a17      	ldr	r2, [pc, #92]	@ (8000654 <MX_ADC1_Init+0xa4>)
 80005f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f8:	4b14      	ldr	r3, [pc, #80]	@ (800064c <MX_ADC1_Init+0x9c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005fe:	4b13      	ldr	r3, [pc, #76]	@ (800064c <MX_ADC1_Init+0x9c>)
 8000600:	2201      	movs	r2, #1
 8000602:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000604:	4b11      	ldr	r3, [pc, #68]	@ (800064c <MX_ADC1_Init+0x9c>)
 8000606:	2200      	movs	r2, #0
 8000608:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060c:	4b0f      	ldr	r3, [pc, #60]	@ (800064c <MX_ADC1_Init+0x9c>)
 800060e:	2201      	movs	r2, #1
 8000610:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000612:	480e      	ldr	r0, [pc, #56]	@ (800064c <MX_ADC1_Init+0x9c>)
 8000614:	f000 fb5e 	bl	8000cd4 <HAL_ADC_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800061e:	f000 f918 	bl	8000852 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000622:	2301      	movs	r3, #1
 8000624:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000626:	2301      	movs	r3, #1
 8000628:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800062a:	2300      	movs	r3, #0
 800062c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062e:	463b      	mov	r3, r7
 8000630:	4619      	mov	r1, r3
 8000632:	4806      	ldr	r0, [pc, #24]	@ (800064c <MX_ADC1_Init+0x9c>)
 8000634:	f000 fb92 	bl	8000d5c <HAL_ADC_ConfigChannel>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800063e:	f000 f908 	bl	8000852 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000028 	.word	0x20000028
 8000650:	40012000 	.word	0x40012000
 8000654:	0f000001 	.word	0x0f000001

08000658 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800065e:	463b      	mov	r3, r7
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800066a:	4b22      	ldr	r3, [pc, #136]	@ (80006f4 <MX_ADC2_Init+0x9c>)
 800066c:	4a22      	ldr	r2, [pc, #136]	@ (80006f8 <MX_ADC2_Init+0xa0>)
 800066e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000670:	4b20      	ldr	r3, [pc, #128]	@ (80006f4 <MX_ADC2_Init+0x9c>)
 8000672:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000676:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 8000678:	4b1e      	ldr	r3, [pc, #120]	@ (80006f4 <MX_ADC2_Init+0x9c>)
 800067a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800067e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000680:	4b1c      	ldr	r3, [pc, #112]	@ (80006f4 <MX_ADC2_Init+0x9c>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000686:	4b1b      	ldr	r3, [pc, #108]	@ (80006f4 <MX_ADC2_Init+0x9c>)
 8000688:	2201      	movs	r2, #1
 800068a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800068c:	4b19      	ldr	r3, [pc, #100]	@ (80006f4 <MX_ADC2_Init+0x9c>)
 800068e:	2200      	movs	r2, #0
 8000690:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000694:	4b17      	ldr	r3, [pc, #92]	@ (80006f4 <MX_ADC2_Init+0x9c>)
 8000696:	2200      	movs	r2, #0
 8000698:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800069a:	4b16      	ldr	r3, [pc, #88]	@ (80006f4 <MX_ADC2_Init+0x9c>)
 800069c:	4a17      	ldr	r2, [pc, #92]	@ (80006fc <MX_ADC2_Init+0xa4>)
 800069e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a0:	4b14      	ldr	r3, [pc, #80]	@ (80006f4 <MX_ADC2_Init+0x9c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80006a6:	4b13      	ldr	r3, [pc, #76]	@ (80006f4 <MX_ADC2_Init+0x9c>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80006ac:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <MX_ADC2_Init+0x9c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <MX_ADC2_Init+0x9c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006ba:	480e      	ldr	r0, [pc, #56]	@ (80006f4 <MX_ADC2_Init+0x9c>)
 80006bc:	f000 fb0a 	bl	8000cd4 <HAL_ADC_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 80006c6:	f000 f8c4 	bl	8000852 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006d6:	463b      	mov	r3, r7
 80006d8:	4619      	mov	r1, r3
 80006da:	4806      	ldr	r0, [pc, #24]	@ (80006f4 <MX_ADC2_Init+0x9c>)
 80006dc:	f000 fb3e 	bl	8000d5c <HAL_ADC_ConfigChannel>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 80006e6:	f000 f8b4 	bl	8000852 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000070 	.word	0x20000070
 80006f8:	40012100 	.word	0x40012100
 80006fc:	0f000001 	.word	0x0f000001

08000700 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000704:	4b12      	ldr	r3, [pc, #72]	@ (8000750 <MX_I2C2_Init+0x50>)
 8000706:	4a13      	ldr	r2, [pc, #76]	@ (8000754 <MX_I2C2_Init+0x54>)
 8000708:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800070a:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <MX_I2C2_Init+0x50>)
 800070c:	4a12      	ldr	r2, [pc, #72]	@ (8000758 <MX_I2C2_Init+0x58>)
 800070e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000710:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <MX_I2C2_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000716:	4b0e      	ldr	r3, [pc, #56]	@ (8000750 <MX_I2C2_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800071c:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <MX_I2C2_Init+0x50>)
 800071e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000722:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000724:	4b0a      	ldr	r3, [pc, #40]	@ (8000750 <MX_I2C2_Init+0x50>)
 8000726:	2200      	movs	r2, #0
 8000728:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_I2C2_Init+0x50>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000730:	4b07      	ldr	r3, [pc, #28]	@ (8000750 <MX_I2C2_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000736:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <MX_I2C2_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800073c:	4804      	ldr	r0, [pc, #16]	@ (8000750 <MX_I2C2_Init+0x50>)
 800073e:	f000 ffa9 	bl	8001694 <HAL_I2C_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000748:	f000 f883 	bl	8000852 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	200000b8 	.word	0x200000b8
 8000754:	40005800 	.word	0x40005800
 8000758:	000186a0 	.word	0x000186a0

0800075c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000762:	463b      	mov	r3, r7
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800076a:	4b15      	ldr	r3, [pc, #84]	@ (80007c0 <MX_TIM6_Init+0x64>)
 800076c:	4a15      	ldr	r2, [pc, #84]	@ (80007c4 <MX_TIM6_Init+0x68>)
 800076e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72-1;
 8000770:	4b13      	ldr	r3, [pc, #76]	@ (80007c0 <MX_TIM6_Init+0x64>)
 8000772:	2247      	movs	r2, #71	@ 0x47
 8000774:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000776:	4b12      	ldr	r3, [pc, #72]	@ (80007c0 <MX_TIM6_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xFFFF-1;
 800077c:	4b10      	ldr	r3, [pc, #64]	@ (80007c0 <MX_TIM6_Init+0x64>)
 800077e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000782:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000784:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <MX_TIM6_Init+0x64>)
 8000786:	2280      	movs	r2, #128	@ 0x80
 8000788:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800078a:	480d      	ldr	r0, [pc, #52]	@ (80007c0 <MX_TIM6_Init+0x64>)
 800078c:	f001 fd7c 	bl	8002288 <HAL_TIM_Base_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000796:	f000 f85c 	bl	8000852 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800079a:	2300      	movs	r3, #0
 800079c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80007a2:	463b      	mov	r3, r7
 80007a4:	4619      	mov	r1, r3
 80007a6:	4806      	ldr	r0, [pc, #24]	@ (80007c0 <MX_TIM6_Init+0x64>)
 80007a8:	f001 ffec 	bl	8002784 <HAL_TIMEx_MasterConfigSynchronization>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80007b2:	f000 f84e 	bl	8000852 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	2000010c 	.word	0x2000010c
 80007c4:	40001000 	.word	0x40001000

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	4b17      	ldr	r3, [pc, #92]	@ (8000830 <MX_GPIO_Init+0x68>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a16      	ldr	r2, [pc, #88]	@ (8000830 <MX_GPIO_Init+0x68>)
 80007d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b14      	ldr	r3, [pc, #80]	@ (8000830 <MX_GPIO_Init+0x68>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	4b10      	ldr	r3, [pc, #64]	@ (8000830 <MX_GPIO_Init+0x68>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a0f      	ldr	r2, [pc, #60]	@ (8000830 <MX_GPIO_Init+0x68>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000830 <MX_GPIO_Init+0x68>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <MX_GPIO_Init+0x68>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a08      	ldr	r2, [pc, #32]	@ (8000830 <MX_GPIO_Init+0x68>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <MX_GPIO_Init+0x68>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000822:	bf00      	nop
 8000824:	3714      	adds	r7, #20
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800

08000834 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000844:	d101      	bne.n	800084a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000846:	f000 fa25 	bl	8000c94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000856:	b672      	cpsid	i
}
 8000858:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800085a:	bf00      	nop
 800085c:	e7fd      	b.n	800085a <Error_Handler+0x8>
	...

08000860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b10      	ldr	r3, [pc, #64]	@ (80008ac <HAL_MspInit+0x4c>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800086e:	4a0f      	ldr	r2, [pc, #60]	@ (80008ac <HAL_MspInit+0x4c>)
 8000870:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000874:	6453      	str	r3, [r2, #68]	@ 0x44
 8000876:	4b0d      	ldr	r3, [pc, #52]	@ (80008ac <HAL_MspInit+0x4c>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800087a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <HAL_MspInit+0x4c>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088a:	4a08      	ldr	r2, [pc, #32]	@ (80008ac <HAL_MspInit+0x4c>)
 800088c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000890:	6413      	str	r3, [r2, #64]	@ 0x40
 8000892:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <HAL_MspInit+0x4c>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800089e:	2007      	movs	r0, #7
 80008a0:	f000 fd27 	bl	80012f2 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40023800 	.word	0x40023800

080008b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08c      	sub	sp, #48	@ 0x30
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a2e      	ldr	r2, [pc, #184]	@ (8000988 <HAL_ADC_MspInit+0xd8>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d128      	bne.n	8000924 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
 80008d6:	4b2d      	ldr	r3, [pc, #180]	@ (800098c <HAL_ADC_MspInit+0xdc>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008da:	4a2c      	ldr	r2, [pc, #176]	@ (800098c <HAL_ADC_MspInit+0xdc>)
 80008dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008e2:	4b2a      	ldr	r3, [pc, #168]	@ (800098c <HAL_ADC_MspInit+0xdc>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80008ea:	61bb      	str	r3, [r7, #24]
 80008ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	4b26      	ldr	r3, [pc, #152]	@ (800098c <HAL_ADC_MspInit+0xdc>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a25      	ldr	r2, [pc, #148]	@ (800098c <HAL_ADC_MspInit+0xdc>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fe:	4b23      	ldr	r3, [pc, #140]	@ (800098c <HAL_ADC_MspInit+0xdc>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800090a:	2302      	movs	r3, #2
 800090c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800090e:	2303      	movs	r3, #3
 8000910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	481c      	ldr	r0, [pc, #112]	@ (8000990 <HAL_ADC_MspInit+0xe0>)
 800091e:	f000 fd1d 	bl	800135c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000922:	e02c      	b.n	800097e <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a1a      	ldr	r2, [pc, #104]	@ (8000994 <HAL_ADC_MspInit+0xe4>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d127      	bne.n	800097e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	4b16      	ldr	r3, [pc, #88]	@ (800098c <HAL_ADC_MspInit+0xdc>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000936:	4a15      	ldr	r2, [pc, #84]	@ (800098c <HAL_ADC_MspInit+0xdc>)
 8000938:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800093c:	6453      	str	r3, [r2, #68]	@ 0x44
 800093e:	4b13      	ldr	r3, [pc, #76]	@ (800098c <HAL_ADC_MspInit+0xdc>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000942:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	4b0f      	ldr	r3, [pc, #60]	@ (800098c <HAL_ADC_MspInit+0xdc>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a0e      	ldr	r2, [pc, #56]	@ (800098c <HAL_ADC_MspInit+0xdc>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b0c      	ldr	r3, [pc, #48]	@ (800098c <HAL_ADC_MspInit+0xdc>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000966:	2304      	movs	r3, #4
 8000968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800096a:	2303      	movs	r3, #3
 800096c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4805      	ldr	r0, [pc, #20]	@ (8000990 <HAL_ADC_MspInit+0xe0>)
 800097a:	f000 fcef 	bl	800135c <HAL_GPIO_Init>
}
 800097e:	bf00      	nop
 8000980:	3730      	adds	r7, #48	@ 0x30
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40012000 	.word	0x40012000
 800098c:	40023800 	.word	0x40023800
 8000990:	40020000 	.word	0x40020000
 8000994:	40012100 	.word	0x40012100

08000998 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	@ 0x28
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a19      	ldr	r2, [pc, #100]	@ (8000a1c <HAL_I2C_MspInit+0x84>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d12c      	bne.n	8000a14 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	4b18      	ldr	r3, [pc, #96]	@ (8000a20 <HAL_I2C_MspInit+0x88>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	4a17      	ldr	r2, [pc, #92]	@ (8000a20 <HAL_I2C_MspInit+0x88>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ca:	4b15      	ldr	r3, [pc, #84]	@ (8000a20 <HAL_I2C_MspInit+0x88>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80009d6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80009da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009dc:	2312      	movs	r3, #18
 80009de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e4:	2303      	movs	r3, #3
 80009e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80009e8:	2304      	movs	r3, #4
 80009ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4619      	mov	r1, r3
 80009f2:	480c      	ldr	r0, [pc, #48]	@ (8000a24 <HAL_I2C_MspInit+0x8c>)
 80009f4:	f000 fcb2 	bl	800135c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <HAL_I2C_MspInit+0x88>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a00:	4a07      	ldr	r2, [pc, #28]	@ (8000a20 <HAL_I2C_MspInit+0x88>)
 8000a02:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a06:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a08:	4b05      	ldr	r3, [pc, #20]	@ (8000a20 <HAL_I2C_MspInit+0x88>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000a14:	bf00      	nop
 8000a16:	3728      	adds	r7, #40	@ 0x28
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40005800 	.word	0x40005800
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020400 	.word	0x40020400

08000a28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a0b      	ldr	r2, [pc, #44]	@ (8000a64 <HAL_TIM_Base_MspInit+0x3c>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d10d      	bne.n	8000a56 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a68 <HAL_TIM_Base_MspInit+0x40>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a42:	4a09      	ldr	r2, [pc, #36]	@ (8000a68 <HAL_TIM_Base_MspInit+0x40>)
 8000a44:	f043 0310 	orr.w	r3, r3, #16
 8000a48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a4a:	4b07      	ldr	r3, [pc, #28]	@ (8000a68 <HAL_TIM_Base_MspInit+0x40>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4e:	f003 0310 	and.w	r3, r3, #16
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000a56:	bf00      	nop
 8000a58:	3714      	adds	r7, #20
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40001000 	.word	0x40001000
 8000a68:	40023800 	.word	0x40023800

08000a6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08e      	sub	sp, #56	@ 0x38
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	4b34      	ldr	r3, [pc, #208]	@ (8000b54 <HAL_InitTick+0xe8>)
 8000a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a84:	4a33      	ldr	r2, [pc, #204]	@ (8000b54 <HAL_InitTick+0xe8>)
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a8c:	4b31      	ldr	r3, [pc, #196]	@ (8000b54 <HAL_InitTick+0xe8>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a98:	f107 0210 	add.w	r2, r7, #16
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4611      	mov	r1, r2
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f001 fbbe 	bl	8002224 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000aa8:	6a3b      	ldr	r3, [r7, #32]
 8000aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d103      	bne.n	8000aba <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ab2:	f001 fba3 	bl	80021fc <HAL_RCC_GetPCLK1Freq>
 8000ab6:	6378      	str	r0, [r7, #52]	@ 0x34
 8000ab8:	e004      	b.n	8000ac4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000aba:	f001 fb9f 	bl	80021fc <HAL_RCC_GetPCLK1Freq>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ac6:	4a24      	ldr	r2, [pc, #144]	@ (8000b58 <HAL_InitTick+0xec>)
 8000ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8000acc:	0c9b      	lsrs	r3, r3, #18
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000ad2:	4b22      	ldr	r3, [pc, #136]	@ (8000b5c <HAL_InitTick+0xf0>)
 8000ad4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ad8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000ada:	4b20      	ldr	r3, [pc, #128]	@ (8000b5c <HAL_InitTick+0xf0>)
 8000adc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ae0:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8000b5c <HAL_InitTick+0xf0>)
 8000ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ae6:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000ae8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b5c <HAL_InitTick+0xf0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aee:	4b1b      	ldr	r3, [pc, #108]	@ (8000b5c <HAL_InitTick+0xf0>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af4:	4b19      	ldr	r3, [pc, #100]	@ (8000b5c <HAL_InitTick+0xf0>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000afa:	4818      	ldr	r0, [pc, #96]	@ (8000b5c <HAL_InitTick+0xf0>)
 8000afc:	f001 fbc4 	bl	8002288 <HAL_TIM_Base_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b06:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d11b      	bne.n	8000b46 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000b0e:	4813      	ldr	r0, [pc, #76]	@ (8000b5c <HAL_InitTick+0xf0>)
 8000b10:	f001 fc0a 	bl	8002328 <HAL_TIM_Base_Start_IT>
 8000b14:	4603      	mov	r3, r0
 8000b16:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b1a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d111      	bne.n	8000b46 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b22:	201c      	movs	r0, #28
 8000b24:	f000 fc0c 	bl	8001340 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2b0f      	cmp	r3, #15
 8000b2c:	d808      	bhi.n	8000b40 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	6879      	ldr	r1, [r7, #4]
 8000b32:	201c      	movs	r0, #28
 8000b34:	f000 fbe8 	bl	8001308 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b38:	4a09      	ldr	r2, [pc, #36]	@ (8000b60 <HAL_InitTick+0xf4>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6013      	str	r3, [r2, #0]
 8000b3e:	e002      	b.n	8000b46 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000b40:	2301      	movs	r3, #1
 8000b42:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b46:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3738      	adds	r7, #56	@ 0x38
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800
 8000b58:	431bde83 	.word	0x431bde83
 8000b5c:	20000154 	.word	0x20000154
 8000b60:	20000004 	.word	0x20000004

08000b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <NMI_Handler+0x4>

08000b6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <HardFault_Handler+0x4>

08000b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <MemManage_Handler+0x4>

08000b7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bc8:	4802      	ldr	r0, [pc, #8]	@ (8000bd4 <TIM2_IRQHandler+0x10>)
 8000bca:	f001 fc1d 	bl	8002408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000154 	.word	0x20000154

08000bd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bdc:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <SystemInit+0x20>)
 8000bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000be2:	4a05      	ldr	r2, [pc, #20]	@ (8000bf8 <SystemInit+0x20>)
 8000be4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000be8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c34 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c00:	f7ff ffea 	bl	8000bd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c04:	480c      	ldr	r0, [pc, #48]	@ (8000c38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c06:	490d      	ldr	r1, [pc, #52]	@ (8000c3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c08:	4a0d      	ldr	r2, [pc, #52]	@ (8000c40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c0c:	e002      	b.n	8000c14 <LoopCopyDataInit>

08000c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c12:	3304      	adds	r3, #4

08000c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c18:	d3f9      	bcc.n	8000c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c20:	e001      	b.n	8000c26 <LoopFillZerobss>

08000c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c24:	3204      	adds	r2, #4

08000c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c28:	d3fb      	bcc.n	8000c22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c2a:	f001 fe43 	bl	80028b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2e:	f7ff fc43 	bl	80004b8 <main>
  bx  lr    
 8000c32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c3c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c40:	0800293c 	.word	0x0800293c
  ldr r2, =_sbss
 8000c44:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c48:	200001a0 	.word	0x200001a0

08000c4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC_IRQHandler>
	...

08000c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c54:	4b0e      	ldr	r3, [pc, #56]	@ (8000c90 <HAL_Init+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0d      	ldr	r2, [pc, #52]	@ (8000c90 <HAL_Init+0x40>)
 8000c5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c60:	4b0b      	ldr	r3, [pc, #44]	@ (8000c90 <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a0a      	ldr	r2, [pc, #40]	@ (8000c90 <HAL_Init+0x40>)
 8000c66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c6c:	4b08      	ldr	r3, [pc, #32]	@ (8000c90 <HAL_Init+0x40>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a07      	ldr	r2, [pc, #28]	@ (8000c90 <HAL_Init+0x40>)
 8000c72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c78:	2003      	movs	r0, #3
 8000c7a:	f000 fb3a 	bl	80012f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f7ff fef4 	bl	8000a6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c84:	f7ff fdec 	bl	8000860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40023c00 	.word	0x40023c00

08000c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c98:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <HAL_IncTick+0x20>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <HAL_IncTick+0x24>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	4a04      	ldr	r2, [pc, #16]	@ (8000cb8 <HAL_IncTick+0x24>)
 8000ca6:	6013      	str	r3, [r2, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	2000019c 	.word	0x2000019c

08000cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc0:	4b03      	ldr	r3, [pc, #12]	@ (8000cd0 <HAL_GetTick+0x14>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	2000019c 	.word	0x2000019c

08000cd4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d101      	bne.n	8000cea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e033      	b.n	8000d52 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d109      	bne.n	8000d06 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff fddc 	bl	80008b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2200      	movs	r2, #0
 8000d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0a:	f003 0310 	and.w	r3, r3, #16
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d118      	bne.n	8000d44 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d16:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000d1a:	f023 0302 	bic.w	r3, r3, #2
 8000d1e:	f043 0202 	orr.w	r2, r3, #2
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f000 f93a 	bl	8000fa0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	f023 0303 	bic.w	r3, r3, #3
 8000d3a:	f043 0201 	orr.w	r2, r3, #1
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d42:	e001      	b.n	8000d48 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000d66:	2300      	movs	r3, #0
 8000d68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d101      	bne.n	8000d78 <HAL_ADC_ConfigChannel+0x1c>
 8000d74:	2302      	movs	r3, #2
 8000d76:	e105      	b.n	8000f84 <HAL_ADC_ConfigChannel+0x228>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b09      	cmp	r3, #9
 8000d86:	d925      	bls.n	8000dd4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	68d9      	ldr	r1, [r3, #12]
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	461a      	mov	r2, r3
 8000d96:	4613      	mov	r3, r2
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	4413      	add	r3, r2
 8000d9c:	3b1e      	subs	r3, #30
 8000d9e:	2207      	movs	r2, #7
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	43da      	mvns	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	400a      	ands	r2, r1
 8000dac:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	68d9      	ldr	r1, [r3, #12]
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	689a      	ldr	r2, [r3, #8]
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	4403      	add	r3, r0
 8000dc6:	3b1e      	subs	r3, #30
 8000dc8:	409a      	lsls	r2, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	e022      	b.n	8000e1a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	6919      	ldr	r1, [r3, #16]
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	461a      	mov	r2, r3
 8000de2:	4613      	mov	r3, r2
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	4413      	add	r3, r2
 8000de8:	2207      	movs	r2, #7
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43da      	mvns	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	400a      	ands	r2, r1
 8000df6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	6919      	ldr	r1, [r3, #16]
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	689a      	ldr	r2, [r3, #8]
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	4618      	mov	r0, r3
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	4403      	add	r3, r0
 8000e10:	409a      	lsls	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	430a      	orrs	r2, r1
 8000e18:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	2b06      	cmp	r3, #6
 8000e20:	d824      	bhi.n	8000e6c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685a      	ldr	r2, [r3, #4]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	4413      	add	r3, r2
 8000e32:	3b05      	subs	r3, #5
 8000e34:	221f      	movs	r2, #31
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	400a      	ands	r2, r1
 8000e42:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	4618      	mov	r0, r3
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685a      	ldr	r2, [r3, #4]
 8000e56:	4613      	mov	r3, r2
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	4413      	add	r3, r2
 8000e5c:	3b05      	subs	r3, #5
 8000e5e:	fa00 f203 	lsl.w	r2, r0, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	430a      	orrs	r2, r1
 8000e68:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e6a:	e04c      	b.n	8000f06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2b0c      	cmp	r3, #12
 8000e72:	d824      	bhi.n	8000ebe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	4413      	add	r3, r2
 8000e84:	3b23      	subs	r3, #35	@ 0x23
 8000e86:	221f      	movs	r2, #31
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43da      	mvns	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	400a      	ands	r2, r1
 8000e94:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685a      	ldr	r2, [r3, #4]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4413      	add	r3, r2
 8000eae:	3b23      	subs	r3, #35	@ 0x23
 8000eb0:	fa00 f203 	lsl.w	r2, r0, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ebc:	e023      	b.n	8000f06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	4413      	add	r3, r2
 8000ece:	3b41      	subs	r3, #65	@ 0x41
 8000ed0:	221f      	movs	r2, #31
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	400a      	ands	r2, r1
 8000ede:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	4618      	mov	r0, r3
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685a      	ldr	r2, [r3, #4]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	4413      	add	r3, r2
 8000ef8:	3b41      	subs	r3, #65	@ 0x41
 8000efa:	fa00 f203 	lsl.w	r2, r0, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	430a      	orrs	r2, r1
 8000f04:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f06:	4b22      	ldr	r3, [pc, #136]	@ (8000f90 <HAL_ADC_ConfigChannel+0x234>)
 8000f08:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a21      	ldr	r2, [pc, #132]	@ (8000f94 <HAL_ADC_ConfigChannel+0x238>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d109      	bne.n	8000f28 <HAL_ADC_ConfigChannel+0x1cc>
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b12      	cmp	r3, #18
 8000f1a:	d105      	bne.n	8000f28 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a19      	ldr	r2, [pc, #100]	@ (8000f94 <HAL_ADC_ConfigChannel+0x238>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d123      	bne.n	8000f7a <HAL_ADC_ConfigChannel+0x21e>
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b10      	cmp	r3, #16
 8000f38:	d003      	beq.n	8000f42 <HAL_ADC_ConfigChannel+0x1e6>
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2b11      	cmp	r3, #17
 8000f40:	d11b      	bne.n	8000f7a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2b10      	cmp	r3, #16
 8000f54:	d111      	bne.n	8000f7a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f56:	4b10      	ldr	r3, [pc, #64]	@ (8000f98 <HAL_ADC_ConfigChannel+0x23c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a10      	ldr	r2, [pc, #64]	@ (8000f9c <HAL_ADC_ConfigChannel+0x240>)
 8000f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f60:	0c9a      	lsrs	r2, r3, #18
 8000f62:	4613      	mov	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4413      	add	r3, r2
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000f6c:	e002      	b.n	8000f74 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	3b01      	subs	r3, #1
 8000f72:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1f9      	bne.n	8000f6e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8000f82:	2300      	movs	r3, #0
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	40012300 	.word	0x40012300
 8000f94:	40012000 	.word	0x40012000
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	431bde83 	.word	0x431bde83

08000fa0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fa8:	4b79      	ldr	r3, [pc, #484]	@ (8001190 <ADC_Init+0x1f0>)
 8000faa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	685a      	ldr	r2, [r3, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	431a      	orrs	r2, r3
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	685a      	ldr	r2, [r3, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000fd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	6859      	ldr	r1, [r3, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	691b      	ldr	r3, [r3, #16]
 8000fe0:	021a      	lsls	r2, r3, #8
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8000ff8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	6859      	ldr	r1, [r3, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689a      	ldr	r2, [r3, #8]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	430a      	orrs	r2, r1
 800100a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	689a      	ldr	r2, [r3, #8]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800101a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	6899      	ldr	r1, [r3, #8]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	68da      	ldr	r2, [r3, #12]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	430a      	orrs	r2, r1
 800102c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001032:	4a58      	ldr	r2, [pc, #352]	@ (8001194 <ADC_Init+0x1f4>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d022      	beq.n	800107e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001046:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	6899      	ldr	r1, [r3, #8]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	430a      	orrs	r2, r1
 8001058:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	689a      	ldr	r2, [r3, #8]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001068:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	6899      	ldr	r1, [r3, #8]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	430a      	orrs	r2, r1
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	e00f      	b.n	800109e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	689a      	ldr	r2, [r3, #8]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800108c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800109c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f022 0202 	bic.w	r2, r2, #2
 80010ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	6899      	ldr	r1, [r3, #8]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	7e1b      	ldrb	r3, [r3, #24]
 80010b8:	005a      	lsls	r2, r3, #1
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	430a      	orrs	r2, r1
 80010c0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d01b      	beq.n	8001104 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80010da:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80010ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	6859      	ldr	r1, [r3, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f6:	3b01      	subs	r3, #1
 80010f8:	035a      	lsls	r2, r3, #13
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	430a      	orrs	r2, r1
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	e007      	b.n	8001114 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001112:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001122:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	3b01      	subs	r3, #1
 8001130:	051a      	lsls	r2, r3, #20
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	430a      	orrs	r2, r1
 8001138:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001148:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6899      	ldr	r1, [r3, #8]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001156:	025a      	lsls	r2, r3, #9
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	430a      	orrs	r2, r1
 800115e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	689a      	ldr	r2, [r3, #8]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800116e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	6899      	ldr	r1, [r3, #8]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	029a      	lsls	r2, r3, #10
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	430a      	orrs	r2, r1
 8001182:	609a      	str	r2, [r3, #8]
}
 8001184:	bf00      	nop
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	40012300 	.word	0x40012300
 8001194:	0f000001 	.word	0x0f000001

08001198 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a8:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <__NVIC_SetPriorityGrouping+0x44>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011b4:	4013      	ands	r3, r2
 80011b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ca:	4a04      	ldr	r2, [pc, #16]	@ (80011dc <__NVIC_SetPriorityGrouping+0x44>)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	60d3      	str	r3, [r2, #12]
}
 80011d0:	bf00      	nop
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e4:	4b04      	ldr	r3, [pc, #16]	@ (80011f8 <__NVIC_GetPriorityGrouping+0x18>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	0a1b      	lsrs	r3, r3, #8
 80011ea:	f003 0307 	and.w	r3, r3, #7
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	2b00      	cmp	r3, #0
 800120c:	db0b      	blt.n	8001226 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	f003 021f 	and.w	r2, r3, #31
 8001214:	4907      	ldr	r1, [pc, #28]	@ (8001234 <__NVIC_EnableIRQ+0x38>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	095b      	lsrs	r3, r3, #5
 800121c:	2001      	movs	r0, #1
 800121e:	fa00 f202 	lsl.w	r2, r0, r2
 8001222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000e100 	.word	0xe000e100

08001238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	6039      	str	r1, [r7, #0]
 8001242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001248:	2b00      	cmp	r3, #0
 800124a:	db0a      	blt.n	8001262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	b2da      	uxtb	r2, r3
 8001250:	490c      	ldr	r1, [pc, #48]	@ (8001284 <__NVIC_SetPriority+0x4c>)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	0112      	lsls	r2, r2, #4
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	440b      	add	r3, r1
 800125c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001260:	e00a      	b.n	8001278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4908      	ldr	r1, [pc, #32]	@ (8001288 <__NVIC_SetPriority+0x50>)
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	3b04      	subs	r3, #4
 8001270:	0112      	lsls	r2, r2, #4
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	440b      	add	r3, r1
 8001276:	761a      	strb	r2, [r3, #24]
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000e100 	.word	0xe000e100
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800128c:	b480      	push	{r7}
 800128e:	b089      	sub	sp, #36	@ 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	f1c3 0307 	rsb	r3, r3, #7
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	bf28      	it	cs
 80012aa:	2304      	movcs	r3, #4
 80012ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3304      	adds	r3, #4
 80012b2:	2b06      	cmp	r3, #6
 80012b4:	d902      	bls.n	80012bc <NVIC_EncodePriority+0x30>
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3b03      	subs	r3, #3
 80012ba:	e000      	b.n	80012be <NVIC_EncodePriority+0x32>
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c0:	f04f 32ff 	mov.w	r2, #4294967295
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43da      	mvns	r2, r3
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	401a      	ands	r2, r3
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d4:	f04f 31ff 	mov.w	r1, #4294967295
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	fa01 f303 	lsl.w	r3, r1, r3
 80012de:	43d9      	mvns	r1, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e4:	4313      	orrs	r3, r2
         );
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3724      	adds	r7, #36	@ 0x24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ff4c 	bl	8001198 <__NVIC_SetPriorityGrouping>
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
 8001314:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800131a:	f7ff ff61 	bl	80011e0 <__NVIC_GetPriorityGrouping>
 800131e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	68b9      	ldr	r1, [r7, #8]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ffb1 	bl	800128c <NVIC_EncodePriority>
 800132a:	4602      	mov	r2, r0
 800132c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001330:	4611      	mov	r1, r2
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff ff80 	bl	8001238 <__NVIC_SetPriority>
}
 8001338:	bf00      	nop
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff ff54 	bl	80011fc <__NVIC_EnableIRQ>
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	@ 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800136e:	2300      	movs	r3, #0
 8001370:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
 8001376:	e16b      	b.n	8001650 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001378:	2201      	movs	r2, #1
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	429a      	cmp	r2, r3
 8001392:	f040 815a 	bne.w	800164a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d005      	beq.n	80013ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d130      	bne.n	8001410 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	2203      	movs	r2, #3
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	68da      	ldr	r2, [r3, #12]
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013e4:	2201      	movs	r2, #1
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	091b      	lsrs	r3, r3, #4
 80013fa:	f003 0201 	and.w	r2, r3, #1
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	2b03      	cmp	r3, #3
 800141a:	d017      	beq.n	800144c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	2203      	movs	r2, #3
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d123      	bne.n	80014a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	08da      	lsrs	r2, r3, #3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3208      	adds	r2, #8
 8001460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	220f      	movs	r2, #15
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	691a      	ldr	r2, [r3, #16]
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	08da      	lsrs	r2, r3, #3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3208      	adds	r2, #8
 800149a:	69b9      	ldr	r1, [r7, #24]
 800149c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	2203      	movs	r2, #3
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 0203 	and.w	r2, r3, #3
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 80b4 	beq.w	800164a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b60      	ldr	r3, [pc, #384]	@ (8001668 <HAL_GPIO_Init+0x30c>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ea:	4a5f      	ldr	r2, [pc, #380]	@ (8001668 <HAL_GPIO_Init+0x30c>)
 80014ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014f2:	4b5d      	ldr	r3, [pc, #372]	@ (8001668 <HAL_GPIO_Init+0x30c>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014fe:	4a5b      	ldr	r2, [pc, #364]	@ (800166c <HAL_GPIO_Init+0x310>)
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	089b      	lsrs	r3, r3, #2
 8001504:	3302      	adds	r3, #2
 8001506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f003 0303 	and.w	r3, r3, #3
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	220f      	movs	r2, #15
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a52      	ldr	r2, [pc, #328]	@ (8001670 <HAL_GPIO_Init+0x314>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d02b      	beq.n	8001582 <HAL_GPIO_Init+0x226>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a51      	ldr	r2, [pc, #324]	@ (8001674 <HAL_GPIO_Init+0x318>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d025      	beq.n	800157e <HAL_GPIO_Init+0x222>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a50      	ldr	r2, [pc, #320]	@ (8001678 <HAL_GPIO_Init+0x31c>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d01f      	beq.n	800157a <HAL_GPIO_Init+0x21e>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a4f      	ldr	r2, [pc, #316]	@ (800167c <HAL_GPIO_Init+0x320>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d019      	beq.n	8001576 <HAL_GPIO_Init+0x21a>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a4e      	ldr	r2, [pc, #312]	@ (8001680 <HAL_GPIO_Init+0x324>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d013      	beq.n	8001572 <HAL_GPIO_Init+0x216>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a4d      	ldr	r2, [pc, #308]	@ (8001684 <HAL_GPIO_Init+0x328>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d00d      	beq.n	800156e <HAL_GPIO_Init+0x212>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a4c      	ldr	r2, [pc, #304]	@ (8001688 <HAL_GPIO_Init+0x32c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d007      	beq.n	800156a <HAL_GPIO_Init+0x20e>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a4b      	ldr	r2, [pc, #300]	@ (800168c <HAL_GPIO_Init+0x330>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d101      	bne.n	8001566 <HAL_GPIO_Init+0x20a>
 8001562:	2307      	movs	r3, #7
 8001564:	e00e      	b.n	8001584 <HAL_GPIO_Init+0x228>
 8001566:	2308      	movs	r3, #8
 8001568:	e00c      	b.n	8001584 <HAL_GPIO_Init+0x228>
 800156a:	2306      	movs	r3, #6
 800156c:	e00a      	b.n	8001584 <HAL_GPIO_Init+0x228>
 800156e:	2305      	movs	r3, #5
 8001570:	e008      	b.n	8001584 <HAL_GPIO_Init+0x228>
 8001572:	2304      	movs	r3, #4
 8001574:	e006      	b.n	8001584 <HAL_GPIO_Init+0x228>
 8001576:	2303      	movs	r3, #3
 8001578:	e004      	b.n	8001584 <HAL_GPIO_Init+0x228>
 800157a:	2302      	movs	r3, #2
 800157c:	e002      	b.n	8001584 <HAL_GPIO_Init+0x228>
 800157e:	2301      	movs	r3, #1
 8001580:	e000      	b.n	8001584 <HAL_GPIO_Init+0x228>
 8001582:	2300      	movs	r3, #0
 8001584:	69fa      	ldr	r2, [r7, #28]
 8001586:	f002 0203 	and.w	r2, r2, #3
 800158a:	0092      	lsls	r2, r2, #2
 800158c:	4093      	lsls	r3, r2
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001594:	4935      	ldr	r1, [pc, #212]	@ (800166c <HAL_GPIO_Init+0x310>)
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	089b      	lsrs	r3, r3, #2
 800159a:	3302      	adds	r3, #2
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001690 <HAL_GPIO_Init+0x334>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	43db      	mvns	r3, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4013      	ands	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015c6:	4a32      	ldr	r2, [pc, #200]	@ (8001690 <HAL_GPIO_Init+0x334>)
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015cc:	4b30      	ldr	r3, [pc, #192]	@ (8001690 <HAL_GPIO_Init+0x334>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4013      	ands	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015f0:	4a27      	ldr	r2, [pc, #156]	@ (8001690 <HAL_GPIO_Init+0x334>)
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015f6:	4b26      	ldr	r3, [pc, #152]	@ (8001690 <HAL_GPIO_Init+0x334>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	43db      	mvns	r3, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4013      	ands	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	4313      	orrs	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800161a:	4a1d      	ldr	r2, [pc, #116]	@ (8001690 <HAL_GPIO_Init+0x334>)
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001620:	4b1b      	ldr	r3, [pc, #108]	@ (8001690 <HAL_GPIO_Init+0x334>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	4313      	orrs	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001644:	4a12      	ldr	r2, [pc, #72]	@ (8001690 <HAL_GPIO_Init+0x334>)
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3301      	adds	r3, #1
 800164e:	61fb      	str	r3, [r7, #28]
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	2b0f      	cmp	r3, #15
 8001654:	f67f ae90 	bls.w	8001378 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001658:	bf00      	nop
 800165a:	bf00      	nop
 800165c:	3724      	adds	r7, #36	@ 0x24
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800
 800166c:	40013800 	.word	0x40013800
 8001670:	40020000 	.word	0x40020000
 8001674:	40020400 	.word	0x40020400
 8001678:	40020800 	.word	0x40020800
 800167c:	40020c00 	.word	0x40020c00
 8001680:	40021000 	.word	0x40021000
 8001684:	40021400 	.word	0x40021400
 8001688:	40021800 	.word	0x40021800
 800168c:	40021c00 	.word	0x40021c00
 8001690:	40013c00 	.word	0x40013c00

08001694 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e12b      	b.n	80018fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d106      	bne.n	80016c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff f96c 	bl	8000998 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2224      	movs	r2, #36	@ 0x24
 80016c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 0201 	bic.w	r2, r2, #1
 80016d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80016e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016f8:	f000 fd80 	bl	80021fc <HAL_RCC_GetPCLK1Freq>
 80016fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	4a81      	ldr	r2, [pc, #516]	@ (8001908 <HAL_I2C_Init+0x274>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d807      	bhi.n	8001718 <HAL_I2C_Init+0x84>
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4a80      	ldr	r2, [pc, #512]	@ (800190c <HAL_I2C_Init+0x278>)
 800170c:	4293      	cmp	r3, r2
 800170e:	bf94      	ite	ls
 8001710:	2301      	movls	r3, #1
 8001712:	2300      	movhi	r3, #0
 8001714:	b2db      	uxtb	r3, r3
 8001716:	e006      	b.n	8001726 <HAL_I2C_Init+0x92>
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4a7d      	ldr	r2, [pc, #500]	@ (8001910 <HAL_I2C_Init+0x27c>)
 800171c:	4293      	cmp	r3, r2
 800171e:	bf94      	ite	ls
 8001720:	2301      	movls	r3, #1
 8001722:	2300      	movhi	r3, #0
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e0e7      	b.n	80018fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	4a78      	ldr	r2, [pc, #480]	@ (8001914 <HAL_I2C_Init+0x280>)
 8001732:	fba2 2303 	umull	r2, r3, r2, r3
 8001736:	0c9b      	lsrs	r3, r3, #18
 8001738:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	68ba      	ldr	r2, [r7, #8]
 800174a:	430a      	orrs	r2, r1
 800174c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	4a6a      	ldr	r2, [pc, #424]	@ (8001908 <HAL_I2C_Init+0x274>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d802      	bhi.n	8001768 <HAL_I2C_Init+0xd4>
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	3301      	adds	r3, #1
 8001766:	e009      	b.n	800177c <HAL_I2C_Init+0xe8>
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800176e:	fb02 f303 	mul.w	r3, r2, r3
 8001772:	4a69      	ldr	r2, [pc, #420]	@ (8001918 <HAL_I2C_Init+0x284>)
 8001774:	fba2 2303 	umull	r2, r3, r2, r3
 8001778:	099b      	lsrs	r3, r3, #6
 800177a:	3301      	adds	r3, #1
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	6812      	ldr	r2, [r2, #0]
 8001780:	430b      	orrs	r3, r1
 8001782:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800178e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	495c      	ldr	r1, [pc, #368]	@ (8001908 <HAL_I2C_Init+0x274>)
 8001798:	428b      	cmp	r3, r1
 800179a:	d819      	bhi.n	80017d0 <HAL_I2C_Init+0x13c>
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	1e59      	subs	r1, r3, #1
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80017aa:	1c59      	adds	r1, r3, #1
 80017ac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80017b0:	400b      	ands	r3, r1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00a      	beq.n	80017cc <HAL_I2C_Init+0x138>
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	1e59      	subs	r1, r3, #1
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80017c4:	3301      	adds	r3, #1
 80017c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ca:	e051      	b.n	8001870 <HAL_I2C_Init+0x1dc>
 80017cc:	2304      	movs	r3, #4
 80017ce:	e04f      	b.n	8001870 <HAL_I2C_Init+0x1dc>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d111      	bne.n	80017fc <HAL_I2C_Init+0x168>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	1e58      	subs	r0, r3, #1
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6859      	ldr	r1, [r3, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	440b      	add	r3, r1
 80017e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80017ea:	3301      	adds	r3, #1
 80017ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	bf0c      	ite	eq
 80017f4:	2301      	moveq	r3, #1
 80017f6:	2300      	movne	r3, #0
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	e012      	b.n	8001822 <HAL_I2C_Init+0x18e>
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	1e58      	subs	r0, r3, #1
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6859      	ldr	r1, [r3, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	440b      	add	r3, r1
 800180a:	0099      	lsls	r1, r3, #2
 800180c:	440b      	add	r3, r1
 800180e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001812:	3301      	adds	r3, #1
 8001814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001818:	2b00      	cmp	r3, #0
 800181a:	bf0c      	ite	eq
 800181c:	2301      	moveq	r3, #1
 800181e:	2300      	movne	r3, #0
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <HAL_I2C_Init+0x196>
 8001826:	2301      	movs	r3, #1
 8001828:	e022      	b.n	8001870 <HAL_I2C_Init+0x1dc>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10e      	bne.n	8001850 <HAL_I2C_Init+0x1bc>
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	1e58      	subs	r0, r3, #1
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6859      	ldr	r1, [r3, #4]
 800183a:	460b      	mov	r3, r1
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	440b      	add	r3, r1
 8001840:	fbb0 f3f3 	udiv	r3, r0, r3
 8001844:	3301      	adds	r3, #1
 8001846:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800184a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800184e:	e00f      	b.n	8001870 <HAL_I2C_Init+0x1dc>
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	1e58      	subs	r0, r3, #1
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6859      	ldr	r1, [r3, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	440b      	add	r3, r1
 800185e:	0099      	lsls	r1, r3, #2
 8001860:	440b      	add	r3, r1
 8001862:	fbb0 f3f3 	udiv	r3, r0, r3
 8001866:	3301      	adds	r3, #1
 8001868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800186c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	6809      	ldr	r1, [r1, #0]
 8001874:	4313      	orrs	r3, r2
 8001876:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69da      	ldr	r2, [r3, #28]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	430a      	orrs	r2, r1
 8001892:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800189e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6911      	ldr	r1, [r2, #16]
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	68d2      	ldr	r2, [r2, #12]
 80018aa:	4311      	orrs	r1, r2
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	430b      	orrs	r3, r1
 80018b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	695a      	ldr	r2, [r3, #20]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f042 0201 	orr.w	r2, r2, #1
 80018de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2220      	movs	r2, #32
 80018ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	000186a0 	.word	0x000186a0
 800190c:	001e847f 	.word	0x001e847f
 8001910:	003d08ff 	.word	0x003d08ff
 8001914:	431bde83 	.word	0x431bde83
 8001918:	10624dd3 	.word	0x10624dd3

0800191c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e267      	b.n	8001dfe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d075      	beq.n	8001a26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800193a:	4b88      	ldr	r3, [pc, #544]	@ (8001b5c <HAL_RCC_OscConfig+0x240>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 030c 	and.w	r3, r3, #12
 8001942:	2b04      	cmp	r3, #4
 8001944:	d00c      	beq.n	8001960 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001946:	4b85      	ldr	r3, [pc, #532]	@ (8001b5c <HAL_RCC_OscConfig+0x240>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800194e:	2b08      	cmp	r3, #8
 8001950:	d112      	bne.n	8001978 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001952:	4b82      	ldr	r3, [pc, #520]	@ (8001b5c <HAL_RCC_OscConfig+0x240>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800195a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800195e:	d10b      	bne.n	8001978 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001960:	4b7e      	ldr	r3, [pc, #504]	@ (8001b5c <HAL_RCC_OscConfig+0x240>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d05b      	beq.n	8001a24 <HAL_RCC_OscConfig+0x108>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d157      	bne.n	8001a24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e242      	b.n	8001dfe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001980:	d106      	bne.n	8001990 <HAL_RCC_OscConfig+0x74>
 8001982:	4b76      	ldr	r3, [pc, #472]	@ (8001b5c <HAL_RCC_OscConfig+0x240>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a75      	ldr	r2, [pc, #468]	@ (8001b5c <HAL_RCC_OscConfig+0x240>)
 8001988:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	e01d      	b.n	80019cc <HAL_RCC_OscConfig+0xb0>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001998:	d10c      	bne.n	80019b4 <HAL_RCC_OscConfig+0x98>
 800199a:	4b70      	ldr	r3, [pc, #448]	@ (8001b5c <HAL_RCC_OscConfig+0x240>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a6f      	ldr	r2, [pc, #444]	@ (8001b5c <HAL_RCC_OscConfig+0x240>)
 80019a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	4b6d      	ldr	r3, [pc, #436]	@ (8001b5c <HAL_RCC_OscConfig+0x240>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a6c      	ldr	r2, [pc, #432]	@ (8001b5c <HAL_RCC_OscConfig+0x240>)
 80019ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	e00b      	b.n	80019cc <HAL_RCC_OscConfig+0xb0>
 80019b4:	4b69      	ldr	r3, [pc, #420]	@ (8001b5c <HAL_RCC_OscConfig+0x240>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a68      	ldr	r2, [pc, #416]	@ (8001b5c <HAL_RCC_OscConfig+0x240>)
 80019ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	4b66      	ldr	r3, [pc, #408]	@ (8001b5c <HAL_RCC_OscConfig+0x240>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a65      	ldr	r2, [pc, #404]	@ (8001b5c <HAL_RCC_OscConfig+0x240>)
 80019c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d013      	beq.n	80019fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d4:	f7ff f972 	bl	8000cbc <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019dc:	f7ff f96e 	bl	8000cbc <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b64      	cmp	r3, #100	@ 0x64
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e207      	b.n	8001dfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ee:	4b5b      	ldr	r3, [pc, #364]	@ (8001b5c <HAL_RCC_OscConfig+0x240>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0f0      	beq.n	80019dc <HAL_RCC_OscConfig+0xc0>
 80019fa:	e014      	b.n	8001a26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fc:	f7ff f95e 	bl	8000cbc <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a04:	f7ff f95a 	bl	8000cbc <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b64      	cmp	r3, #100	@ 0x64
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e1f3      	b.n	8001dfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a16:	4b51      	ldr	r3, [pc, #324]	@ (8001b5c <HAL_RCC_OscConfig+0x240>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0xe8>
 8001a22:	e000      	b.n	8001a26 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d063      	beq.n	8001afa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a32:	4b4a      	ldr	r3, [pc, #296]	@ (8001b5c <HAL_RCC_OscConfig+0x240>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 030c 	and.w	r3, r3, #12
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00b      	beq.n	8001a56 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a3e:	4b47      	ldr	r3, [pc, #284]	@ (8001b5c <HAL_RCC_OscConfig+0x240>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a46:	2b08      	cmp	r3, #8
 8001a48:	d11c      	bne.n	8001a84 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a4a:	4b44      	ldr	r3, [pc, #272]	@ (8001b5c <HAL_RCC_OscConfig+0x240>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d116      	bne.n	8001a84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a56:	4b41      	ldr	r3, [pc, #260]	@ (8001b5c <HAL_RCC_OscConfig+0x240>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d005      	beq.n	8001a6e <HAL_RCC_OscConfig+0x152>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d001      	beq.n	8001a6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e1c7      	b.n	8001dfe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b5c <HAL_RCC_OscConfig+0x240>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	4937      	ldr	r1, [pc, #220]	@ (8001b5c <HAL_RCC_OscConfig+0x240>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a82:	e03a      	b.n	8001afa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d020      	beq.n	8001ace <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a8c:	4b34      	ldr	r3, [pc, #208]	@ (8001b60 <HAL_RCC_OscConfig+0x244>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a92:	f7ff f913 	bl	8000cbc <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a9a:	f7ff f90f 	bl	8000cbc <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e1a8      	b.n	8001dfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aac:	4b2b      	ldr	r3, [pc, #172]	@ (8001b5c <HAL_RCC_OscConfig+0x240>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0f0      	beq.n	8001a9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab8:	4b28      	ldr	r3, [pc, #160]	@ (8001b5c <HAL_RCC_OscConfig+0x240>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	4925      	ldr	r1, [pc, #148]	@ (8001b5c <HAL_RCC_OscConfig+0x240>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	600b      	str	r3, [r1, #0]
 8001acc:	e015      	b.n	8001afa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ace:	4b24      	ldr	r3, [pc, #144]	@ (8001b60 <HAL_RCC_OscConfig+0x244>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad4:	f7ff f8f2 	bl	8000cbc <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001adc:	f7ff f8ee 	bl	8000cbc <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e187      	b.n	8001dfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aee:	4b1b      	ldr	r3, [pc, #108]	@ (8001b5c <HAL_RCC_OscConfig+0x240>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d036      	beq.n	8001b74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d016      	beq.n	8001b3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b0e:	4b15      	ldr	r3, [pc, #84]	@ (8001b64 <HAL_RCC_OscConfig+0x248>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b14:	f7ff f8d2 	bl	8000cbc <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b1c:	f7ff f8ce 	bl	8000cbc <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e167      	b.n	8001dfe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b5c <HAL_RCC_OscConfig+0x240>)
 8001b30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0x200>
 8001b3a:	e01b      	b.n	8001b74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b3c:	4b09      	ldr	r3, [pc, #36]	@ (8001b64 <HAL_RCC_OscConfig+0x248>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b42:	f7ff f8bb 	bl	8000cbc <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b48:	e00e      	b.n	8001b68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b4a:	f7ff f8b7 	bl	8000cbc <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d907      	bls.n	8001b68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e150      	b.n	8001dfe <HAL_RCC_OscConfig+0x4e2>
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	42470000 	.word	0x42470000
 8001b64:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b68:	4b88      	ldr	r3, [pc, #544]	@ (8001d8c <HAL_RCC_OscConfig+0x470>)
 8001b6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1ea      	bne.n	8001b4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f000 8097 	beq.w	8001cb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b82:	2300      	movs	r3, #0
 8001b84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b86:	4b81      	ldr	r3, [pc, #516]	@ (8001d8c <HAL_RCC_OscConfig+0x470>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d10f      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	4b7d      	ldr	r3, [pc, #500]	@ (8001d8c <HAL_RCC_OscConfig+0x470>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9a:	4a7c      	ldr	r2, [pc, #496]	@ (8001d8c <HAL_RCC_OscConfig+0x470>)
 8001b9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ba0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ba2:	4b7a      	ldr	r3, [pc, #488]	@ (8001d8c <HAL_RCC_OscConfig+0x470>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb2:	4b77      	ldr	r3, [pc, #476]	@ (8001d90 <HAL_RCC_OscConfig+0x474>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d118      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bbe:	4b74      	ldr	r3, [pc, #464]	@ (8001d90 <HAL_RCC_OscConfig+0x474>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a73      	ldr	r2, [pc, #460]	@ (8001d90 <HAL_RCC_OscConfig+0x474>)
 8001bc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bca:	f7ff f877 	bl	8000cbc <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bd2:	f7ff f873 	bl	8000cbc <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e10c      	b.n	8001dfe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be4:	4b6a      	ldr	r3, [pc, #424]	@ (8001d90 <HAL_RCC_OscConfig+0x474>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0f0      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d106      	bne.n	8001c06 <HAL_RCC_OscConfig+0x2ea>
 8001bf8:	4b64      	ldr	r3, [pc, #400]	@ (8001d8c <HAL_RCC_OscConfig+0x470>)
 8001bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bfc:	4a63      	ldr	r2, [pc, #396]	@ (8001d8c <HAL_RCC_OscConfig+0x470>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c04:	e01c      	b.n	8001c40 <HAL_RCC_OscConfig+0x324>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	2b05      	cmp	r3, #5
 8001c0c:	d10c      	bne.n	8001c28 <HAL_RCC_OscConfig+0x30c>
 8001c0e:	4b5f      	ldr	r3, [pc, #380]	@ (8001d8c <HAL_RCC_OscConfig+0x470>)
 8001c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c12:	4a5e      	ldr	r2, [pc, #376]	@ (8001d8c <HAL_RCC_OscConfig+0x470>)
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c1a:	4b5c      	ldr	r3, [pc, #368]	@ (8001d8c <HAL_RCC_OscConfig+0x470>)
 8001c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c1e:	4a5b      	ldr	r2, [pc, #364]	@ (8001d8c <HAL_RCC_OscConfig+0x470>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c26:	e00b      	b.n	8001c40 <HAL_RCC_OscConfig+0x324>
 8001c28:	4b58      	ldr	r3, [pc, #352]	@ (8001d8c <HAL_RCC_OscConfig+0x470>)
 8001c2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c2c:	4a57      	ldr	r2, [pc, #348]	@ (8001d8c <HAL_RCC_OscConfig+0x470>)
 8001c2e:	f023 0301 	bic.w	r3, r3, #1
 8001c32:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c34:	4b55      	ldr	r3, [pc, #340]	@ (8001d8c <HAL_RCC_OscConfig+0x470>)
 8001c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c38:	4a54      	ldr	r2, [pc, #336]	@ (8001d8c <HAL_RCC_OscConfig+0x470>)
 8001c3a:	f023 0304 	bic.w	r3, r3, #4
 8001c3e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d015      	beq.n	8001c74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c48:	f7ff f838 	bl	8000cbc <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c4e:	e00a      	b.n	8001c66 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c50:	f7ff f834 	bl	8000cbc <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e0cb      	b.n	8001dfe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c66:	4b49      	ldr	r3, [pc, #292]	@ (8001d8c <HAL_RCC_OscConfig+0x470>)
 8001c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0ee      	beq.n	8001c50 <HAL_RCC_OscConfig+0x334>
 8001c72:	e014      	b.n	8001c9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c74:	f7ff f822 	bl	8000cbc <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c7a:	e00a      	b.n	8001c92 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c7c:	f7ff f81e 	bl	8000cbc <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e0b5      	b.n	8001dfe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c92:	4b3e      	ldr	r3, [pc, #248]	@ (8001d8c <HAL_RCC_OscConfig+0x470>)
 8001c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1ee      	bne.n	8001c7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d105      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ca4:	4b39      	ldr	r3, [pc, #228]	@ (8001d8c <HAL_RCC_OscConfig+0x470>)
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca8:	4a38      	ldr	r2, [pc, #224]	@ (8001d8c <HAL_RCC_OscConfig+0x470>)
 8001caa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 80a1 	beq.w	8001dfc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cba:	4b34      	ldr	r3, [pc, #208]	@ (8001d8c <HAL_RCC_OscConfig+0x470>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	2b08      	cmp	r3, #8
 8001cc4:	d05c      	beq.n	8001d80 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d141      	bne.n	8001d52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cce:	4b31      	ldr	r3, [pc, #196]	@ (8001d94 <HAL_RCC_OscConfig+0x478>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd4:	f7fe fff2 	bl	8000cbc <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cdc:	f7fe ffee 	bl	8000cbc <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e087      	b.n	8001dfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cee:	4b27      	ldr	r3, [pc, #156]	@ (8001d8c <HAL_RCC_OscConfig+0x470>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69da      	ldr	r2, [r3, #28]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d08:	019b      	lsls	r3, r3, #6
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d10:	085b      	lsrs	r3, r3, #1
 8001d12:	3b01      	subs	r3, #1
 8001d14:	041b      	lsls	r3, r3, #16
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d1c:	061b      	lsls	r3, r3, #24
 8001d1e:	491b      	ldr	r1, [pc, #108]	@ (8001d8c <HAL_RCC_OscConfig+0x470>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d24:	4b1b      	ldr	r3, [pc, #108]	@ (8001d94 <HAL_RCC_OscConfig+0x478>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2a:	f7fe ffc7 	bl	8000cbc <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d32:	f7fe ffc3 	bl	8000cbc <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e05c      	b.n	8001dfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d44:	4b11      	ldr	r3, [pc, #68]	@ (8001d8c <HAL_RCC_OscConfig+0x470>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0f0      	beq.n	8001d32 <HAL_RCC_OscConfig+0x416>
 8001d50:	e054      	b.n	8001dfc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d52:	4b10      	ldr	r3, [pc, #64]	@ (8001d94 <HAL_RCC_OscConfig+0x478>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d58:	f7fe ffb0 	bl	8000cbc <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d60:	f7fe ffac 	bl	8000cbc <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e045      	b.n	8001dfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d72:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <HAL_RCC_OscConfig+0x470>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f0      	bne.n	8001d60 <HAL_RCC_OscConfig+0x444>
 8001d7e:	e03d      	b.n	8001dfc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d107      	bne.n	8001d98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e038      	b.n	8001dfe <HAL_RCC_OscConfig+0x4e2>
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40007000 	.word	0x40007000
 8001d94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d98:	4b1b      	ldr	r3, [pc, #108]	@ (8001e08 <HAL_RCC_OscConfig+0x4ec>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d028      	beq.n	8001df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d121      	bne.n	8001df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d11a      	bne.n	8001df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001dc8:	4013      	ands	r3, r2
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001dce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d111      	bne.n	8001df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dde:	085b      	lsrs	r3, r3, #1
 8001de0:	3b01      	subs	r3, #1
 8001de2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d107      	bne.n	8001df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d001      	beq.n	8001dfc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e000      	b.n	8001dfe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3718      	adds	r7, #24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800

08001e0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e0cc      	b.n	8001fba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e20:	4b68      	ldr	r3, [pc, #416]	@ (8001fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d90c      	bls.n	8001e48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2e:	4b65      	ldr	r3, [pc, #404]	@ (8001fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e36:	4b63      	ldr	r3, [pc, #396]	@ (8001fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d001      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e0b8      	b.n	8001fba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d020      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e60:	4b59      	ldr	r3, [pc, #356]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	4a58      	ldr	r2, [pc, #352]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001e6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e78:	4b53      	ldr	r3, [pc, #332]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	4a52      	ldr	r2, [pc, #328]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e84:	4b50      	ldr	r3, [pc, #320]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	494d      	ldr	r1, [pc, #308]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d044      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d107      	bne.n	8001eba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eaa:	4b47      	ldr	r3, [pc, #284]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d119      	bne.n	8001eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e07f      	b.n	8001fba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d003      	beq.n	8001eca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	d107      	bne.n	8001eda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eca:	4b3f      	ldr	r3, [pc, #252]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d109      	bne.n	8001eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e06f      	b.n	8001fba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eda:	4b3b      	ldr	r3, [pc, #236]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e067      	b.n	8001fba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eea:	4b37      	ldr	r3, [pc, #220]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f023 0203 	bic.w	r2, r3, #3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	4934      	ldr	r1, [pc, #208]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001efc:	f7fe fede 	bl	8000cbc <HAL_GetTick>
 8001f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f02:	e00a      	b.n	8001f1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f04:	f7fe feda 	bl	8000cbc <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e04f      	b.n	8001fba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1a:	4b2b      	ldr	r3, [pc, #172]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 020c 	and.w	r2, r3, #12
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d1eb      	bne.n	8001f04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f2c:	4b25      	ldr	r3, [pc, #148]	@ (8001fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d20c      	bcs.n	8001f54 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3a:	4b22      	ldr	r3, [pc, #136]	@ (8001fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f42:	4b20      	ldr	r3, [pc, #128]	@ (8001fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d001      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e032      	b.n	8001fba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d008      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f60:	4b19      	ldr	r3, [pc, #100]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	4916      	ldr	r1, [pc, #88]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d009      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f7e:	4b12      	ldr	r3, [pc, #72]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	490e      	ldr	r1, [pc, #56]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f92:	f000 f821 	bl	8001fd8 <HAL_RCC_GetSysClockFreq>
 8001f96:	4602      	mov	r2, r0
 8001f98:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	091b      	lsrs	r3, r3, #4
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	490a      	ldr	r1, [pc, #40]	@ (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001fa4:	5ccb      	ldrb	r3, [r1, r3]
 8001fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8001faa:	4a09      	ldr	r2, [pc, #36]	@ (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001fae:	4b09      	ldr	r3, [pc, #36]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe fd5a 	bl	8000a6c <HAL_InitTick>

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023c00 	.word	0x40023c00
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	08002914 	.word	0x08002914
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	20000004 	.word	0x20000004

08001fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fdc:	b094      	sub	sp, #80	@ 0x50
 8001fde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ff0:	4b79      	ldr	r3, [pc, #484]	@ (80021d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 030c 	and.w	r3, r3, #12
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d00d      	beq.n	8002018 <HAL_RCC_GetSysClockFreq+0x40>
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	f200 80e1 	bhi.w	80021c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002002:	2b00      	cmp	r3, #0
 8002004:	d002      	beq.n	800200c <HAL_RCC_GetSysClockFreq+0x34>
 8002006:	2b04      	cmp	r3, #4
 8002008:	d003      	beq.n	8002012 <HAL_RCC_GetSysClockFreq+0x3a>
 800200a:	e0db      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800200c:	4b73      	ldr	r3, [pc, #460]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x204>)
 800200e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002010:	e0db      	b.n	80021ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002012:	4b73      	ldr	r3, [pc, #460]	@ (80021e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002014:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002016:	e0d8      	b.n	80021ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002018:	4b6f      	ldr	r3, [pc, #444]	@ (80021d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002020:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002022:	4b6d      	ldr	r3, [pc, #436]	@ (80021d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d063      	beq.n	80020f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800202e:	4b6a      	ldr	r3, [pc, #424]	@ (80021d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	099b      	lsrs	r3, r3, #6
 8002034:	2200      	movs	r2, #0
 8002036:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002038:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800203a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800203c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002040:	633b      	str	r3, [r7, #48]	@ 0x30
 8002042:	2300      	movs	r3, #0
 8002044:	637b      	str	r3, [r7, #52]	@ 0x34
 8002046:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800204a:	4622      	mov	r2, r4
 800204c:	462b      	mov	r3, r5
 800204e:	f04f 0000 	mov.w	r0, #0
 8002052:	f04f 0100 	mov.w	r1, #0
 8002056:	0159      	lsls	r1, r3, #5
 8002058:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800205c:	0150      	lsls	r0, r2, #5
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4621      	mov	r1, r4
 8002064:	1a51      	subs	r1, r2, r1
 8002066:	6139      	str	r1, [r7, #16]
 8002068:	4629      	mov	r1, r5
 800206a:	eb63 0301 	sbc.w	r3, r3, r1
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	f04f 0200 	mov.w	r2, #0
 8002074:	f04f 0300 	mov.w	r3, #0
 8002078:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800207c:	4659      	mov	r1, fp
 800207e:	018b      	lsls	r3, r1, #6
 8002080:	4651      	mov	r1, sl
 8002082:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002086:	4651      	mov	r1, sl
 8002088:	018a      	lsls	r2, r1, #6
 800208a:	4651      	mov	r1, sl
 800208c:	ebb2 0801 	subs.w	r8, r2, r1
 8002090:	4659      	mov	r1, fp
 8002092:	eb63 0901 	sbc.w	r9, r3, r1
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	f04f 0300 	mov.w	r3, #0
 800209e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020aa:	4690      	mov	r8, r2
 80020ac:	4699      	mov	r9, r3
 80020ae:	4623      	mov	r3, r4
 80020b0:	eb18 0303 	adds.w	r3, r8, r3
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	462b      	mov	r3, r5
 80020b8:	eb49 0303 	adc.w	r3, r9, r3
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	f04f 0300 	mov.w	r3, #0
 80020c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80020ca:	4629      	mov	r1, r5
 80020cc:	024b      	lsls	r3, r1, #9
 80020ce:	4621      	mov	r1, r4
 80020d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020d4:	4621      	mov	r1, r4
 80020d6:	024a      	lsls	r2, r1, #9
 80020d8:	4610      	mov	r0, r2
 80020da:	4619      	mov	r1, r3
 80020dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020de:	2200      	movs	r2, #0
 80020e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80020e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80020e8:	f7fe f86e 	bl	80001c8 <__aeabi_uldivmod>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4613      	mov	r3, r2
 80020f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020f4:	e058      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020f6:	4b38      	ldr	r3, [pc, #224]	@ (80021d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	099b      	lsrs	r3, r3, #6
 80020fc:	2200      	movs	r2, #0
 80020fe:	4618      	mov	r0, r3
 8002100:	4611      	mov	r1, r2
 8002102:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002106:	623b      	str	r3, [r7, #32]
 8002108:	2300      	movs	r3, #0
 800210a:	627b      	str	r3, [r7, #36]	@ 0x24
 800210c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002110:	4642      	mov	r2, r8
 8002112:	464b      	mov	r3, r9
 8002114:	f04f 0000 	mov.w	r0, #0
 8002118:	f04f 0100 	mov.w	r1, #0
 800211c:	0159      	lsls	r1, r3, #5
 800211e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002122:	0150      	lsls	r0, r2, #5
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	4641      	mov	r1, r8
 800212a:	ebb2 0a01 	subs.w	sl, r2, r1
 800212e:	4649      	mov	r1, r9
 8002130:	eb63 0b01 	sbc.w	fp, r3, r1
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	f04f 0300 	mov.w	r3, #0
 800213c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002140:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002144:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002148:	ebb2 040a 	subs.w	r4, r2, sl
 800214c:	eb63 050b 	sbc.w	r5, r3, fp
 8002150:	f04f 0200 	mov.w	r2, #0
 8002154:	f04f 0300 	mov.w	r3, #0
 8002158:	00eb      	lsls	r3, r5, #3
 800215a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800215e:	00e2      	lsls	r2, r4, #3
 8002160:	4614      	mov	r4, r2
 8002162:	461d      	mov	r5, r3
 8002164:	4643      	mov	r3, r8
 8002166:	18e3      	adds	r3, r4, r3
 8002168:	603b      	str	r3, [r7, #0]
 800216a:	464b      	mov	r3, r9
 800216c:	eb45 0303 	adc.w	r3, r5, r3
 8002170:	607b      	str	r3, [r7, #4]
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800217e:	4629      	mov	r1, r5
 8002180:	028b      	lsls	r3, r1, #10
 8002182:	4621      	mov	r1, r4
 8002184:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002188:	4621      	mov	r1, r4
 800218a:	028a      	lsls	r2, r1, #10
 800218c:	4610      	mov	r0, r2
 800218e:	4619      	mov	r1, r3
 8002190:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002192:	2200      	movs	r2, #0
 8002194:	61bb      	str	r3, [r7, #24]
 8002196:	61fa      	str	r2, [r7, #28]
 8002198:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800219c:	f7fe f814 	bl	80001c8 <__aeabi_uldivmod>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4613      	mov	r3, r2
 80021a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80021a8:	4b0b      	ldr	r3, [pc, #44]	@ (80021d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	0c1b      	lsrs	r3, r3, #16
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	3301      	adds	r3, #1
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80021b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80021c2:	e002      	b.n	80021ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021c4:	4b05      	ldr	r3, [pc, #20]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x204>)
 80021c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80021c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3750      	adds	r7, #80	@ 0x50
 80021d0:	46bd      	mov	sp, r7
 80021d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021d6:	bf00      	nop
 80021d8:	40023800 	.word	0x40023800
 80021dc:	00f42400 	.word	0x00f42400
 80021e0:	007a1200 	.word	0x007a1200

080021e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021e8:	4b03      	ldr	r3, [pc, #12]	@ (80021f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80021ea:	681b      	ldr	r3, [r3, #0]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	20000000 	.word	0x20000000

080021fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002200:	f7ff fff0 	bl	80021e4 <HAL_RCC_GetHCLKFreq>
 8002204:	4602      	mov	r2, r0
 8002206:	4b05      	ldr	r3, [pc, #20]	@ (800221c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	0a9b      	lsrs	r3, r3, #10
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	4903      	ldr	r1, [pc, #12]	@ (8002220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002212:	5ccb      	ldrb	r3, [r1, r3]
 8002214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002218:	4618      	mov	r0, r3
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40023800 	.word	0x40023800
 8002220:	08002924 	.word	0x08002924

08002224 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	220f      	movs	r2, #15
 8002232:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002234:	4b12      	ldr	r3, [pc, #72]	@ (8002280 <HAL_RCC_GetClockConfig+0x5c>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 0203 	and.w	r2, r3, #3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002240:	4b0f      	ldr	r3, [pc, #60]	@ (8002280 <HAL_RCC_GetClockConfig+0x5c>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800224c:	4b0c      	ldr	r3, [pc, #48]	@ (8002280 <HAL_RCC_GetClockConfig+0x5c>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002258:	4b09      	ldr	r3, [pc, #36]	@ (8002280 <HAL_RCC_GetClockConfig+0x5c>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002266:	4b07      	ldr	r3, [pc, #28]	@ (8002284 <HAL_RCC_GetClockConfig+0x60>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0207 	and.w	r2, r3, #7
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	601a      	str	r2, [r3, #0]
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40023800 	.word	0x40023800
 8002284:	40023c00 	.word	0x40023c00

08002288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e041      	b.n	800231e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d106      	bne.n	80022b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7fe fbba 	bl	8000a28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2202      	movs	r2, #2
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3304      	adds	r3, #4
 80022c4:	4619      	mov	r1, r3
 80022c6:	4610      	mov	r0, r2
 80022c8:	f000 f9b6 	bl	8002638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
	...

08002328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b01      	cmp	r3, #1
 800233a:	d001      	beq.n	8002340 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e04e      	b.n	80023de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2202      	movs	r2, #2
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0201 	orr.w	r2, r2, #1
 8002356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a23      	ldr	r2, [pc, #140]	@ (80023ec <HAL_TIM_Base_Start_IT+0xc4>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d022      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x80>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800236a:	d01d      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x80>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a1f      	ldr	r2, [pc, #124]	@ (80023f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d018      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x80>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a1e      	ldr	r2, [pc, #120]	@ (80023f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d013      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x80>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a1c      	ldr	r2, [pc, #112]	@ (80023f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d00e      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x80>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a1b      	ldr	r2, [pc, #108]	@ (80023fc <HAL_TIM_Base_Start_IT+0xd4>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d009      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x80>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a19      	ldr	r2, [pc, #100]	@ (8002400 <HAL_TIM_Base_Start_IT+0xd8>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d004      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x80>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a18      	ldr	r2, [pc, #96]	@ (8002404 <HAL_TIM_Base_Start_IT+0xdc>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d111      	bne.n	80023cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2b06      	cmp	r3, #6
 80023b8:	d010      	beq.n	80023dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f042 0201 	orr.w	r2, r2, #1
 80023c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ca:	e007      	b.n	80023dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0201 	orr.w	r2, r2, #1
 80023da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40010000 	.word	0x40010000
 80023f0:	40000400 	.word	0x40000400
 80023f4:	40000800 	.word	0x40000800
 80023f8:	40000c00 	.word	0x40000c00
 80023fc:	40010400 	.word	0x40010400
 8002400:	40014000 	.word	0x40014000
 8002404:	40001800 	.word	0x40001800

08002408 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d020      	beq.n	800246c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d01b      	beq.n	800246c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f06f 0202 	mvn.w	r2, #2
 800243c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f8d2 	bl	80025fc <HAL_TIM_IC_CaptureCallback>
 8002458:	e005      	b.n	8002466 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f8c4 	bl	80025e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 f8d5 	bl	8002610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f003 0304 	and.w	r3, r3, #4
 8002472:	2b00      	cmp	r3, #0
 8002474:	d020      	beq.n	80024b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d01b      	beq.n	80024b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f06f 0204 	mvn.w	r2, #4
 8002488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2202      	movs	r2, #2
 800248e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f8ac 	bl	80025fc <HAL_TIM_IC_CaptureCallback>
 80024a4:	e005      	b.n	80024b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f89e 	bl	80025e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f8af 	bl	8002610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	f003 0308 	and.w	r3, r3, #8
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d020      	beq.n	8002504 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f003 0308 	and.w	r3, r3, #8
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d01b      	beq.n	8002504 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f06f 0208 	mvn.w	r2, #8
 80024d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2204      	movs	r2, #4
 80024da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 f886 	bl	80025fc <HAL_TIM_IC_CaptureCallback>
 80024f0:	e005      	b.n	80024fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f878 	bl	80025e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 f889 	bl	8002610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	f003 0310 	and.w	r3, r3, #16
 800250a:	2b00      	cmp	r3, #0
 800250c:	d020      	beq.n	8002550 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f003 0310 	and.w	r3, r3, #16
 8002514:	2b00      	cmp	r3, #0
 8002516:	d01b      	beq.n	8002550 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f06f 0210 	mvn.w	r2, #16
 8002520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2208      	movs	r2, #8
 8002526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f860 	bl	80025fc <HAL_TIM_IC_CaptureCallback>
 800253c:	e005      	b.n	800254a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f852 	bl	80025e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f863 	bl	8002610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00c      	beq.n	8002574 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b00      	cmp	r3, #0
 8002562:	d007      	beq.n	8002574 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f06f 0201 	mvn.w	r2, #1
 800256c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7fe f960 	bl	8000834 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00c      	beq.n	8002598 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002584:	2b00      	cmp	r3, #0
 8002586:	d007      	beq.n	8002598 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f97c 	bl	8002890 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00c      	beq.n	80025bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d007      	beq.n	80025bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80025b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f834 	bl	8002624 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	f003 0320 	and.w	r3, r3, #32
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00c      	beq.n	80025e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f003 0320 	and.w	r3, r3, #32
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d007      	beq.n	80025e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f06f 0220 	mvn.w	r2, #32
 80025d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f94e 	bl	800287c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025e0:	bf00      	nop
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a43      	ldr	r2, [pc, #268]	@ (8002758 <TIM_Base_SetConfig+0x120>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d013      	beq.n	8002678 <TIM_Base_SetConfig+0x40>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002656:	d00f      	beq.n	8002678 <TIM_Base_SetConfig+0x40>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a40      	ldr	r2, [pc, #256]	@ (800275c <TIM_Base_SetConfig+0x124>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d00b      	beq.n	8002678 <TIM_Base_SetConfig+0x40>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a3f      	ldr	r2, [pc, #252]	@ (8002760 <TIM_Base_SetConfig+0x128>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d007      	beq.n	8002678 <TIM_Base_SetConfig+0x40>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a3e      	ldr	r2, [pc, #248]	@ (8002764 <TIM_Base_SetConfig+0x12c>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d003      	beq.n	8002678 <TIM_Base_SetConfig+0x40>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a3d      	ldr	r2, [pc, #244]	@ (8002768 <TIM_Base_SetConfig+0x130>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d108      	bne.n	800268a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800267e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	4313      	orrs	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a32      	ldr	r2, [pc, #200]	@ (8002758 <TIM_Base_SetConfig+0x120>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d02b      	beq.n	80026ea <TIM_Base_SetConfig+0xb2>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002698:	d027      	beq.n	80026ea <TIM_Base_SetConfig+0xb2>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a2f      	ldr	r2, [pc, #188]	@ (800275c <TIM_Base_SetConfig+0x124>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d023      	beq.n	80026ea <TIM_Base_SetConfig+0xb2>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a2e      	ldr	r2, [pc, #184]	@ (8002760 <TIM_Base_SetConfig+0x128>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d01f      	beq.n	80026ea <TIM_Base_SetConfig+0xb2>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a2d      	ldr	r2, [pc, #180]	@ (8002764 <TIM_Base_SetConfig+0x12c>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d01b      	beq.n	80026ea <TIM_Base_SetConfig+0xb2>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a2c      	ldr	r2, [pc, #176]	@ (8002768 <TIM_Base_SetConfig+0x130>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d017      	beq.n	80026ea <TIM_Base_SetConfig+0xb2>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a2b      	ldr	r2, [pc, #172]	@ (800276c <TIM_Base_SetConfig+0x134>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d013      	beq.n	80026ea <TIM_Base_SetConfig+0xb2>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a2a      	ldr	r2, [pc, #168]	@ (8002770 <TIM_Base_SetConfig+0x138>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00f      	beq.n	80026ea <TIM_Base_SetConfig+0xb2>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a29      	ldr	r2, [pc, #164]	@ (8002774 <TIM_Base_SetConfig+0x13c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d00b      	beq.n	80026ea <TIM_Base_SetConfig+0xb2>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a28      	ldr	r2, [pc, #160]	@ (8002778 <TIM_Base_SetConfig+0x140>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d007      	beq.n	80026ea <TIM_Base_SetConfig+0xb2>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a27      	ldr	r2, [pc, #156]	@ (800277c <TIM_Base_SetConfig+0x144>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d003      	beq.n	80026ea <TIM_Base_SetConfig+0xb2>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a26      	ldr	r2, [pc, #152]	@ (8002780 <TIM_Base_SetConfig+0x148>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d108      	bne.n	80026fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	4313      	orrs	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a0e      	ldr	r2, [pc, #56]	@ (8002758 <TIM_Base_SetConfig+0x120>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d003      	beq.n	800272a <TIM_Base_SetConfig+0xf2>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a10      	ldr	r2, [pc, #64]	@ (8002768 <TIM_Base_SetConfig+0x130>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d103      	bne.n	8002732 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	691a      	ldr	r2, [r3, #16]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f043 0204 	orr.w	r2, r3, #4
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	601a      	str	r2, [r3, #0]
}
 800274a:	bf00      	nop
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40010000 	.word	0x40010000
 800275c:	40000400 	.word	0x40000400
 8002760:	40000800 	.word	0x40000800
 8002764:	40000c00 	.word	0x40000c00
 8002768:	40010400 	.word	0x40010400
 800276c:	40014000 	.word	0x40014000
 8002770:	40014400 	.word	0x40014400
 8002774:	40014800 	.word	0x40014800
 8002778:	40001800 	.word	0x40001800
 800277c:	40001c00 	.word	0x40001c00
 8002780:	40002000 	.word	0x40002000

08002784 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002794:	2b01      	cmp	r3, #1
 8002796:	d101      	bne.n	800279c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002798:	2302      	movs	r3, #2
 800279a:	e05a      	b.n	8002852 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2202      	movs	r2, #2
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a21      	ldr	r2, [pc, #132]	@ (8002860 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d022      	beq.n	8002826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027e8:	d01d      	beq.n	8002826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a1d      	ldr	r2, [pc, #116]	@ (8002864 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d018      	beq.n	8002826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002868 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d013      	beq.n	8002826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a1a      	ldr	r2, [pc, #104]	@ (800286c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d00e      	beq.n	8002826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a18      	ldr	r2, [pc, #96]	@ (8002870 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d009      	beq.n	8002826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a17      	ldr	r2, [pc, #92]	@ (8002874 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d004      	beq.n	8002826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a15      	ldr	r2, [pc, #84]	@ (8002878 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d10c      	bne.n	8002840 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800282c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	4313      	orrs	r3, r2
 8002836:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	40010000 	.word	0x40010000
 8002864:	40000400 	.word	0x40000400
 8002868:	40000800 	.word	0x40000800
 800286c:	40000c00 	.word	0x40000c00
 8002870:	40010400 	.word	0x40010400
 8002874:	40014000 	.word	0x40014000
 8002878:	40001800 	.word	0x40001800

0800287c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <memset>:
 80028a4:	4402      	add	r2, r0
 80028a6:	4603      	mov	r3, r0
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d100      	bne.n	80028ae <memset+0xa>
 80028ac:	4770      	bx	lr
 80028ae:	f803 1b01 	strb.w	r1, [r3], #1
 80028b2:	e7f9      	b.n	80028a8 <memset+0x4>

080028b4 <__libc_init_array>:
 80028b4:	b570      	push	{r4, r5, r6, lr}
 80028b6:	4d0d      	ldr	r5, [pc, #52]	@ (80028ec <__libc_init_array+0x38>)
 80028b8:	4c0d      	ldr	r4, [pc, #52]	@ (80028f0 <__libc_init_array+0x3c>)
 80028ba:	1b64      	subs	r4, r4, r5
 80028bc:	10a4      	asrs	r4, r4, #2
 80028be:	2600      	movs	r6, #0
 80028c0:	42a6      	cmp	r6, r4
 80028c2:	d109      	bne.n	80028d8 <__libc_init_array+0x24>
 80028c4:	4d0b      	ldr	r5, [pc, #44]	@ (80028f4 <__libc_init_array+0x40>)
 80028c6:	4c0c      	ldr	r4, [pc, #48]	@ (80028f8 <__libc_init_array+0x44>)
 80028c8:	f000 f818 	bl	80028fc <_init>
 80028cc:	1b64      	subs	r4, r4, r5
 80028ce:	10a4      	asrs	r4, r4, #2
 80028d0:	2600      	movs	r6, #0
 80028d2:	42a6      	cmp	r6, r4
 80028d4:	d105      	bne.n	80028e2 <__libc_init_array+0x2e>
 80028d6:	bd70      	pop	{r4, r5, r6, pc}
 80028d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80028dc:	4798      	blx	r3
 80028de:	3601      	adds	r6, #1
 80028e0:	e7ee      	b.n	80028c0 <__libc_init_array+0xc>
 80028e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80028e6:	4798      	blx	r3
 80028e8:	3601      	adds	r6, #1
 80028ea:	e7f2      	b.n	80028d2 <__libc_init_array+0x1e>
 80028ec:	08002934 	.word	0x08002934
 80028f0:	08002934 	.word	0x08002934
 80028f4:	08002934 	.word	0x08002934
 80028f8:	08002938 	.word	0x08002938

080028fc <_init>:
 80028fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028fe:	bf00      	nop
 8002900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002902:	bc08      	pop	{r3}
 8002904:	469e      	mov	lr, r3
 8002906:	4770      	bx	lr

08002908 <_fini>:
 8002908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800290a:	bf00      	nop
 800290c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800290e:	bc08      	pop	{r3}
 8002910:	469e      	mov	lr, r3
 8002912:	4770      	bx	lr
